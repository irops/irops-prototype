{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Bootstrap-LinuxBastion Template: This creates an initial Linux Bastion to the Default VPC. This Bastion is intended to bootstrap creation of the IROPS system.",

  "Metadata" : {
    "AWS::CloudFormation::Interface" : {
      "ParameterGroups" : [
        {
          "Label" : { "default" : "Resource Dependencies" },
          "Parameters" : [
            "KeyName"
          ]
        },
        {
          "Label" : { "default" : "System Configuration" },
          "Parameters" : [
            "CompanyName",
            "SystemName"
          ]
        },
        {
          "Label" : { "default" : "Environment Configuration" },
          "Parameters" : [
            "EnvironmentType"
          ]
        },
        {
          "Label" : { "default" : "Utility Configuration" },
          "Parameters" : [
            "UtilityName",
            "UseStaticPublicAddress",
            "UseStaticHomeVolume",
            "HomeSnapshot",
            "UseLocalUsers",
            "LogRetention",
            "LogAlarmEmail",
            "OnSchedule",
            "OffSchedule"
          ]
        },
        {
          "Label" : { "default" : "Security Configuration" },
          "Parameters" : [
            "PublicUserNetwork",
            "PublicUserNetwork1",
            "PublicUserNetwork2"
          ]
        }
      ],

      "ParameterLabels" : {
        "KeyName" : { "default" : "Key Name" },
        "CompanyName" : { "default" : "Company Name" },
        "SystemName" : { "default" : "System Name" },
        "EnvironmentType" : { "default" : "Environment Type" },
        "UtilityName" : { "default" : "Utility Name" },
        "UseStaticPublicAddress" : { "default" : "Use Static Public Address" },
        "UseStaticHomeVolume" : { "default" : "Use Static Home Volume" },
        "HomeSnapshot" : { "default" : "Home Snapshot" },
        "UseLocalUsers" : { "default" : "Use Local Users" },
        "LogRetention" : { "default" : "Log Retention" },
        "LogAlarmEmail" : { "default" : "Log Alarm Email" },
        "OnSchedule" : { "default" : "On Schedule" },
        "OffSchedule" : { "default" : "Off Schedule" },
        "PublicUserNetwork" : { "default" : "Public User Network" },
        "PublicUserNetwork1" : { "default" : "Additional Public User Network 1" },
        "PublicUserNetwork2" : { "default" : "Additional Public User Network 2" }
      }
    }
  },

  "Parameters" : {
    "KeyName" : {
      "Description" : "Name of an existing KeyPair to enable SSH access to the Instances",
      "Type" : "AWS::EC2::KeyPair::KeyName",
      "MaxLength" : 32,
      "Default" : "example",
      "AllowedPattern" : "(^$|^[_a-zA-Z0-9]*$)",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    },

    "CompanyName" : {
      "Description" : "Name of the Company associated with the Stack",
      "Type" : "String",
      "MinLength" : 2,
      "MaxLength" : 32,
      "Default" : "Travel",
      "AllowedPattern" : "^[A-Z][a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters."
    },

    "SystemName" : {
      "Description" : "Name of the System associated with the Stack",
      "Type" : "String",
      "MinLength" : 2,
      "MaxLength" : 32,
      "Default" : "IROPS",
      "AllowedPattern" : "^[A-Z][a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters."
    },

    "EnvironmentType" : {
      "Description" : "Type of the Environment to build. Used to select size-related options in Mappings",
      "Type" : "String",
      "Default" : "micro",
      "AllowedValues" : [ "micro", "small", "medium", "large", "xlarge" ],
      "ConstraintDescription" : "must be micro, small, medium, large or xlarge."
    },

    "UtilityName" : {
      "Description" : "Name of the Utility associated with the Stack",
      "Type" : "String",
      "MinLength" : 2,
      "MaxLength" : 32,
      "Default" : "LinuxBastion",
      "AllowedPattern" : "^[A-Z][a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters."
    },

    "UseStaticPublicAddress" : {
      "Description" : "Create and associate a separate Static Public Address",
      "Type" : "String",
      "Default" : "true",
      "AllowedValues" : [ "true", "false" ],
      "ConstraintDescription" : "must be either true or false."
    },

    "UseStaticHomeVolume" : {
      "Description" : "Create and attach a separate EBS Volume containing Home directories",
      "Type" : "String",
      "Default" : "true",
      "AllowedValues" : [ "true", "false" ],
      "ConstraintDescription" : "must be either true or false."
    },

    "HomeSnapshot" : {
      "Description" : "Snapshot of previous EBS Volume containing Home directories",
      "Type" : "String",
      "Default" : "",
      "AllowedPattern" : "(^$|snap-[0-9a-f]{17}$)",
      "ConstraintDescription" : "must be a valid Snapshot ID."
    },

    "UseLocalUsers" : {
      "Description" : "Synchronize Members of BootstrapAdministrators IAM Group (with SSH Keys) to Local Unix Users",
      "Type" : "String",
      "Default" : "true",
      "AllowedValues" : [ "true", "false" ],
      "ConstraintDescription" : "must be either true or false."
    },

    "LogRetention" : {
      "Description" : "Number of days to retain log events",
      "Type" : "Number",
      "Default" : 14,
      "AllowedValues" : [ 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653 ],
      "ConstraintDescription" : "must be: 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827 or 3653."
    },

    "LogAlarmEmail" : {
      "Description" : "Email Address to use for Subscription to Log-related Alarm Topic",
      "Type" : "String",
      "Default" : "mcrawford@dxc.com",
      "AllowedPattern" : "^[a-z0-9._]+@[a-z0-9.-]+\\.[a-z]{2,6}$",
      "ConstraintDescription" : "must be a valid email address."
    },

    "OnSchedule" : {
      "Description" : "On Schedule in constrained Cron format (UTC)",
      "Type" : "String",
      "Default" : "0 11 * * 1-5",
      "AllowedPattern" : "(^0 ([5-9]|1[0-6]) \\* \\* 1-5$)",
      "ConstraintDescription" : "must follow constrained cron syntax: \"0 H * * 1-5\", where H = 5-16."
    },

    "OffSchedule" : {
      "Description" : "Off Schedule in constrained Cron format (UTC)",
      "Type" : "String",
      "Default" : "0 4 * * *",
      "AllowedPattern" : "(^0 [0-7] \\* \\* \\*$)",
      "ConstraintDescription" : "must follow constrained cron syntax: \"0 H * * *\", where H = 0-7."
    },

    "PublicUserNetwork" : {
      "Description" : "Public network that can access the Application",
      "Type" : "String",
      "Default" : "0.0.0.0/0",
      "AllowedPattern" : "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$",
      "ConstraintDescription" : "must be a valid IP CIDR range of the form x.x.x.x/x."
    },

    "PublicUserNetwork1" : {
      "Description" : "Additional public network that can access the Application",
      "Type" : "String",
      "Default" : "",
      "AllowedPattern" : "(^$|^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$)",
      "ConstraintDescription" : "must be a valid IP CIDR range of the form x.x.x.x/x."
    },

    "PublicUserNetwork2" : {
      "Description" : "Additional public network that can access the Application",
      "Type" : "String",
      "Default" : "",
      "AllowedPattern" : "(^$|^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$)",
      "ConstraintDescription" : "must be a valid IP CIDR range of the form x.x.x.x/x."
    }
  },

  "Mappings" : {
    "ImageIdMap" : {
      "AMI"            : { "AMZN" : "Amazon Linux 2016.09.1"},
      "us-east-1"      : { "AMZN" : "ami-0b33d91d" },
      "us-east-2"      : { "AMZN" : "ami-c55673a0" },
      "us-west-1"      : { "AMZN" : "ami-165a0876" },
      "us-west-2"      : { "AMZN" : "ami-f173cc91" },
      "ca-central-1"   : { "AMZN" : "ami-ebed508f" },
      "eu-west-1"      : { "AMZN" : "ami-70edb016" },
      "eu-central-1"   : { "AMZN" : "ami-af0fc0c0" },
      "eu-west-2"      : { "AMZN" : "ami-f1949e95" },
      "ap-southeast-1" : { "AMZN" : "ami-dc9339bf" },
      "ap-southeast-2" : { "AMZN" : "ami-1c47407f" },
      "ap-northeast-2" : { "AMZN" : "ami-dac312b4" },
      "ap-northeast-1" : { "AMZN" : "ami-56d4ad31" },
      "ap-south-1"     : { "AMZN" : "ami-f9daac96" },
      "sa-east-1"      : { "AMZN" : "ami-80086dec" }
    },

    "InstanceTypeMap" : {
      "Bastion" : { "micro" : "t2.nano", "small" : "t2.small", "medium" : "t2.medium", "large" : "t2.large", "xlarge" : "t2.xlarge" }
    }
  },

  "Conditions" : {
    "ConfigureKey" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Ref" : "KeyName" }, "" ]}]},
    "ConfigureStaticPublicAddress" : { "Fn::Equals" : [{ "Ref" : "UseStaticPublicAddress" }, "true" ]},
    "ConfigureStaticHomeVolume" : { "Fn::Equals" : [{ "Ref" : "UseStaticHomeVolume" }, "true" ]},
    "ConfigureStaticHomeSnapshot" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Ref" : "HomeSnapshot" }, "" ] }]},
    "ConfigureUsers" : { "Fn::Equals" : [{ "Ref" : "UseLocalUsers" }, "true" ]},
    "ConfigureLogs" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Ref" : "LogRetention" }, "0" ]}]},
    "ConfigureOnSchedule" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Ref" : "OnSchedule" }, "" ]}]},
    "ConfigureOffSchedule" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Ref" : "OffSchedule" }, "" ]}]},
    "ConfigurePublicUserNetwork" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Ref" : "PublicUserNetwork" }, "" ]}]},
    "ConfigurePublicUserNetwork1" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Ref" : "PublicUserNetwork1" }, "" ]}]},
    "ConfigurePublicUserNetwork2" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Ref" : "PublicUserNetwork2" }, "" ]}]}
  },

  "Resources" : {
    "Role" : {
      "Type" : "AWS::IAM::Role",
      "Properties" : {
        "AssumeRolePolicyDocument" : {
          "Version" : "2012-10-17",
          "Statement" : [{
            "Effect" : "Allow",
            "Principal" : { "Service" : [ "ec2.amazonaws.com" ]},
            "Action" : [ "sts:AssumeRole" ]
          }]
        },
        "Path" : "/"
      }
    },

    "StaticPublicAddressPolicy" : {
      "Type" : "AWS::IAM::Policy",
      "Properties" : {
        "PolicyName" : "StaticPublicAddressPolicy",
        "PolicyDocument" : {
          "Version" : "2012-10-17",
          "Statement" : [{
            "Effect" : "Allow",
            "Action" : [
              "ec2:AssociateAddress",
              "ec2:DisassociateAddress"
            ],
            "Resource" : "*"
          }]
        },
        "Roles" : [{ "Ref" : "Role" }]
      },
      "Condition" : "ConfigureStaticPublicAddress"
    },

    "StaticHomeVolumePolicy" : {
      "Type" : "AWS::IAM::Policy",
      "Properties" : {
        "PolicyName" : "StaticHomeVolumePolicy",
        "PolicyDocument" : {
          "Version" : "2012-10-17",
          "Statement" : [{
            "Effect" : "Allow",
            "Action" : [
              "ec2:AttachVolume",
              "ec2:DetachVolume"
            ],
              "Resource" : [
                { "Fn::Sub" : "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*" },
                { "Fn::Sub" : "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:volume/${HomeVolume}" }
              ]
          }]
        },
        "Roles" : [{ "Ref" : "Role" }]
      },
      "Condition" : "ConfigureStaticHomeVolume"
    },

    "LogMonitoringPolicy" : {
      "Type" : "AWS::IAM::Policy",
      "Properties" : {
        "PolicyName" : "LogMonitoringPolicy",
        "PolicyDocument" : {
          "Version" : "2012-10-17",
          "Statement" : [{
            "Effect" : "Allow",
            "Action" : [
              "logs:CreateLogGroup",
              "logs:CreateLogStream",
              "logs:PutLogEvents",
              "logs:DescribeLogStreams"
            ],
            "Resource" : [
              "arn:aws:logs:*:*:*"
            ]
          }]
        },
        "Roles" : [{ "Ref" : "Role" }]
      },
      "Condition" : "ConfigureLogs"
    },

    "LocalUsersPolicy" : {
      "Type" : "AWS::IAM::Policy",
      "Properties" : {
        "PolicyName" : "LocalUsersPolicy",
        "PolicyDocument" : {
          "Version" : "2012-10-17",
          "Statement" : [{
            "Effect" : "Allow",
            "Action" : [
              "iam:GetGroup"
            ],
            "Resource" : [
              { "Fn::Sub" : "arn:aws:iam::${AWS::AccountId}:group/BootstrapAdministrators" },
              { "Fn::Sub" : "arn:aws:iam::${AWS::AccountId}:group/BootstrapUsers" }
            ]
          },
          {
            "Effect" : "Allow",
            "Action" : [
              "iam:ListSSHPublicKeys",
              "iam:GetSSHPublicKey"
            ],
            "Resource" : { "Fn::Sub" : "arn:aws:iam::${AWS::AccountId}:user/*" }
          }]
        },
        "Roles" : [{ "Ref" : "Role" }]
      },
      "Condition" : "ConfigureUsers"
    },

    "SecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : { "Fn::Join" : [ "-", [ "Bootstrap", { "Ref" : "UtilityName" }, "SecurityGroup" ]]},
        "SecurityGroupIngress" : [
          { "Fn::If" : [ "ConfigurePublicUserNetwork",  { "IpProtocol" : "icmp", "FromPort" : "-1", "ToPort" : "-1", "CidrIp" : { "Ref" : "PublicUserNetwork" }},  { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigurePublicUserNetwork",  { "IpProtocol" : "tcp",  "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "PublicUserNetwork" }},  { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigurePublicUserNetwork1", { "IpProtocol" : "icmp", "FromPort" : "-1", "ToPort" : "-1", "CidrIp" : { "Ref" : "PublicUserNetwork1" }}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigurePublicUserNetwork1", { "IpProtocol" : "tcp",  "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "PublicUserNetwork1" }}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigurePublicUserNetwork2", { "IpProtocol" : "icmp", "FromPort" : "-1", "ToPort" : "-1", "CidrIp" : { "Ref" : "PublicUserNetwork2" }}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigurePublicUserNetwork2", { "IpProtocol" : "tcp",  "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "PublicUserNetwork2" }}, { "Ref" : "AWS::NoValue" }]}
        ],
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ "Bootstrap", { "Ref" : "UtilityName" }, "SecurityGroup" ]]}}
        ]
      }
    },

    "LogGroup" : {
      "Type" : "AWS::Logs::LogGroup",
      "Properties" : {
        "RetentionInDays" : { "Ref" : "LogRetention" }
      },
      "Condition" : "ConfigureLogs"
    },

    "InvalidUserMetricFilter" : {
      "Type" : "AWS::Logs::MetricFilter",
      "Properties" : {
        "LogGroupName" : { "Ref" : "LogGroup" },
        "FilterPattern" : "[month, day, time, host, program=sshd*, message=Invalid user, ...]",
        "MetricTransformations" : [{
          "MetricNamespace" : { "Fn::Join" : [ "", [ { "Ref" : "SystemName" }, "/Bootstrap-", { "Ref" : "UtilityName" }]]},
          "MetricName" : "InvalidUsersCount",
          "MetricValue" : "1"
        }]
      },
      "Condition" : "ConfigureLogs"
    },

    "InvalidUsersAlarm" : {
      "Type" : "AWS::CloudWatch::Alarm",
      "Properties" : {
        "AlarmDescription" : "The number of Invalid Logins is greater than 2 over 1 minute",
        "AlarmActions" : [
          { "Ref": "Topic" }
        ],
        "Namespace" : { "Fn::Join" : [ "", [ { "Ref" : "SystemName" }, "/Bootstrap-", { "Ref" : "UtilityName" }]]},
        "MetricName" : "InvalidUsersCount",
        "Statistic" : "Sum",
        "Period" : "60",
        "EvaluationPeriods" : "1",
        "Threshold" : "2",
        "ComparisonOperator" : "GreaterThanThreshold"
      },
      "Condition" : "ConfigureLogs"
    },

    "Topic" : {
      "Type" : "AWS::SNS::Topic",
      "Properties" : {
        "Subscription" : [
          { "Endpoint" : { "Ref" : "LogAlarmEmail" }, "Protocol" : "email" }
        ]
      },
      "Condition" : "ConfigureLogs"
    },

    "HomeVolume" : {
      "Type" : "AWS::EC2::Volume",
      "Properties" : {
        "AvailabilityZone" : { "Fn::Select" : [ "0", { "Fn::GetAZs" : "" }]},
        "Size" : "10",
        "SnapshotId" : { "Fn::If" : [ "ConfigureStaticHomeSnapshot", { "Ref" : "HomeSnapshot" }, { "Ref" : "AWS::NoValue" }]},
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ "Bootstrap", { "Ref" : "UtilityName" }, "HomeVolume" ]]}}
        ]
      },
      "Condition" : "ConfigureStaticHomeVolume",
      "DeletionPolicy" : "Snapshot"
    },

    "EIP" : {
      "Type" : "AWS::EC2::EIP",
      "Properties" : {
        "Domain" : "vpc"
      },
      "Condition" : "ConfigureStaticPublicAddress"
    },

    "InstanceProfile" : {
      "Type" : "AWS::IAM::InstanceProfile",
      "Properties" : {
        "Path" : "/",
        "Roles" : [{ "Ref" : "Role" }]
      }
    },

    "LaunchConfiguration" : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "All" : [
              "UpdateOS",
              "ConfigureOSUpdates",
              { "Fn::If" : [ "ConfigureLogs", "ConfigureLogs", { "Ref": "AWS::NoValue" }]},
              "ConfigureCFN",
              "ConfigureHostname",
              "ConfigureOS",
              { "Fn::If" : [ "ConfigureStaticPublicAddress", "ConfigureStaticPublicAddress", { "Ref": "AWS::NoValue" }]},
              { "Fn::If" : [ "ConfigureStaticHomeVolume", "ConfigureStaticHomeVolume", { "Ref": "AWS::NoValue" }]},
              { "Fn::If" : [ "ConfigureUsers", "ConfigureUsers", { "Ref": "AWS::NoValue" }]}
            ]
          },
          "UpdateOS" : {
            "commands" : {
              "01_yum_update" : {
                "command" : "yum update -y",
                "ignoreErrors" : "false"
              }
            }
          },
          "ConfigureOSUpdates" : {
            "packages" : {
              "yum" : {
                "yum-cron" : []
              }
            },
            "files" : {
              "/etc/yum/yum-cron.conf" : {
                "content" : { "Fn::Join" : [ "\n", [
                  "[commands]",
                  "update_cmd = security",
                  "update_messages = yes",
                  "download_updates = yes",
                  "apply_updates = yes",
                  "random_sleep = 10"
                ]]},
                "mode"  : "000644",
                "owner" : "root",
                "group" : "root"
              }
            }
          },
          "ConfigureLogs" : {
            "packages" : {
              "yum" : {
                "awslogs" : []
              }
            },
            "files" : {
              "/etc/awslogs/awscli.conf" : {
                "content" : { "Fn::Join" : [ "\n", [
                  "[default]",
                  { "Fn::Sub" : "region = ${AWS::Region}" },
                  "[plugins]",
                  "cwlogs = cwlogs"
                ]]},
                "mode"  : "000644",
                "owner" : "root",
                "group" : "root"
              },
              "/etc/awslogs/awslogs.conf" : {
                "content" : { "Fn::Join" : [ "\n", [
                  "[general]",
                  "state_file = /var/lib/awslogs/agent-state",
                  "[/var/log/messages]",
                  "datetime_format = %b %d %H:%M:%S",
                  "file = /var/log/messages",
                  "log_stream_name = {instance_id}/var/log/messages",
                  { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "log_group_name = ${LogGroup}" }, { "Ref" : "AWS::NoValue" }]},
                  "[/var/log/secure]",
                  "datetime_format = %b %d %H:%M:%S",
                  "file = /var/log/secure",
                  "log_stream_name = {instance_id}/var/log/secure",
                  { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "log_group_name = ${LogGroup}" }, { "Ref" : "AWS::NoValue" }]},
                  "[/var/log/cron]",
                  "datetime_format = %b %d %H:%M:%S",
                  "file = /var/log/cron",
                  "log_stream_name = {instance_id}/var/log/cron",
                  { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "log_group_name = ${LogGroup}" }, { "Ref" : "AWS::NoValue" }]},
                  "[/var/log/cloud-init.log]",
                  "datetime_format = %b %d %H:%M:%S",
                  "file = /var/log/cloud-init.log",
                  "log_stream_name = {instance_id}/var/log/cloud-init.log",
                  { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "log_group_name = ${LogGroup}" }, { "Ref" : "AWS::NoValue" }]},
                  "[/var/log/cfn-init.log]",
                  "datetime_format = %Y-%m-%d %H:%M:%S",
                  "file = /var/log/cfn-init.log",
                  "log_stream_name = {instance_id}/var/log/cfn-init.log",
                  { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "log_group_name = ${LogGroup}" }, { "Ref" : "AWS::NoValue" }]},
                  "[/var/log/cfn-hup.log]",
                  "datetime_format = %Y-%m-%d %H:%M:%S",
                  "file = /var/log/cfn-hup.log",
                  "log_stream_name = {instance_id}/var/log/cfn-hup.log",
                  { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "log_group_name = ${LogGroup}" }, { "Ref" : "AWS::NoValue" }]},
                  "[/var/log/cfn-init-cmd.log]",
                  "datetime_format = %Y-%m-%d %H:%M:%S",
                  "file = /var/log/cfn-init-cmd.log",
                  "log_stream_name = {instance_id}/var/log/cfn-init-cmd.log",
                  { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "log_group_name = ${LogGroup}" }, { "Ref" : "AWS::NoValue" }]},
                  "[/var/log/cloud-init-output.log]",
                  "file = /var/log/cloud-init-output.log",
                  "log_stream_name = {instance_id}/var/log/cloud-init-output.log",
                  { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "log_group_name = ${LogGroup}" }, { "Ref" : "AWS::NoValue" }]},
                  "[/var/log/dmesg]",
                  "file = /var/log/dmesg",
                  "log_stream_name = {instance_id}/var/log/dmesg",
                  { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "log_group_name = ${LogGroup}" }, { "Ref" : "AWS::NoValue" }]}
                ]]},
                "mode"  : "000644",
                "owner" : "root",
                "group" : "root"
              }
            },
            "services" : {
              "sysvinit" : {
                "awslogs" : {
                  "enabled" : "true",
                  "ensureRunning" : "true",
                  "packages" : { "yum" : [ "awslogs" ]},
                  "files" : [
                    "/etc/awslogs/awslogs.conf",
                    "/etc/awslogs/awscli.conf"
                  ]
                }
              }
            }
          },
          "ConfigureCFN" : {
            "files" : {
              "/etc/cfn/cfn-hup.conf" : {
                "content" : { "Fn::Join" : [ "\n", [
                  "[main]",
                  { "Fn::Sub" : "stack=${AWS::StackId}" },
                  { "Fn::Sub" : "region=${AWS::Region}" }
                ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
                "content" : { "Fn::Join" : [ "\n", [
                  "[cfn-auto-reloader-hook]",
                  "triggers=post.update",
                  "path=Resources.LaunchConfiguration.Metadata.AWS::CloudFormation::Init",
                  { "Fn::Sub" : "action=/opt/aws/bin/cfn-init --verbose --configsets All --stack ${AWS::StackName} --resource LaunchConfiguration --region ${AWS::Region}" }
                ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              }
            },
            "services" : {
              "sysvinit" : {
                "cfn-hup" : {
                  "enabled" : "true",
                  "ensureRunning" : "true",
                  "files" : [
                    "/etc/cfn/cfn-hup.conf",
                    "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                  ]
                }
              }
            }
          },
          "ConfigureHostname" : {
            "files" : {
              "/root/bin/sethostname" : {
                "content" : { "Fn::Join" : [ "\n", [
                  "#!/bin/bash",
                  "zone=$(curl -s -m 60 http://169.254.169.254/latest/meta-data/placement/availability-zone)",
                  "region=${zone::-1}",
                  "hostname=bootstrap.iropshub.com",
                  "address=$(curl -s -m 60 http://169.254.169.254/latest/meta-data/local-ipv4)",
                  "sed -i -e \"/^$address/d\" -e \"$ a$address $hostname\" /etc/hosts",
                  "hostname $hostname"
                ]]},
                "mode"  : "000700",
                "owner" : "root",
                "group" : "root"
              }
            },
            "commands" : {
              "01_sethostname" : {
                "command" : "/root/bin/sethostname",
                "ignoreErrors" : "false"
              }
            }
          },
          "ConfigureOS" : {
            "packages" : {
              "yum" : {
                "git" : []
              }
            },
            "files" : {
              "/etc/profile.d/local.sh" : {
                "content" : { "Fn::Join" : [ "\n", [
                  "alias lsa='ls -lAF'",
                  "alias ip4='ip addr | grep \" inet \"'"
                ]]},
                "mode"  : "000644",
                "owner" : "root",
                "group" : "root"
              },
              "/etc/motd" : {
                "content" : { "Fn::Join" : [ "\n", [
                  "+-------------------------------------+",
                  "|                                     |",
                  "| Welcome to IROPS Bootstrap Bastion! |",
                  "|                                     |",
                  "+-------------------------------------+"
                ]]},
                "mode"  : "000644",
                "owner" : "root",
                "group" : "root"
              }
            }
          },
          "ConfigureStaticPublicAddress" : {
            "files" : {
              "/root/bin/associateaddress" : {
                "content" : { "Fn::Join" : [ "\n", [
                  "#!/bin/bash",
                  "zone=$(curl -s -m 60 http://169.254.169.254/latest/meta-data/placement/availability-zone)",
                  "region=${zone::-1}",
                  "instance=$(curl -s -m 60 http://169.254.169.254/latest/meta-data/instance-id)",
                  { "Fn::If" : [ "ConfigureStaticPublicAddress", { "Fn::Sub" : "eipalloc=${EIP.AllocationId}" }, "eipalloc=" ]},
                  "aws ec2 associate-address --instance-id $instance --allocation-id $eipalloc --region $region --output text"

                ]]},
                "mode"  : "000700",
                "owner" : "root",
                "group" : "root"
              }
            },
            "commands" : {
              "01_associateaddress" : {
                "command" : "/root/bin/associateaddress",
                "ignoreErrors" : "false"
              }
            }
          },
          "ConfigureStaticHomeVolume" : {
            "packages" : {
              "yum" : {
                "parted" : [],
                "xfsprogs" : []
              }
            },
            "files" : {
              "/root/bin/attachvolume" : {
                "content" : { "Fn::Join" : [ "\n", [
                  "#!/bin/bash",
                  "zone=$(curl -s -m 60 http://169.254.169.254/latest/meta-data/placement/availability-zone)",
                  "region=${zone::-1}",
                  "instance=$(curl -s -m 60 http://169.254.169.254/latest/meta-data/instance-id)",
                  { "Fn::If" : [ "ConfigureStaticHomeVolume", { "Fn::Sub" : "volume=${HomeVolume}" }, "volume=" ]},
                  "aws ec2 attach-volume --instance-id $instance --volume-id $volume --device /dev/sdf --region $region --output text",
                  "echo \"$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] Wait for Instance to recognize Volume\"",
                  "attempt=0",
                  "attempts=30",
                  "delay=5",
                  "while ((attempt++ <= attempts)); do",
                  "    if fdisk -l /dev/xvdf &> /dev/null; then",
                  "        break",
                  "    else",
                  "        echo \"$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] Volume not yet attached, pausing $delay seconds...\"",
                  "        sleep $delay",
                  "    fi",
                  "done",
                  "filesystem_type=$(file -sL /dev/xvdf)",
                  "if [[ $filesystem_type == *\"XFS\"* ]]; then",
                  "    echo \"$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] Volume formatted with XFS Filesystem\"",
                  "    echo \"$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] Existing Volume: using Snapshot, or mapping Volume to replacement Instance\"",
                  "    rsync -avzP /home/ /home-save 2>&1 | sed -e \"s/^/$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] /\"",
                  "    mount /home 2>&1 | sed -e \"s/^/$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] /\"",
                  "    rsync -avzP /home-save/ec2-user/.ssh/authorized_keys /home/ec2-user/.ssh 2>&1 | sed -e \"s/^/$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] /\"",
                  "    # rm -Rf /home-save 2>&1 | sed -e \"s/^/$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] /\"",
                  "else",
                  "    echo \"$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] Volume not formatted\"",
                  "    echo \"$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] New Volume: mounted to initial Instance\"",
                  "    mkfs -t xfs /dev/xvdf 2>&1 | sed -e \"s/^/$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] /\"",
                  "    xfs_admin -L /home /dev/xvdf 2>&1 | sed -e \"s/^/$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] /\"",
                  "    mv /home /home-save 2>&1 | sed -e \"s/^/$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] /\"",
                  "    mkdir /home 2>&1 | sed -e \"s/^/$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] /\"",
                  "    mount /home 2>&1 | sed -e \"s/^/$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] /\"",
                  "    rsync -avzP /home-save/ /home 2>&1 | sed -e \"s/^/$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] /\"",
                  "    rm -Rf /home-save 2>&1 | sed -e \"s/^/$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] /\"",
                  "fi"
                ]]},
                "mode"  : "000700",
                "owner" : "root",
                "group" : "root"
              },
              "/etc/fstab" : {
                "content" : { "Fn::Join" : [ "\n", [
                  "#",
                  "LABEL=/     /           ext4    defaults,noatime  1   1",
                  "LABEL=/home /home       xfs     defaults,noatime  1   1",
                  "tmpfs       /dev/shm    tmpfs   defaults        0   0",
                  "devpts      /dev/pts    devpts  gid=5,mode=620  0   0",
                  "sysfs       /sys        sysfs   defaults        0   0",
                  "proc        /proc       proc    defaults        0   0"
                ]]},
                "mode"  : "000644",
                "owner" : "root",
                "group" : "root"
              }
            },
            "commands" : {
              "01_attachvolume" : {
                "command" : "/root/bin/attachvolume",
                "ignoreErrors" : "false"
              }
            }
          },
          "ConfigureUsers" : {
            "files" : {
              "/root/bin/createusers" : {
                "content" : { "Fn::Join" : [ "\n", [
                  "#!/bin/bash",
                  "zone=$(curl -s -m 60 http://169.254.169.254/latest/meta-data/placement/availability-zone)",
                  "region=${zone::-1}",
                  "echo",
                  "echo $(date +\"%Y-%m-%d %H:%M:%S,%3N\") [DEBUG] Obtaining members of BootstrapAdministrators IAM Group:",
                  "administrators=$(aws iam get-group --group-name BootstrapAdministrators --query 'Users[].UserName' --region $region --output text)",
                  "echo $(date +\"%Y-%m-%d %H:%M:%S,%3N\") [DEBUG] Adding local administrators based on membership in BootstrapAdministrators IAM Group:",
                  "for administrator in $administrators; do",
                  "    echo -n \"$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] - $administrator\"",
                  "    keys=$(aws iam list-ssh-public-keys --user-name $administrator --query 'SSHPublicKeys[].SSHPublicKeyId' --region $region --output text)",
                  "    if [ ! \"$keys\" = \"\" ]; then",
                  "        if [ -d /home/$administrator ]; then",
                  "            /usr/sbin/useradd -M $administrator",
                  "        else",
                  "            /usr/sbin/useradd $administrator",
                  "        fi",
                  "        echo \"$administrator ALL=(ALL) NOPASSWD:ALL\" > /etc/sudoers.d/$administrator",
                  "        chmod 0400 /etc/sudoers.d/$administrator",
                  "        mkdir -p /home/$administrator/.ssh",
                  "        chmod 0700 /home/$administrator/.ssh",
                  "        rm -f /home/$administrator/.ssh/authorized_keys",
                  "        for key in $keys; do",
                  "            echo -n \" - $key\"",
                  "            echo $(aws iam get-ssh-public-key --user-name $administrator --ssh-public-key-id $key --encoding SSH --query 'SSHPublicKey.SSHPublicKeyBody' --region $region --output text) >> /home/$administrator/.ssh/authorized_keys",
                  "        done",
                  "        chmod 0600 /home/$administrator/.ssh/authorized_keys",
                  "        chown -R $administrator:$administrator /home/$administrator",
                  "        echo",
                  "    else",
                  "        echo \" - skipped (no SSH Key)\"",
                  "    fi",
                  "done",
                  "",
                  "echo $(date +\"%Y-%m-%d %H:%M:%S,%3N\") [DEBUG] Obtaining members of BootstrapUsers IAM Group:",
                  "users=$(aws iam get-group --group-name BootstrapUsers --query 'Users[].UserName' --region $region --output text)",
                  "echo $(date +\"%Y-%m-%d %H:%M:%S,%3N\") [DEBUG] Adding local users based on membership in BootstrapUsers IAM Group:",
                  "for user in $users; do",
                  "    echo -n \"$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] - $user\"",
                  "    if ! id $user &> /dev/null; then",
                  "        keys=$(aws iam list-ssh-public-keys --user-name $user --query 'SSHPublicKeys[].SSHPublicKeyId' --region $region --output text)",
                  "        if [ ! \"$keys\" = \"\" ]; then",
                  "            if [ -d /home/$user ]; then",
                  "                /usr/sbin/useradd -M $user",
                  "            else",
                  "                /usr/sbin/useradd $user",
                  "            fi",
                  "            mkdir -p /home/$user/.ssh",
                  "            chmod 0700 /home/$user/.ssh",
                  "            rm -f /home/$user/.ssh/authorized_keys",
                  "            for key in $keys; do",
                  "                echo -n \" - $key\"",
                  "                echo $(aws iam get-ssh-public-key --user-name $user --ssh-public-key-id $key --encoding SSH --query 'SSHPublicKey.SSHPublicKeyBody' --region $region --output text) >> /home/$user/.ssh/authorized_keys",
                  "            done",
                  "            chmod 0600 /home/$user/.ssh/authorized_keys",
                  "            chown -R $user:$user /home/$user",
                  "            echo",
                  "        else",
                  "            echo \" - skipped (no SSH Key)\"",
                  "        fi",
                  "    else",
                  "        echo \" - skipped (user created as administrator)\"",
                  "    fi",
                  "done"
              ]]},
                "mode"  : "000700",
                "owner" : "root",
                "group" : "root"
              }
            },
            "commands" : {
              "01_createusers" : {
                "command" : "/root/bin/createusers",
                "ignoreErrors" : "false"
              }
            }
          }
        }
      },
      "Properties" : {
        "ImageId" : { "Fn::FindInMap" : [ "ImageIdMap", { "Ref" : "AWS::Region" } , "AMZN" ]},
        "InstanceType" : { "Fn::FindInMap" : [ "InstanceTypeMap", "Bastion", { "Ref" : "EnvironmentType" }]},
        "IamInstanceProfile" : { "Ref" : "InstanceProfile" },
        "KeyName" : { "Fn::If" : [ "ConfigureKey", { "Ref" : "KeyName" }, { "Ref" : "AWS::NoValue" }]},
        "SecurityGroups" : [{ "Ref" : "SecurityGroup" }],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : [ "\n", [
          "#!/bin/bash -xe",
          "yum update -y aws-cfn-bootstrap",
          "",
          { "Fn::Sub" : "/opt/aws/bin/cfn-init --verbose --configsets All --stack ${AWS::StackName} --resource LaunchConfiguration --region ${AWS::Region}" },
          { "Fn::Sub" : "/opt/aws/bin/cfn-signal --exit-code $? --stack ${AWS::StackName} --resource AutoScalingGroup --region ${AWS::Region}" }
        ]]}}
      }
    },

    "AutoScalingGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "LaunchConfigurationName" : { "Ref" : "LaunchConfiguration" },
        "AvailabilityZones" : [{ "Fn::Select" : [ "0", { "Fn::GetAZs" : "" }]}],
        "MinSize" : 1,
        "MaxSize" : 1,
        "DesiredCapacity" : 1,
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ "Bootstrap", { "Ref" : "UtilityName" }, "Instance" ]]}, "PropagateAtLaunch" : "true" }
        ]
      },
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Count" : 1,
          "Timeout" : "PT10M"
        }
      },
      "UpdatePolicy" : {
        "AutoScalingRollingUpdate" : {
          "MinInstancesInService" : "1",
          "MaxBatchSize" : "1",
          "PauseTime" : "PT10M",
          "WaitOnResourceSignals" : "true"
        }
      }
    },

    "OnScheduledAction" : {
      "Type" : "AWS::AutoScaling::ScheduledAction",
      "Properties" : {
        "AutoScalingGroupName" : { "Ref" : "AutoScalingGroup" },
        "MinSize" : 1,
        "MaxSize" : 1,
        "DesiredCapacity" : 1,
        "Recurrence" : { "Ref" : "OnSchedule" }
      },
      "Condition" : "ConfigureOnSchedule"
    },

    "OffScheduledAction" : {
      "Type" : "AWS::AutoScaling::ScheduledAction",
      "Properties" : {
        "AutoScalingGroupName" : { "Ref" : "AutoScalingGroup" },
        "MinSize" : 0,
        "MaxSize" : 0,
        "DesiredCapacity" : 0,
        "Recurrence" : { "Ref" : "OffSchedule" }
      },
      "Condition" : "ConfigureOffSchedule"
    }
  },

  "Outputs" : {
    "SecurityGroup" : {
      "Description" : "The SecurityGroup",
      "Value" : { "Ref" : "SecurityGroup" },
      "Export" : { "Name" : { "Fn::Sub" : "${AWS::StackName}-SecurityGroup" }}
    },

    "EIP" : {
      "Description" : "The Public Address of the Bastion",
      "Value" : { "Ref" : "EIP" },
      "Export" : { "Name" : { "Fn::Sub" : "${AWS::StackName}-EIP" }}
    },

    "HomeVolume" : {
      "Description" : "The Volume containing Home directories",
      "Value" : { "Ref" : "HomeVolume" },
      "Export" : { "Name" : { "Fn::Sub" : "${AWS::StackName}-HomeVolume" }},
      "Condition" : "ConfigureStaticHomeVolume"
    }
  }
}
