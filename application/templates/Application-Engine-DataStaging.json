{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Application-Engine-DataStaging Template. This template creates the Engine Application DataStaging Tier.",

  "Metadata" : {
    "AWS::CloudFormation::Interface" : {
      "ParameterGroups" : [
        {
          "Label" : { "default" : "Stack Dependencies" },
          "Parameters" : [
            "EngineMonitoringStackName",
            "DataTransferSFTPStackName",
            "MongoDBStackName",
            "RabbitMQStackName",
            "WebSphereMQStackName",
            "OctopusDeployStackName",
            "VPNStackName",
            "ActiveDirectoryStackName",
            "VPCStackName",
            "CustomIdentifierFunctionsStackName",
            "StandardCIDRFunctionsStackName",
            "StandardAMIFunctionsStackName",
            "StandardBucketsStackName",
            "StandardTopicsStackName"
          ]
        },
        {
          "Label" : { "default" : "Resource Dependencies" },
          "Parameters" : [
            "KeyName"
          ]
        },
        {
          "Label" : { "default" : "System Configuration" },
          "Parameters" : [
            "CompanyName",
            "SystemName"
          ]
        },
        {
          "Label" : { "default" : "Environment Configuration" },
          "Parameters" : [
            "EnvironmentType",
            "EnvironmentZones",
            "OSName",
            "OSDate"
          ]
        },
        {
          "Label" : { "default" : "Application Dependencies Configuration" },
          "Parameters" : [
            "SharedScriptFolder",
            "ScriptFolder",
            "SharedProductFolder",
            "ProductFolder",
            "AtomProductObject",
            "ProductObject",
            "SharedConfigurationFolder",
            "ConfigurationFolder",
            "ConfigurationObject"
          ]
        },
        {
          "Label" : { "default" : "Application Configuration" },
          "Parameters" : [
            "SharedApplicationFolder",
            "ApplicationFolder",
            "ApplicationObject",
            "ApplicationName",
            "ApplicationVersion",
            "ComponentName",
            "UseStaticAddress",
            "LogRetention",
            "Schedule"
          ]
        },
        {
          "Label" : { "default" : "Security Configuration" },
          "Parameters" : [
            "AdministratorNetworks",
            "IntegrationNetworks",
            "DomainAdminUser",
            "DomainAdminPassword"
          ]
        }
      ],

      "ParameterLabels" : {
        "EngineMonitoringStackName" : { "default" : "Engine Monitoring Stack Name" },
        "DataTransferSFTPStackName" : { "default" : "DataTransfer SFTP Stack Name" },
        "MongoDBStackName" : { "default" : "MongoDB Stack Name" },
        "RabbitMQStackName" : { "default" : "RabbitMQ Stack Name" },
        "WebSphereMQStackName" : { "default" : "WebSphereMQ Stack Name" },
        "OctopusDeployStackName" : { "default" : "Octopus Deploy Stack Name" },
        "VPNStackName" : { "default" : "VPN Stack Name" },
        "ActiveDirectoryStackName" : { "default" : "Active Directory Stack Name" },
        "VPCStackName" : { "default" : "VPC Stack Name" },
        "CustomIdentifierFunctionsStackName" : { "default" : "CustomIdentifierFunctions Stack Name" },
        "StandardCIDRFunctionsStackName" : { "default" : "StandardCIDRFunctions Stack Name" },
        "StandardAMIFunctionsStackName" : { "default" : "StandardAMIFunctions Stack Name" },
        "StandardBucketsStackName" : { "default" : "StandardBuckets Stack Name" },
        "StandardTopicsStackName" : { "default" : "StandardTopics Stack Name" },
        "KeyName" : { "default" : "Key Name" },
        "CompanyName" : { "default" : "Company Name" },
        "SystemName" : { "default" : "System Name" },
        "EnvironmentType" : { "default" : "Environment Type" },
        "EnvironmentZones" : { "default" : "Environment Zones" },
        "OSName" : { "default" : "Operating System Name" },
        "OSDate" : { "default" : "Operating System Date" },
        "SharedScriptFolder" : { "default" : "Shared Script Folder" },
        "ScriptFolder" : { "default" : "Script Folder" },
        "SharedProductFolder" : { "default" : "Shared Product Folder" },
        "ProductFolder" : { "default" : "Product Folder" },
        "AtomProductObject" : { "default" : "Atom Product Object" },
        "ProductObject" : { "default" : "Product Object" },
        "SharedConfigurationFolder" : { "default" : "Shared Configuration Folder" },
        "ConfigurationFolder" : { "default" : "Configuration Folder" },
        "ConfigurationObject" : { "default" : "Configuration Object" },
        "SharedApplicationFolder" : { "default" : "Shared Application Folder" },
        "ApplicationFolder" : { "default" : "Application Folder" },
        "ApplicationObject" : { "default" : "Application Object" },
        "ApplicationName" : { "default" : "Application Name" },
        "ApplicationVersion" : { "default" : "Application Version" },
        "ComponentName" : { "default" : "Component Name" },
        "UseStaticAddress" : { "default" : "Use Static Address" },
        "LogRetention" : { "default" : "Log Retention" },
        "Schedule" : { "default" : "Schedule" },
        "AdministratorNetworks" : { "default" : "Administrator Networks" },
        "IntegrationNetworks" : { "default" : "Integration Networks" },
        "DomainAdminUser" : { "default" : "DomainAdmin User" },
        "DomainAdminPassword" : { "default" : "DomainAdmin Password" }
      }
    }
  },

  "Parameters" : {
    "EngineMonitoringStackName" : {
      "Description" : "Name of the CloudFormation Stack containing the Engine Monitoring Instances",
      "Type" : "String",
      "MinLength" : 8,
      "MaxLength" : 64,
      "Default" : "Production-Engine-Monitoring",
      "AllowedPattern" : "^[A-Z][-a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters and dashes."
    },

    "DataTransferSFTPStackName" : {
      "Description" : "Name of the CloudFormation Stack containing the DataTransfer SFTP Instances",
      "Type" : "String",
      "MaxLength" : 64,
      "Default" : "",
      "AllowedPattern" : "(^$|^[A-Z][-a-zA-Z0-9]*$)",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters and dashes."
    },

    "MongoDBStackName" : {
      "Description" : "Name of the CloudFormation Stack containing the MongoDB Instances",
      "Type" : "String",
      "MinLength" : 8,
      "MaxLength" : 64,
      "Default" : "Production-MongoDB",
      "AllowedPattern" : "^[A-Z][-a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters and dashes."
    },

    "RabbitMQStackName" : {
      "Description" : "Name of the CloudFormation Stack containing the RabbitMQ Instances",
      "Type" : "String",
      "MinLength" : 8,
      "MaxLength" : 64,
      "Default" : "Production-RabbitMQ",
      "AllowedPattern" : "^[A-Z][-a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters and dashes."
    },

    "WebSphereMQStackName" : {
      "Description" : "Name of the CloudFormation Stack containing the WebSphereMQ Instances",
      "Type" : "String",
      "MinLength" : 8,
      "MaxLength" : 64,
      "Default" : "Production-WebSphereMQ",
      "AllowedPattern" : "^[A-Z][-a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters and dashes."
    },

    "OctopusDeployStackName" : {
      "Description" : "Name of the CloudFormation Stack containing the Octopus Deploy Instances",
      "Type" : "String",
      "MaxLength" : 64,
      "Default" : "Production-Octopus-Deploy",
      "AllowedPattern" : "(^$|^[A-Z][-a-zA-Z0-9]*$)",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters and dashes."
    },

    "VPNStackName" : {
      "Description" : "Name of the CloudFormation Stack containing the VPN Instances",
      "Type" : "String",
      "MinLength" : 8,
      "MaxLength" : 64,
      "Default" : "Production-OpenVPN",
      "AllowedPattern" : "^[A-Z][-a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters and dashes."
    },

    "ActiveDirectoryStackName" : {
      "Description" : "Name of the CloudFormation Stack containing the ActiveDirectory DomainControllers",
      "Type" : "String",
      "MinLength" : 8,
      "MaxLength" : 64,
      "Default" : "Production-ActiveDirectory",
      "AllowedPattern" : "^[A-Z][-a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters and dashes."
    },

    "VPCStackName" : {
      "Description" : "Name of the CloudFormation Stack containing the VPC",
      "Type" : "String",
      "MinLength" : 8,
      "MaxLength" : 64,
      "Default" : "Production-VPC",
      "AllowedPattern" : "^[A-Z][-a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters and dashes."
    },

    "CustomIdentifierFunctionsStackName" : {
      "Description" : "Name of the CloudFormation Stack containing the Custom Identifier Functions",
      "Type" : "String",
      "MinLength" : 8,
      "MaxLength" : 64,
      "Default" : "CustomIdentifierFunctions",
      "AllowedPattern" : "^[A-Z][-a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters and dashes."
    },

    "StandardCIDRFunctionsStackName" : {
      "Description" : "Name of the CloudFormation Stack containing the Standard CIDR Functions",
      "Type" : "String",
      "MinLength" : 8,
      "MaxLength" : 64,
      "Default" : "StandardCIDRFunctions",
      "AllowedPattern" : "^[A-Z][-a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters and dashes."
    },

    "StandardAMIFunctionsStackName" : {
      "Description" : "Name of the CloudFormation Stack containing the Standard AMI Functions",
      "Type" : "String",
      "MinLength" : 8,
      "MaxLength" : 64,
      "Default" : "StandardAMIFunctions",
      "AllowedPattern" : "^[A-Z][-a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters and dashes."
    },

    "StandardBucketsStackName" : {
      "Description" : "Name of the CloudFormation Stack containing Standard Buckets",
      "Type" : "String",
      "MinLength" : 8,
      "MaxLength" : 64,
      "Default" : "StandardBuckets",
      "AllowedPattern" : "^[A-Z][-a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters and dashes."
    },

    "StandardTopicsStackName" : {
      "Description" : "Name of the CloudFormation Stack containing Standard Topics",
      "Type" : "String",
      "MinLength" : 8,
      "MaxLength" : 64,
      "Default" : "StandardTopics",
      "AllowedPattern" : "^[A-Z][-a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters and dashes."
    },

    "KeyName" : {
      "Description" : "Name of an existing KeyPair to enable SSH access to the Instances",
      "Type" : "AWS::EC2::KeyPair::KeyName",
      "MaxLength" : 32,
      "Default" : "administrator",
      "AllowedPattern" : "(^$|^[_a-zA-Z0-9]*$)",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    },

    "CompanyName" : {
      "Description" : "Name of the Company associated with the Stack",
      "Type" : "String",
      "MinLength" : 2,
      "MaxLength" : 32,
      "Default" : "Travel",
      "AllowedPattern" : "^[A-Z][a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters."
    },

    "SystemName" : {
      "Description" : "Name of the System associated with the Stack",
      "Type" : "String",
      "MinLength" : 2,
      "MaxLength" : 32,
      "Default" : "IROPS",
      "AllowedPattern" : "^[A-Z][a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters."
    },

    "EnvironmentType" : {
      "Description" : "Type of the Environment to build. Used to select size-related options in Mappings",
      "Type" : "String",
      "Default" : "small",
      "AllowedValues" : [ "small", "medium", "large", "xlarge" ],
      "ConstraintDescription" : "must be small, medium, large or xlarge."
    },

    "EnvironmentZones" : {
      "Description" : "Number of Availability Zones to build",
      "Type" : "String",
      "Default" : "2",
      "AllowedValues" : [ "1", "2" ],
      "ConstraintDescription" : "must be 1 or 2."
    },

    "OSName" : {
      "Description" : "The Operating System to use for Instances",
      "Type" : "String",
      "Default" : "Windows Server 2012 R2",
      "AllowedValues" : [ "Windows Server 2012 R2", "Windows Server 2016" ],
      "ConstraintDescription" : "must be \"Windows Server 2012 R2\" or \"Windows Server 2016\"."
    },

    "OSDate" : {
      "Description" : "Optional Operating System Date, specify to select a specific publication date for the Image",
      "Type" : "String",
      "Default" : "20170510",
      "AllowedPattern" : "(^$|^20(1[7-9]|[2-9][0-9])(0[1-9]|1[0-2])(0[1-9]|[1-2][0-9]|3[0-1])$)",
      "ConstraintDescription" : "Must be a valid date in YYYYMMDD format."
    },

    "SharedScriptFolder" : {
      "Description" : "Folder within the S3 Scripts bucket containing Shared Scripts deployed by this Template",
      "Type" : "String",
      "MinLength" : 2,
      "MaxLength" : 32,
      "Default" : "Windows",
      "AllowedPattern" : "^[A-Z][a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters."
    },

    "ScriptFolder" : {
      "Description" : "Folder within the S3 Scripts bucket containing Scripts deployed by this Template",
      "Type" : "String",
      "MinLength" : 2,
      "MaxLength" : 32,
      "Default" : "Engine",
      "AllowedPattern" : "^[A-Z][a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters."
    },

    "SharedProductFolder" : {
      "Description" : "Folder within the S3 Products bucket containing Shared Products deployed by this Template",
      "Type" : "String",
      "MinLength" : 2,
      "MaxLength" : 32,
      "Default" : "Windows",
      "AllowedPattern" : "^[A-Z][a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters."
    },

    "ProductFolder" : {
      "Description" : "Folder within the S3 Products bucket containing Products deployed by this Template",
      "Type" : "String",
      "MinLength" : 2,
      "MaxLength" : 32,
      "Default" : "Engine",
      "AllowedPattern" : "^[A-Z][a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters."
    },

    "AtomProductObject" : {
      "Description" : "Object within the S3 bucket and folder containing the OctopusDeploy installer",
      "Type" : "String",
      "MaxLength" : 64,
      "Default" : "",
      "AllowedPattern" : "(^$|^[-_.a-zA-Z0-9]*$)",
      "ConstraintDescription" : "must be a valid filename, not containing slashes."
    },

    "ProductObject" : {
      "Description" : "Object within the S3 bucket and folder containing the installer",
      "Type" : "String",
      "MaxLength" : 64,
      "Default" : "",
      "AllowedPattern" : "(^$|^[-_.a-zA-Z0-9]*$)",
      "ConstraintDescription" : "must be a valid filename, not containing slashes."
    },

    "SharedConfigurationFolder" : {
      "Description" : "Folder within the S3 Configurations bucket containing Shared Configurations deployed by this Template",
      "Type" : "String",
      "MinLength" : 2,
      "MaxLength" : 32,
      "Default" : "Windows",
      "AllowedPattern" : "^[A-Z][a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters."
    },

    "ConfigurationFolder" : {
      "Description" : "Folder within the S3 Configurations bucket containing Configurations deployed by this Template",
      "Type" : "String",
      "MinLength" : 2,
      "MaxLength" : 32,
      "Default" : "Engine",
      "AllowedPattern" : "^[A-Z][a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters."
    },

    "ConfigurationObject" : {
      "Description" : "Object within the S3 bucket and folder containing the configuration",
      "Type" : "String",
      "MaxLength" : 64,
      "Default" : "",
      "AllowedPattern" : "(^$|^[-_.a-zA-Z0-9]*$)",
      "ConstraintDescription" : "must be a valid filename, not containing slashes."
    },

    "SharedApplicationFolder" : {
      "Description" : "Folder within the S3 Applications bucket containing Shared Applications deployed by this Template",
      "Type" : "String",
      "MinLength" : 2,
      "MaxLength" : 32,
      "Default" : "Windows",
      "AllowedPattern" : "^[A-Z][a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters."
    },

    "ApplicationFolder" : {
      "Description" : "Folder within the S3 Applications bucket containing Applications deployed by this Template",
      "Type" : "String",
      "MinLength" : 2,
      "MaxLength" : 32,
      "Default" : "Engine",
      "AllowedPattern" : "^[A-Z][a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters."
    },

    "ApplicationObject" : {
      "Description" : "Object within the S3 bucket and folder containing the application",
      "Type" : "String",
      "MaxLength" : 64,
      "Default" : "",
      "AllowedPattern" : "(^$|^[-_.a-zA-Z0-9]*$)",
      "ConstraintDescription" : "must be a valid filename, not containing slashes."
    },

    "ApplicationName" : {
      "Description" : "Name of the Application associated with the Stack",
      "Type" : "String",
      "MinLength" : 2,
      "MaxLength" : 32,
      "Default" : "Engine",
      "AllowedPattern" : "^[A-Z][a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters."
    },

    "ApplicationVersion" : {
      "Description" : "Version of the Application",
      "Type" : "String",
      "MinLength" : 5,
      "MaxLength" : 32,
      "Default" : "1.0.0",
      "AllowedPattern" : "^[0-9]*.[0-9]*.[0-9]*(-[a-zA-Z0-9][-a-zA-Z0-9]*)?$",
      "ConstraintDescription" : "must follow semantic versioning conventions."
    },

    "ComponentName" : {
      "Description" : "Name of the Application Component associated with the Stack",
      "Type" : "String",
      "MinLength" : 2,
      "MaxLength" : 32,
      "Default" : "DataStaging",
      "AllowedPattern" : "^[A-Z][a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters."
    },

    "UseStaticAddress" : {
      "Description" : "Create and attach a separate Static Address",
      "Type" : "String",
      "Default" : "true",
      "AllowedValues" : [ "true", "false" ],
      "ConstraintDescription" : "must be either true or false."
    },

    "LogRetention" : {
      "Description" : "Number of days to retain CloudWatch Log Events (0 disables use of CloudWatch Logs)",
      "Type" : "Number",
      "Default" : 14,
      "AllowedValues" : [ 0, 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653 ],
      "ConstraintDescription" : "must be: 0 (disabled), 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827 or 3653."
    },

    "Schedule" : {
      "Description" : "Schedule Tag Value (blank disables Scheduler)",
      "Type" : "String",
      "Default" : "",
      "AllowedPattern" : "(^$|^([0-9]|1[0-9]|2[0-3]):[0-5][0-9]-([0-9]|1[0-9]|2[0-3]):[0-5][0-9]T?$)",
      "ConstraintDescription" : "See Scheduler Lambda Function description for Tag format."
    },

    "AdministratorNetworks" : {
      "Description" : "Networks that can administer the Application",
      "Type" : "String",
      "Default" : "NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE",
      "ConstraintDescription" : "must be a comma-separated list of 8 values, each an IP CIDR range of the form x.x.x.x/x or the word NONE."
    },

    "IntegrationNetworks" : {
      "Description" : "Networks that can integrate with the Application",
      "Type" : "String",
      "Default" : "NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE",
      "ConstraintDescription" : "must be a comma-separated list of 8 values, each an IP CIDR range of the form x.x.x.x/x or the word NONE."
    },

    "DomainAdminUser" : {
      "Description" : "User name for the account that will be added as Domain Administrator. This is separate from the default \"Administrator\" account",
      "Type" : "String",
      "MinLength" : "5",
      "MaxLength" : "25",
      "Default" : "StackAdmin",
      "AllowedPattern" : "[a-zA-Z0-9]*",
      "ConstraintDescription" : "must be alphanumeric."
    },

    "DomainAdminPassword" : {
      "Description" : "Password for the domain admin user. Must be at least 8 characters containing letters, numbers and symbols",
      "Type" : "String",
      "NoEcho" : "true",
      "MinLength" : "8",
      "MaxLength" : "32",
      "AllowedPattern" : "(?=^.{6,255}$)((?=.*\\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*",
      "ConstraintDescription" : "must be a valid password."
    }
  },

  "Mappings" : {
    "ImageIdMap" : {
      "AMI"            : { "20170412" : "Windows_Server-2012-R2_RTM-English-64Bit-Base-2017.04.12",
                           "20170510" : "Windows_Server-2012-R2_RTM-English-64Bit-Base-2017.05.10",
                           "20170614" : "Windows_Server-2012-R2_RTM-English-64Bit-Base-2017.06.14" },
      "us-east-1"      : { "20170412" : "ami-e659c7f0", "20170510" : "ami-271b6d31", "20170614" : "ami-e196b0f7" },
      "us-east-2"      : { "20170412" : "ami-b5785fd0", "20170510" : "ami-7fc4e31a", "20170614" : "ami-a4b395c1" },
      "us-west-1"      : { "20170412" : "ami-ccf2d6ac", "20170510" : "ami-59a78139", "20170614" : "ami-b4614cd4" },
      "us-west-2"      : { "20170412" : "ami-2ad04f4a", "20170510" : "ami-3189ec51", "20170614" : "ami-8d0c07f4" },
      "ca-central-1"   : { "20170412" : "ami-53c37f37", "20170510" : "ami-687ec20c", "20170614" : "ami-00e95664" },
      "eu-west-1"      : { "20170412" : "ami-58a1a73e", "20170510" : "ami-96d4daf0", "20170614" : "ami-1e5d4378" },
      "eu-central-1"   : { "20170412" : "ami-8f6fb2e0", "20170510" : "ami-f9528c96", "20170614" : "ami-ad3e9ac2" },
      "eu-west-2"      : { "20170412" : "ami-22feea46", "20170510" : "ami-07455263", "20170614" : "ami-ad5d4bc9" },
      "ap-southeast-1" : { "20170412" : "ami-a843fbcb", "20170510" : "ami-9e3bbefd", "20170614" : "ami-9ab230f9" },
      "ap-southeast-2" : { "20170412" : "ami-72525a11", "20170510" : "ami-c4262ca7", "20170614" : "ami-f3203190" },
      "ap-northeast-2" : { "20170412" : "ami-06528068", "20170510" : "ami-50e13c3e", "20170614" : "ami-d38659bd" },
      "ap-northeast-1" : { "20170412" : "ami-51c8e036", "20170510" : "ami-539aa834", "20170614" : "ami-354d4552" },
      "ap-south-1"     : { "20170412" : "ami-3d0e7c52", "20170510" : "ami-67047908", "20170614" : "ami-65b6c90a" },
      "sa-east-1"      : { "20170412" : "ami-64afc208", "20170510" : "ami-af6708c3", "20170614" : "ami-4f3f5423" }
    },

    "InstanceTypeMap" : {
      "DataStaging" : { "small" : "t2.large", "medium" : "r4.xlarge", "large" : "r4.2xlarge", "xlarge" : "r4.4xlarge" }
    }
  },

  "Conditions" : {
    "ConfigureGlobalS3" : { "Fn::Equals" : [{ "Ref" : "AWS::Region" }, "us-east-1" ]},
    "GetImageID" : { "Fn::Equals" : [{ "Ref" : "OSDate" }, "" ]},
    "ConfigureMultiZone" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Ref" : "EnvironmentZones" }, "1" ]}]},
    "InstallAtomProduct" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Ref" : "AtomProductObject" }, "" ]}]},
    "InstallProduct" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Ref" : "ProductObject" }, "" ]}]},
    "InstallConfiguration" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Ref" : "ConfigurationObject" }, "" ]}]},
    "InstallApplication" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Ref" : "ApplicationObject" }, "" ]}]},
    "ConfigureStaticAddress" : { "Fn::Equals" : [{ "Ref" : "UseStaticAddress" }, "true" ]},
    "ConfigureStaticAddress&MultiZone" : { "Fn::And" : [{ "Condition" : "ConfigureStaticAddress" }, { "Condition" : "ConfigureMultiZone" }]},
    "ConfigureLogs" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Ref" : "LogRetention" }, "0" ]}]},
    "ConfigureSchedule" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Ref" : "Schedule" }, "" ]}]},
    "ConfigureDataTransferIntegration" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Ref" : "DataTransferSFTPStackName" }, "" ] }]},
    "ConfigureOctopusIntegration" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Ref" : "OctopusDeployStackName" }, "" ] }]},
    "ConfigureAdministratorNetwork0" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Fn::Select" : [ "0", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}, "NONE" ]}]},
    "ConfigureAdministratorNetwork1" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Fn::Select" : [ "1", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}, "NONE" ]}]},
    "ConfigureAdministratorNetwork2" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Fn::Select" : [ "2", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}, "NONE" ]}]},
    "ConfigureAdministratorNetwork3" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Fn::Select" : [ "3", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}, "NONE" ]}]},
    "ConfigureAdministratorNetwork4" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Fn::Select" : [ "4", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}, "NONE" ]}]},
    "ConfigureAdministratorNetwork5" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Fn::Select" : [ "5", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}, "NONE" ]}]},
    "ConfigureAdministratorNetwork6" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Fn::Select" : [ "6", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}, "NONE" ]}]},
    "ConfigureAdministratorNetwork7" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Fn::Select" : [ "7", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}, "NONE" ]}]},
    "ConfigureIntegrationNetwork0" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Fn::Select" : [ "0", { "Fn::Split" : [ ",", { "Ref" : "IntegrationNetworks" }]}]}, "NONE" ]}]},
    "ConfigureIntegrationNetwork1" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Fn::Select" : [ "1", { "Fn::Split" : [ ",", { "Ref" : "IntegrationNetworks" }]}]}, "NONE" ]}]},
    "ConfigureIntegrationNetwork2" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Fn::Select" : [ "2", { "Fn::Split" : [ ",", { "Ref" : "IntegrationNetworks" }]}]}, "NONE" ]}]},
    "ConfigureIntegrationNetwork3" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Fn::Select" : [ "3", { "Fn::Split" : [ ",", { "Ref" : "IntegrationNetworks" }]}]}, "NONE" ]}]},
    "ConfigureIntegrationNetwork4" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Fn::Select" : [ "4", { "Fn::Split" : [ ",", { "Ref" : "IntegrationNetworks" }]}]}, "NONE" ]}]},
    "ConfigureIntegrationNetwork5" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Fn::Select" : [ "5", { "Fn::Split" : [ ",", { "Ref" : "IntegrationNetworks" }]}]}, "NONE" ]}]},
    "ConfigureIntegrationNetwork6" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Fn::Select" : [ "6", { "Fn::Split" : [ ",", { "Ref" : "IntegrationNetworks" }]}]}, "NONE" ]}]},
    "ConfigureIntegrationNetwork7" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Fn::Select" : [ "7", { "Fn::Split" : [ ",", { "Ref" : "IntegrationNetworks" }]}]}, "NONE" ]}]}
  },

  "Resources" : {
    "Role" : {
      "Type" : "AWS::IAM::Role",
      "Properties" : {
        "Path" : "/",
        "AssumeRolePolicyDocument" : {
          "Version" : "2012-10-17",
          "Statement" : [{
            "Effect" : "Allow",
            "Principal" : { "Service" : [ "ec2.amazonaws.com" ]},
            "Action" : [ "sts:AssumeRole" ]
          }]
        },
        "ManagedPolicyArns" : [ "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM" ]
      }
    },

    "DownloadScriptFromS3Policy" : {
      "Type" : "AWS::IAM::Policy",
      "Properties" : {
        "PolicyName" : "DownloadScriptFromS3Policy",
        "PolicyDocument" : {
          "Version" : "2012-10-17",
          "Statement" : [{
            "Effect" : "Allow",
            "Action" : [
              "s3:GetObject"
            ],
            "Resource" : [
              { "Fn::Join" : [ "", [ "arn:aws:s3:::",  { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ScriptsBucket" }}, "/", { "Ref" : "SharedScriptFolder" }, "/*" ]]},
              { "Fn::Join" : [ "", [ "arn:aws:s3:::",  { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ScriptsBucket" }}, "/", { "Ref" : "ScriptFolder" }, "/*" ]]}
            ]
          }]
        },
        "Roles" : [{ "Ref" : "Role" }]
      }
    },

    "DownloadProductFromS3Policy" : {
      "Type" : "AWS::IAM::Policy",
      "Properties" : {
        "PolicyName" : "DownloadProductFromS3Policy",
        "PolicyDocument" : {
          "Version" : "2012-10-17",
          "Statement" : [{
            "Effect" : "Allow",
            "Action" : [
              "s3:GetObject"
            ],
            "Resource" : [
              { "Fn::Join" : [ "", [ "arn:aws:s3:::",  { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ProductsBucket" }}, "/", { "Ref" : "SharedProductFolder" }, "/*" ]]},
              { "Fn::Join" : [ "", [ "arn:aws:s3:::",  { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ProductsBucket" }}, "/", { "Ref" : "ProductFolder" }, "/*" ]]}
            ]
          }]
        },
        "Roles" : [{ "Ref" : "Role" }]
      }
    },

    "DownloadConfigurationFromS3Policy" : {
      "Type" : "AWS::IAM::Policy",
      "Properties" : {
        "PolicyName" : "DownloadConfigurationFromS3Policy",
        "PolicyDocument" : {
          "Version" : "2012-10-17",
          "Statement" : [{
            "Effect" : "Allow",
            "Action" : [
              "s3:GetObject"
            ],
            "Resource" : [
              { "Fn::Join" : [ "", [ "arn:aws:s3:::",  { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ConfigurationsBucket" }}, "/", { "Ref" : "SharedConfigurationFolder" }, "/*" ]]},
              { "Fn::Join" : [ "", [ "arn:aws:s3:::",  { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ConfigurationsBucket" }}, "/", { "Ref" : "ConfigurationFolder" }, "/*" ]]}
            ]
          }]
        },
        "Roles" : [{ "Ref" : "Role" }]
      }
    },

    "DownloadApplicationFromS3Policy" : {
      "Type" : "AWS::IAM::Policy",
      "Properties" : {
        "PolicyName" : "DownloadApplicationFromS3Policy",
        "PolicyDocument" : {
          "Version" : "2012-10-17",
          "Statement" : [{
            "Effect" : "Allow",
            "Action" : [
              "s3:GetObject"
            ],
            "Resource" : [
              { "Fn::Join" : [ "", [ "arn:aws:s3:::",  { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ApplicationsBucket" }}, "/", { "Ref" : "SharedApplicationFolder" }, "/*" ]]},
              { "Fn::Join" : [ "", [ "arn:aws:s3:::",  { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ApplicationsBucket" }}, "/", { "Ref" : "ApplicationFolder" }, "/*" ]]}
            ]
          }]
        },
        "Roles" : [{ "Ref" : "Role" }]
      }
    },

    "LogMonitoringPolicy" : {
      "Type" : "AWS::IAM::Policy",
      "Properties" : {
        "PolicyName" : "LogMonitoringPolicy",
        "PolicyDocument" : {
          "Version" : "2012-10-17",
          "Statement" : [{
            "Effect" : "Allow",
            "Action" : [
              "logs:CreateLogGroup",
              "logs:CreateLogStream",
              "logs:PutLogEvents",
              "logs:DescribeLogStreams"
            ],
            "Resource" : "arn:aws:logs:*:*:*"
          }]
        },
        "Roles" : [{ "Ref" : "Role" }]
      },
      "Condition" : "ConfigureLogs"
    },

    "LogGroup" : {
      "Type" : "AWS::Logs::LogGroup",
      "Properties" : {
        "RetentionInDays" : { "Ref" : "LogRetention" }
      },
      "Condition" : "ConfigureLogs"
    },

    "ClientSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : { "Fn::Join" : [ "-", [ { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }}, { "Ref" : "ApplicationName" }, { "Ref" : "ComponentName" }, "ClientSecurityGroup" ]]},
        "VpcId" : { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPC" }},
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }}, { "Ref" : "ApplicationName" }, { "Ref" : "ComponentName" }, "ClientSecurityGroup" ]]}}
        ]
      }
    },

    "InstanceSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : { "Fn::Join" : [ "-", [ { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }}, { "Ref" : "ApplicationName" }, { "Ref" : "ComponentName" }, "InstanceSecurityGroup" ]]},
        "VpcId" : { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPC" }},
        "SecurityGroupIngress" : [
          { "IpProtocol" : "icmp", "FromPort" :     "0", "ToPort" :     "0", "CidrIp" : "0.0.0.0/0" },
          { "IpProtocol" : "icmp", "FromPort" :     "3", "ToPort" :     "3", "CidrIp" : "0.0.0.0/0" },
          { "IpProtocol" : "icmp", "FromPort" :     "8", "ToPort" :     "8", "CidrIp" : "0.0.0.0/0" },
          { "IpProtocol" : "icmp", "FromPort" :    "11", "ToPort" :    "11", "CidrIp" : "0.0.0.0/0" },
          { "IpProtocol" : "tcp",  "FromPort" :  "3389", "ToPort" :  "3389", "SourceSecurityGroupId" : { "Fn::ImportValue" : { "Fn::Sub" : "${VPNStackName}-InstanceSecurityGroup" }}},
          { "Fn::If" : [ "ConfigureAdministratorNetwork0", { "IpProtocol" : "tcp",  "FromPort" :  "3389", "ToPort" :  "3389", "CidrIp" : { "Fn::Select" : [ "0", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureAdministratorNetwork1", { "IpProtocol" : "tcp",  "FromPort" :  "3389", "ToPort" :  "3389", "CidrIp" : { "Fn::Select" : [ "1", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureAdministratorNetwork2", { "IpProtocol" : "tcp",  "FromPort" :  "3389", "ToPort" :  "3389", "CidrIp" : { "Fn::Select" : [ "2", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureAdministratorNetwork3", { "IpProtocol" : "tcp",  "FromPort" :  "3389", "ToPort" :  "3389", "CidrIp" : { "Fn::Select" : [ "3", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureAdministratorNetwork4", { "IpProtocol" : "tcp",  "FromPort" :  "3389", "ToPort" :  "3389", "CidrIp" : { "Fn::Select" : [ "4", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureAdministratorNetwork5", { "IpProtocol" : "tcp",  "FromPort" :  "3389", "ToPort" :  "3389", "CidrIp" : { "Fn::Select" : [ "5", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureAdministratorNetwork6", { "IpProtocol" : "tcp",  "FromPort" :  "3389", "ToPort" :  "3389", "CidrIp" : { "Fn::Select" : [ "6", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureAdministratorNetwork7", { "IpProtocol" : "tcp",  "FromPort" :  "3389", "ToPort" :  "3389", "CidrIp" : { "Fn::Select" : [ "7", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureOctopusIntegration", { "IpProtocol" : "tcp",  "FromPort" :  "10933", "ToPort" :  "10933", "SourceSecurityGroupId" : { "Fn::ImportValue" : { "Fn::Sub" : "${OctopusDeployStackName}-InstanceSecurityGroup" }}}, { "Ref" : "AWS::NoValue" }]}
        ],
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }}, { "Ref" : "ApplicationName" }, { "Ref" : "ComponentName" }, "InstanceSecurityGroup" ]]}}
        ]
      }
    },

    "GetHostName" : {
      "Type" : "Custom::GetHostName",
      "Properties" : {
        "ServiceToken" : { "Fn::ImportValue" : { "Fn::Sub" : "${CustomIdentifierFunctionsStackName}-GetHostNameFunctionArn" }},
        "CompanyName" : { "Ref" : "CompanyName" },
        "LocationName" : { "Ref": "AWS::Region" },
        "EnvironmentName" : { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }},
        "ApplicationName" : { "Ref" : "ApplicationName" },
        "ComponentName" : { "Ref" : "ComponentName" }
      }
    },

    "GetWindowsImageId" : {
      "Type" : "Custom::GetWindowsImageId",
      "Properties" : {
        "ServiceToken" : { "Fn::ImportValue" : { "Fn::Sub" : "${StandardAMIFunctionsStackName}-GetWindowsImageIdFunctionArn" }},
        "Region" : { "Ref" : "AWS::Region" },
        "OSName" : { "Ref" : "OSName" },
        "OSDate" : { "Ref" : "OSDate" }
      }
    },

    "InstanceProfile" : {
      "Type" : "AWS::IAM::InstanceProfile",
      "Properties" : {
        "Path" : "/",
        "Roles" : [{ "Ref" : "Role" }]
      }
    },

    "AddressCalculatorA" : {
      "Type" : "Custom::AddressCalculator",
      "Properties" : {
        "ServiceToken" : { "Fn::ImportValue" : { "Fn::Sub" : "${StandardCIDRFunctionsStackName}-AddressCalculatorFunctionArn" }},
        "SubnetId" : { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-ApplicationSubnetA" }}
      },
      "Condition" : "ConfigureStaticAddress"
    },

    "Instance01A" : {
      "Type" : "AWS::EC2::Instance",
      "Metadata" : {
        "AWS::CloudFormation::Authentication" : {
          "S3Credentials" : {
            "type" : "S3",
            "roleName" : { "Ref" : "Role" },
            "buckets" : [
              { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ScriptsBucket" }},
              { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ProductsBucket" }},
              { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ConfigurationsBucket" }},
              { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ApplicationsBucket" }}
            ]
          }
        },
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "All" : [
              { "Fn::If" : [ "ConfigureLogs", "ConfigureLogs", { "Ref": "AWS::NoValue" }]},
              "ConfigureCFN",
              "ConfigureOS",
              "ConfigureHostName",
              "JoinDomain",
              { "Fn::If" : [ "InstallAtomProduct", "InstallAtomProduct", { "Ref": "AWS::NoValue" }]},
              { "Fn::If" : [ "InstallProduct", "InstallProduct", { "Ref": "AWS::NoValue" }]},
              { "Fn::If" : [ "InstallConfiguration", "InstallConfiguration", { "Ref": "AWS::NoValue" }]},
              { "Fn::If" : [ "InstallApplication", "InstallApplication", { "Ref": "AWS::NoValue" }]},
              "SignalCFN"
            ]
          },
          "ConfigureLogs" : {
            "files" : {
              "C:\\Program Files\\Amazon\\SSM\\Plugins\\awsCloudWatch\\AWS.EC2.Windows.CloudWatch.json" : {
                "content" : { "Fn::Join" : [ "", [
                  "{",
                  "  \"IsEnabled\" : true,",
                  "  \"EngineConfiguration\" : {",
                  "    \"PollInterval\" : \"00:00:10\",",
                  "    \"Components\" : [{",
                  "      \"Id\" : \"ApplicationEventLog\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.EventLog.EventLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"LogName\" : \"Application\",",
                  "        \"Levels\" : \"7\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"SystemEventLog\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.EventLog.EventLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"LogName\" : \"System\",",
                  "        \"Levels\" : \"7\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"SecurityEventLog\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.EventLog.EventLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"LogName\" : \"Security\",",
                  "        \"Levels\" : \"7\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"EC2ConfigLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"LogDirectoryPath\": \"C:\\\\Program Files\\\\Amazon\\\\Ec2ConfigService\\\\Logs\",",
                  "        \"TimestampFormat\": \"yyyy-MM-ddTHH:mm:ss.fffZ:\",",
                  "        \"Encoding\": \"ASCII\",",
                  "        \"Filter\": \"EC2ConfigLog.txt\",",
                  "        \"CultureName\": \"en-US\",",
                  "        \"TimeZoneKind\": \"UTC\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CfnInitLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"LogDirectoryPath\": \"C:\\\\cfn\\\\log\",",
                  "        \"TimestampFormat\": \"yyyy-MM-dd HH:mm:ss,fff\",",
                  "        \"Encoding\": \"ASCII\",",
                  "        \"Filter\": \"cfn-init.log\",",
                  "        \"CultureName\": \"en-US\",",
                  "        \"TimeZoneKind\": \"Local\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"IISLogs\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"LogDirectoryPath\" : \"C:\\\\inetpub\\\\logs\\\\LogFiles\\\\W3SVC1\",",
                  "        \"TimestampFormat\" : \"yyyy-MM-dd HH:mm:ss\",",
                  "        \"Encoding\" : \"UTF-8\",",
                  "        \"Filter\" : \"\",",
                  "        \"CultureName\" : \"en-US\",",
                  "        \"TimeZoneKind\" : \"UTC\",",
                  "        \"LineCount\" : \"3\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"MemoryPerformanceCounter\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.PerformanceCounterComponent.PerformanceCounterInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"CategoryName\" : \"Memory\",",
                  "        \"CounterName\" : \"Available MBytes\",",
                  "        \"InstanceName\" : \"\",",
                  "        \"MetricName\" : \"Memory\",",
                  "        \"Unit\" : \"Megabytes\",",
                  "        \"DimensionName\" : \"\",",
                  "        \"DimensionValue\" : \"\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchApplicationEventLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"DataStaging/{instance_id}/ApplicationEventLog\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchSystemEventLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"DataStaging/{instance_id}/SystemEventLog\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchSecurityEventLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"DataStaging/{instance_id}/SecurityEventLog\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchEC2ConfigLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"DataStaging/{instance_id}/EC2ConfigLog\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchCfnInitLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"DataStaging/{instance_id}/CfnInitLog\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchIISLogs\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"DataStaging/{instance_id}/IISLogs\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"CloudWatch\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.CloudWatch.CloudWatchOutputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"AccessKey\" : \"\",",
                  "        \"SecretKey\" : \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                  "        \"NameSpace\" : \"Windows/Default\"",
                  "      }",
                  "    }],",
                  "    \"Flows\": {",
                  "      \"Flows\": [",
                  "        \"ApplicationEventLog,CloudWatchApplicationEventLog\",",
                  "        \"SystemEventLog,CloudWatchSystemEventLog\",",
                  "        \"SecurityEventLog,CloudWatchSecurityEventLog\",",
                  "        \"EC2ConfigLog,CloudWatchEC2ConfigLog\",",
                  "        \"CfnInitLog,CloudWatchCfnInitLog\",",
                  "        \"IISLogs,CloudWatchIISLogs\",",
                  "        \"MemoryPerformanceCounter,CloudWatch\"",
                  "      ]",
                  "    }",
                  "  }",
                  "}"
                ]]}
              }
            },
            "commands" : {
              "01-enable-SSM" : {
                "command" : "powershell.exe -Command \"Set-Service -Name AmazonSSMAgent -StartupType Automatic\"",
                "waitAfterCompletion" : "0"
              },
              "02-restart-SSM" : {
                "command" : "powershell.exe -Command \"Restart-Service AmazonSSMAgent\"",
                "waitAfterCompletion" : "30"
              }
            }
          },
          "ConfigureCFN" : {
            "files" : {
              "c:\\cfn\\cfn-hup.conf" : {
                "content" : { "Fn::Join" : [ "\n", [
                  "[main]",
                  { "Fn::Sub" : "stack=${AWS::StackId}" },
                  { "Fn::Sub" : "region=${AWS::Region}" }
                  ]]}
              },
              "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf" : {
                "content": { "Fn::Join" : [ "\n", [
                  "[cfn-auto-reloader-hook]",
                  "triggers=post.update",
                  "path=Resources.Instance01A.Metadata.AWS::CloudFormation::Init",
                  { "Fn::Sub" : "action=cfn-init.exe --verbose --configsets All --stack ${AWS::StackId} --resource Instance01A --region ${AWS::Region}" }
                ]]}
              }
            },
            "services" : {
              "windows" : {
                "cfn-hup" : {
                  "enabled" : "true",
                  "ensureRunning" : "true",
                  "files" : [
                    "c:\\cfn\\cfn-hup.conf",
                    "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                  ]
                }
              }
            }
          },
          "ConfigureOS" : {
            "commands" : {
              "01-disable-windows-firewall" : {
                "command" : "powershell.exe -Command \"Get-NetFirewallProfile | Set-NetFirewallProfile -Enabled False\"",
                "waitAfterCompletion" : "0"
              },
              "02-set-execution-policy" : {
                "command" : "powershell.exe -Command \"Set-ExecutionPolicy RemoteSigned -Force\"",
                "waitAfterCompletion" : "0"
              }
            }
          },
          "ConfigureHostName" : {
            "commands" : {
              "01-configure-hostname" : {
                "command" : { "Fn::Sub" : "powershell.exe Rename-Computer -NewName ${GetHostName.HostName}01a -Restart" },
                "waitAfterCompletion" : "forever"
              }
            }
          },
          "JoinDomain" : {
            "commands" : {
              "01-join-domain" : {
                "command" : { "Fn::Join" : [ "", [
                  "powershell.exe -Command \"Add-Computer -DomainName ", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCPrivateDomain" }},
                  " -Credential (New-Object System.Management.Automation.PSCredential('", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCNetBIOSDomain" }}, "\\", { "Ref" : "DomainAdminUser" }, "',(ConvertTo-SecureString '", { "Ref" : "DomainAdminPassword" }, "' -AsPlainText -Force)))",
                  " -Restart\""
                ]]},
                "waitAfterCompletion" : "forever"
              }
            }
          },
          "InstallAtomProduct" : {
            "packages" : {
              "msi" : {
                "atom" : { "Fn::Join" : [ "", [
                  "https://", { "Fn::If" : [ "ConfigureGlobalS3", "s3", { "Fn::Sub" : "s3-${AWS::Region}" }]}, ".amazonaws.com/",
                  { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ProductsBucket" }}, "/", { "Ref" : "SharedProductFolder" }, "/", { "Ref" : "AtomProductObject" }
                ]]},

              }
            }
          },
          "InstallProduct" : {
            "packages" : {
              "msi" : {
                "placeholder" : { "Fn::Join" : [ "", [
                  "https://", { "Fn::If" : [ "ConfigureGlobalS3", "s3", { "Fn::Sub" : "s3-${AWS::Region}" }]}, ".amazonaws.com/",
                  { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ProductsBucket" }}, "/", { "Ref" : "ProductFolder" }, "/", { "Ref" : "ProductObject" }
                ]]}
              }
            }
          },
          "InstallConfiguration" : {
            "sources" : {
              "C:\\Inetpub\\wwwroot" : { "Fn::Join" : [ "", [
                "https://", { "Fn::If" : [ "ConfigureGlobalS3", "s3", { "Fn::Sub" : "s3-${AWS::Region}" }]}, ".amazonaws.com/",
                { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ConfigurationsBucket" }}, "/", { "Ref" : "ConfigurationFolder" }, "/", { "Ref" : "ConfigurationObject" }
              ]]}
            }
          },
          "InstallApplication" : {
            "sources" : {
              "C:\\Inetpub\\wwwroot" : { "Fn::Join" : [ "", [
                "https://", { "Fn::If" : [ "ConfigureGlobalS3", "s3", { "Fn::Sub" : "s3-${AWS::Region}" }]}, ".amazonaws.com/",
                { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ApplicationsBucket" }}, "/", { "Ref" : "ApplicationFolder" }, "/", { "Ref" : "ApplicationObject" }
              ]]}
            }
          },
          "SignalCFN" : {
            "commands" : {
              "01-signal-success" : {
                "command" : { "Fn::Sub" : "cfn-signal.exe --exit-code 0 \"${Instance01AWaitHandle}\"" }
              }
            }
          }
        }
      },
      "Properties" : {
        "ImageId" : { "Fn::If" : [ "GetImageID", { "Fn::GetAtt" : [ "GetWindowsImageId", "ImageId" ]},
                                                 { "Fn::FindInMap" : [ "ImageIdMap", { "Ref" : "AWS::Region" }, { "Ref" : "OSDate" }]}]},
        "InstanceType" : { "Fn::FindInMap" : [ "InstanceTypeMap", "DataStaging", { "Ref" : "EnvironmentType" }]},
        "IamInstanceProfile" : { "Ref" : "InstanceProfile" },
        "KeyName" : { "Ref" : "KeyName" },
        "NetworkInterfaces" : [{
          "Description"              : { "Fn::Join" : [ "-", [ { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }}, { "Ref" : "ApplicationName" }, { "Ref" : "ComponentName" }, "NetworkInterface01A", "eth0" ]]},
          "DeviceIndex"              : "0",
          "SubnetId"                 : { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-ApplicationSubnetA" }},
          "PrivateIpAddress"         : { "Fn::If" : [ "ConfigureStaticAddress", { "Fn::GetAtt" : [ "AddressCalculatorA", "Address8" ]}, { "Ref" : "AWS::NoValue" }]},
          "GroupSet"                 : [
            { "Ref" :  "InstanceSecurityGroup" },
            { "Fn::ImportValue" : { "Fn::Sub" : "${ActiveDirectoryStackName}-DomainMemberSecurityGroup" }},
            { "Fn::ImportValue" : { "Fn::Sub" : "${WebSphereMQStackName}-ClientSecurityGroup" }},
            { "Fn::ImportValue" : { "Fn::Sub" : "${RabbitMQStackName}-ClientSecurityGroup" }},
            { "Fn::ImportValue" : { "Fn::Sub" : "${MongoDBStackName}-ClientSecurityGroup" }},
            { "Fn::If" : [ "ConfigureDataTransferIntegration", { "Fn::ImportValue" : { "Fn::Sub" : "${DataTransferSFTPStackName}-ClientSecurityGroup" }}, { "Ref" : "AWS::NoValue" }]},
            { "Fn::ImportValue" : { "Fn::Sub" : "${EngineMonitoringStackName}-ClientSecurityGroup" }}
          ],
          "AssociatePublicIpAddress" : "false",
          "DeleteOnTermination"      : "true"
        }],
        "BlockDeviceMappings" : [{
          "DeviceName" : "/dev/sda1",
          "Ebs" : {
            "VolumeSize" : "50"
          }
        },
        {
          "DeviceName" : "/dev/xvdb",
          "Ebs" : {
            "VolumeSize" : "100",
            "VolumeType" : "gp2",
            "DeleteOnTermination" : "false"
          }
        }],
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }}, { "Ref" : "ApplicationName" }, { "Ref" : "ComponentName" }, "Instance01A" ]]}},
          { "Key" : "HostName", "Value" : { "Fn::Sub" : "${GetHostName.HostName}01a" }},
          { "Fn::If" : [ "ConfigureSchedule", { "Key" : "Schedule", "Value" : { "Ref" : "Schedule" }}, { "Ref" : "AWS::NoValue" }]}
        ],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : [ "\n", [
          "<script>",
          { "Fn::Sub" : "cfn-init.exe --verbose --configsets All --stack ${AWS::StackId} --resource Instance01A --region ${AWS::Region}" },
          "</script>"
        ]]}}
      }
    },

    "Instance01AWaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "Properties" : {
        "Handle" : { "Ref" : "Instance01AWaitHandle" },
        "Timeout" : "3600"
      },
      "DependsOn" : "Instance01A"
    },

    "Instance01AWaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },

    "Instance02A" : {
      "Type" : "AWS::EC2::Instance",
      "Metadata" : {
        "AWS::CloudFormation::Authentication" : {
          "S3Credentials" : {
            "type" : "S3",
            "roleName" : { "Ref" : "Role" },
            "buckets" : [
              { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ScriptsBucket" }},
              { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ProductsBucket" }},
              { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ConfigurationsBucket" }},
              { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ApplicationsBucket" }}
            ]
          }
        },
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "All" : [
              { "Fn::If" : [ "ConfigureLogs", "ConfigureLogs", { "Ref": "AWS::NoValue" }]},
              "ConfigureCFN",
              "ConfigureOS",
              "ConfigureHostName",
              "JoinDomain",
              { "Fn::If" : [ "InstallAtomProduct", "InstallAtomProduct", { "Ref": "AWS::NoValue" }]},
              { "Fn::If" : [ "InstallProduct", "InstallProduct", { "Ref": "AWS::NoValue" }]},
              { "Fn::If" : [ "InstallConfiguration", "InstallConfiguration", { "Ref": "AWS::NoValue" }]},
              { "Fn::If" : [ "InstallApplication", "InstallApplication", { "Ref": "AWS::NoValue" }]},
              "SignalCFN"
            ]
          },
          "ConfigureLogs" : {
            "files" : {
              "C:\\Program Files\\Amazon\\SSM\\Plugins\\awsCloudWatch\\AWS.EC2.Windows.CloudWatch.json" : {
                "content" : { "Fn::Join" : [ "", [
                  "{",
                  "  \"IsEnabled\" : true,",
                  "  \"EngineConfiguration\" : {",
                  "    \"PollInterval\" : \"00:00:10\",",
                  "    \"Components\" : [{",
                  "      \"Id\" : \"ApplicationEventLog\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.EventLog.EventLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"LogName\" : \"Application\",",
                  "        \"Levels\" : \"7\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"SystemEventLog\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.EventLog.EventLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"LogName\" : \"System\",",
                  "        \"Levels\" : \"7\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"SecurityEventLog\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.EventLog.EventLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"LogName\" : \"Security\",",
                  "        \"Levels\" : \"7\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"EC2ConfigLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"LogDirectoryPath\": \"C:\\\\Program Files\\\\Amazon\\\\Ec2ConfigService\\\\Logs\",",
                  "        \"TimestampFormat\": \"yyyy-MM-ddTHH:mm:ss.fffZ:\",",
                  "        \"Encoding\": \"ASCII\",",
                  "        \"Filter\": \"EC2ConfigLog.txt\",",
                  "        \"CultureName\": \"en-US\",",
                  "        \"TimeZoneKind\": \"UTC\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CfnInitLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"LogDirectoryPath\": \"C:\\\\cfn\\\\log\",",
                  "        \"TimestampFormat\": \"yyyy-MM-dd HH:mm:ss,fff\",",
                  "        \"Encoding\": \"ASCII\",",
                  "        \"Filter\": \"cfn-init.log\",",
                  "        \"CultureName\": \"en-US\",",
                  "        \"TimeZoneKind\": \"Local\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"IISLogs\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"LogDirectoryPath\" : \"C:\\\\inetpub\\\\logs\\\\LogFiles\\\\W3SVC1\",",
                  "        \"TimestampFormat\" : \"yyyy-MM-dd HH:mm:ss\",",
                  "        \"Encoding\" : \"UTF-8\",",
                  "        \"Filter\" : \"\",",
                  "        \"CultureName\" : \"en-US\",",
                  "        \"TimeZoneKind\" : \"UTC\",",
                  "        \"LineCount\" : \"3\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"MemoryPerformanceCounter\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.PerformanceCounterComponent.PerformanceCounterInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"CategoryName\" : \"Memory\",",
                  "        \"CounterName\" : \"Available MBytes\",",
                  "        \"InstanceName\" : \"\",",
                  "        \"MetricName\" : \"Memory\",",
                  "        \"Unit\" : \"Megabytes\",",
                  "        \"DimensionName\" : \"\",",
                  "        \"DimensionValue\" : \"\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchApplicationEventLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"DataStaging/{instance_id}/ApplicationEventLog\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchSystemEventLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"DataStaging/{instance_id}/SystemEventLog\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchSecurityEventLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"DataStaging/{instance_id}/SecurityEventLog\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchEC2ConfigLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"DataStaging/{instance_id}/EC2ConfigLog\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchCfnInitLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"DataStaging/{instance_id}/CfnInitLog\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchIISLogs\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"DataStaging/{instance_id}/IISLogs\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"CloudWatch\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.CloudWatch.CloudWatchOutputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"AccessKey\" : \"\",",
                  "        \"SecretKey\" : \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                  "        \"NameSpace\" : \"Windows/Default\"",
                  "      }",
                  "    }],",
                  "    \"Flows\": {",
                  "      \"Flows\": [",
                  "        \"ApplicationEventLog,CloudWatchApplicationEventLog\",",
                  "        \"SystemEventLog,CloudWatchSystemEventLog\",",
                  "        \"SecurityEventLog,CloudWatchSecurityEventLog\",",
                  "        \"EC2ConfigLog,CloudWatchEC2ConfigLog\",",
                  "        \"CfnInitLog,CloudWatchCfnInitLog\",",
                  "        \"IISLogs,CloudWatchIISLogs\",",
                  "        \"MemoryPerformanceCounter,CloudWatch\"",
                  "      ]",
                  "    }",
                  "  }",
                  "}"
                ]]}
              }
            },
            "commands" : {
              "01-enable-SSM" : {
                "command" : "powershell.exe -Command \"Set-Service -Name AmazonSSMAgent -StartupType Automatic\"",
                "waitAfterCompletion" : "0"
              },
              "02-restart-SSM" : {
                "command" : "powershell.exe -Command \"Restart-Service AmazonSSMAgent\"",
                "waitAfterCompletion" : "30"
              }
            }
          },
          "ConfigureCFN" : {
            "files" : {
              "c:\\cfn\\cfn-hup.conf" : {
                "content" : { "Fn::Join" : [ "\n", [
                  "[main]",
                  { "Fn::Sub" : "stack=${AWS::StackId}" },
                  { "Fn::Sub" : "region=${AWS::Region}" }
                  ]]}
              },
              "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf" : {
                "content": { "Fn::Join" : [ "\n", [
                  "[cfn-auto-reloader-hook]",
                  "triggers=post.update",
                  "path=Resources.Instance02A.Metadata.AWS::CloudFormation::Init",
                  { "Fn::Sub" : "action=cfn-init.exe --verbose --configsets All --stack ${AWS::StackId} --resource Instance02A --region ${AWS::Region}" }
                ]]}
              }
            },
            "services" : {
              "windows" : {
                "cfn-hup" : {
                  "enabled" : "true",
                  "ensureRunning" : "true",
                  "files" : [
                    "c:\\cfn\\cfn-hup.conf",
                    "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                  ]
                }
              }
            }
          },
          "ConfigureOS" : {
            "commands" : {
              "01-disable-windows-firewall" : {
                "command" : "powershell.exe -Command \"Get-NetFirewallProfile | Set-NetFirewallProfile -Enabled False\"",
                "waitAfterCompletion" : "0"
              },
              "02-set-execution-policy" : {
                "command" : "powershell.exe -Command \"Set-ExecutionPolicy RemoteSigned -Force\"",
                "waitAfterCompletion" : "0"
              }
            }
          },
          "ConfigureHostName" : {
            "commands" : {
              "01-configure-hostname" : {
                "command" : { "Fn::Sub" : "powershell.exe Rename-Computer -NewName ${GetHostName.HostName}02a -Restart" },
                "waitAfterCompletion" : "forever"
              }
            }
          },
          "JoinDomain" : {
            "commands" : {
              "01-join-domain" : {
                "command" : { "Fn::Join" : [ "", [
                  "powershell.exe -Command \"Add-Computer -DomainName ", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCPrivateDomain" }},
                  " -Credential (New-Object System.Management.Automation.PSCredential('", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCNetBIOSDomain" }}, "\\", { "Ref" : "DomainAdminUser" }, "',(ConvertTo-SecureString '", { "Ref" : "DomainAdminPassword" }, "' -AsPlainText -Force)))",
                  " -Restart\""
                ]]},
                "waitAfterCompletion" : "forever"
              }
            }
          },
          "InstallAtomProduct" : {
            "packages" : {
              "msi" : {
                "atom" : { "Fn::Join" : [ "", [
                  "https://", { "Fn::If" : [ "ConfigureGlobalS3", "s3", { "Fn::Sub" : "s3-${AWS::Region}" }]}, ".amazonaws.com/",
                  { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ProductsBucket" }}, "/", { "Ref" : "SharedProductFolder" }, "/", { "Ref" : "AtomProductObject" }
                ]]},

              }
            }
          },
          "InstallProduct" : {
            "packages" : {
              "msi" : {
                "placeholder" : { "Fn::Join" : [ "", [
                  "https://", { "Fn::If" : [ "ConfigureGlobalS3", "s3", { "Fn::Sub" : "s3-${AWS::Region}" }]}, ".amazonaws.com/",
                  { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ProductsBucket" }}, "/", { "Ref" : "ProductFolder" }, "/", { "Ref" : "ProductObject" }
                ]]}
              }
            }
          },
          "InstallConfiguration" : {
            "sources" : {
              "C:\\Inetpub\\wwwroot" : { "Fn::Join" : [ "", [
                "https://", { "Fn::If" : [ "ConfigureGlobalS3", "s3", { "Fn::Sub" : "s3-${AWS::Region}" }]}, ".amazonaws.com/",
                { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ConfigurationsBucket" }}, "/", { "Ref" : "ConfigurationFolder" }, "/", { "Ref" : "ConfigurationObject" }
              ]]}
            }
          },
          "InstallApplication" : {
            "sources" : {
              "C:\\Inetpub\\wwwroot" : { "Fn::Join" : [ "", [
                "https://", { "Fn::If" : [ "ConfigureGlobalS3", "s3", { "Fn::Sub" : "s3-${AWS::Region}" }]}, ".amazonaws.com/",
                { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ApplicationsBucket" }}, "/", { "Ref" : "ApplicationFolder" }, "/", { "Ref" : "ApplicationObject" }
              ]]}
            }
          },
          "SignalCFN" : {
            "commands" : {
              "01-signal-success" : {
                "command" : { "Fn::Sub" : "cfn-signal.exe --exit-code 0 \"${Instance02AWaitHandle}\"" }
              }
            }
          }
        }
      },
      "Properties" : {
        "ImageId" : { "Fn::If" : [ "GetImageID", { "Fn::GetAtt" : [ "GetWindowsImageId", "ImageId" ]},
                                                 { "Fn::FindInMap" : [ "ImageIdMap", { "Ref" : "AWS::Region" }, { "Ref" : "OSDate" }]}]},
        "InstanceType" : { "Fn::FindInMap" : [ "InstanceTypeMap", "DataStaging", { "Ref" : "EnvironmentType" }]},
        "IamInstanceProfile" : { "Ref" : "InstanceProfile" },
        "KeyName" : { "Ref" : "KeyName" },
        "NetworkInterfaces" : [{
          "Description"              : { "Fn::Join" : [ "-", [ { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }}, { "Ref" : "ApplicationName" }, { "Ref" : "ComponentName" }, "NetworkInterface02A", "eth0" ]]},
          "DeviceIndex"              : "0",
          "SubnetId"                 : { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-ApplicationSubnetA" }},
          "PrivateIpAddress"         : { "Fn::If" : [ "ConfigureStaticAddress", { "Fn::GetAtt" : [ "AddressCalculatorA", "Address9" ]}, { "Ref" : "AWS::NoValue" }]},
          "GroupSet"                 : [
            { "Ref" :  "InstanceSecurityGroup" },
            { "Fn::ImportValue" : { "Fn::Sub" : "${ActiveDirectoryStackName}-DomainMemberSecurityGroup" }},
            { "Fn::ImportValue" : { "Fn::Sub" : "${WebSphereMQStackName}-ClientSecurityGroup" }},
            { "Fn::ImportValue" : { "Fn::Sub" : "${RabbitMQStackName}-ClientSecurityGroup" }},
            { "Fn::ImportValue" : { "Fn::Sub" : "${MongoDBStackName}-ClientSecurityGroup" }},
            { "Fn::If" : [ "ConfigureDataTransferIntegration", { "Fn::ImportValue" : { "Fn::Sub" : "${DataTransferSFTPStackName}-ClientSecurityGroup" }}, { "Ref" : "AWS::NoValue" }]},
            { "Fn::ImportValue" : { "Fn::Sub" : "${EngineMonitoringStackName}-ClientSecurityGroup" }}
          ],
          "AssociatePublicIpAddress" : "false",
          "DeleteOnTermination"      : "true"
        }],
        "BlockDeviceMappings" : [{
          "DeviceName" : "/dev/sda1",
          "Ebs" : {
            "VolumeSize" : "50"
          }
        },
        {
          "DeviceName" : "/dev/xvdb",
          "Ebs" : {
            "VolumeSize" : "100",
            "VolumeType" : "gp2",
            "DeleteOnTermination" : "false"
          }
        }],
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }}, { "Ref" : "ApplicationName" }, { "Ref" : "ComponentName" }, "Instance02A" ]]}},
          { "Key" : "HostName", "Value" : { "Fn::Sub" : "${GetHostName.HostName}02a" }},
          { "Fn::If" : [ "ConfigureSchedule", { "Key" : "Schedule", "Value" : { "Ref" : "Schedule" }}, { "Ref" : "AWS::NoValue" }]}
        ],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : [ "\n", [
          "<script>",
          { "Fn::Sub" : "cfn-init.exe --verbose --configsets All --stack ${AWS::StackId} --resource Instance02A --region ${AWS::Region}" },
          "</script>"
        ]]}}
      }
    },

    "Instance02AWaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "Properties" : {
        "Handle" : { "Ref" : "Instance02AWaitHandle" },
        "Timeout" : "3600"
      },
      "DependsOn" : "Instance02A"
    },

    "Instance02AWaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },

    "Instance03A" : {
      "Type" : "AWS::EC2::Instance",
      "Metadata" : {
        "AWS::CloudFormation::Authentication" : {
          "S3Credentials" : {
            "type" : "S3",
            "roleName" : { "Ref" : "Role" },
            "buckets" : [
              { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ScriptsBucket" }},
              { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ProductsBucket" }},
              { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ConfigurationsBucket" }},
              { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ApplicationsBucket" }}
            ]
          }
        },
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "All" : [
              { "Fn::If" : [ "ConfigureLogs", "ConfigureLogs", { "Ref": "AWS::NoValue" }]},
              "ConfigureCFN",
              "ConfigureOS",
              "ConfigureHostName",
              "JoinDomain",
              { "Fn::If" : [ "InstallAtomProduct", "InstallAtomProduct", { "Ref": "AWS::NoValue" }]},
              { "Fn::If" : [ "InstallProduct", "InstallProduct", { "Ref": "AWS::NoValue" }]},
              { "Fn::If" : [ "InstallConfiguration", "InstallConfiguration", { "Ref": "AWS::NoValue" }]},
              { "Fn::If" : [ "InstallApplication", "InstallApplication", { "Ref": "AWS::NoValue" }]},
              "SignalCFN"
            ]
          },
          "ConfigureLogs" : {
            "files" : {
              "C:\\Program Files\\Amazon\\SSM\\Plugins\\awsCloudWatch\\AWS.EC2.Windows.CloudWatch.json" : {
                "content" : { "Fn::Join" : [ "", [
                  "{",
                  "  \"IsEnabled\" : true,",
                  "  \"EngineConfiguration\" : {",
                  "    \"PollInterval\" : \"00:00:10\",",
                  "    \"Components\" : [{",
                  "      \"Id\" : \"ApplicationEventLog\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.EventLog.EventLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"LogName\" : \"Application\",",
                  "        \"Levels\" : \"7\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"SystemEventLog\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.EventLog.EventLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"LogName\" : \"System\",",
                  "        \"Levels\" : \"7\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"SecurityEventLog\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.EventLog.EventLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"LogName\" : \"Security\",",
                  "        \"Levels\" : \"7\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"EC2ConfigLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"LogDirectoryPath\": \"C:\\\\Program Files\\\\Amazon\\\\Ec2ConfigService\\\\Logs\",",
                  "        \"TimestampFormat\": \"yyyy-MM-ddTHH:mm:ss.fffZ:\",",
                  "        \"Encoding\": \"ASCII\",",
                  "        \"Filter\": \"EC2ConfigLog.txt\",",
                  "        \"CultureName\": \"en-US\",",
                  "        \"TimeZoneKind\": \"UTC\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CfnInitLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"LogDirectoryPath\": \"C:\\\\cfn\\\\log\",",
                  "        \"TimestampFormat\": \"yyyy-MM-dd HH:mm:ss,fff\",",
                  "        \"Encoding\": \"ASCII\",",
                  "        \"Filter\": \"cfn-init.log\",",
                  "        \"CultureName\": \"en-US\",",
                  "        \"TimeZoneKind\": \"Local\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"IISLogs\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"LogDirectoryPath\" : \"C:\\\\inetpub\\\\logs\\\\LogFiles\\\\W3SVC1\",",
                  "        \"TimestampFormat\" : \"yyyy-MM-dd HH:mm:ss\",",
                  "        \"Encoding\" : \"UTF-8\",",
                  "        \"Filter\" : \"\",",
                  "        \"CultureName\" : \"en-US\",",
                  "        \"TimeZoneKind\" : \"UTC\",",
                  "        \"LineCount\" : \"3\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"MemoryPerformanceCounter\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.PerformanceCounterComponent.PerformanceCounterInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"CategoryName\" : \"Memory\",",
                  "        \"CounterName\" : \"Available MBytes\",",
                  "        \"InstanceName\" : \"\",",
                  "        \"MetricName\" : \"Memory\",",
                  "        \"Unit\" : \"Megabytes\",",
                  "        \"DimensionName\" : \"\",",
                  "        \"DimensionValue\" : \"\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchApplicationEventLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"DataStaging/{instance_id}/ApplicationEventLog\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchSystemEventLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"DataStaging/{instance_id}/SystemEventLog\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchSecurityEventLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"DataStaging/{instance_id}/SecurityEventLog\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchEC2ConfigLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"DataStaging/{instance_id}/EC2ConfigLog\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchCfnInitLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"DataStaging/{instance_id}/CfnInitLog\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchIISLogs\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"DataStaging/{instance_id}/IISLogs\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"CloudWatch\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.CloudWatch.CloudWatchOutputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"AccessKey\" : \"\",",
                  "        \"SecretKey\" : \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                  "        \"NameSpace\" : \"Windows/Default\"",
                  "      }",
                  "    }],",
                  "    \"Flows\": {",
                  "      \"Flows\": [",
                  "        \"ApplicationEventLog,CloudWatchApplicationEventLog\",",
                  "        \"SystemEventLog,CloudWatchSystemEventLog\",",
                  "        \"SecurityEventLog,CloudWatchSecurityEventLog\",",
                  "        \"EC2ConfigLog,CloudWatchEC2ConfigLog\",",
                  "        \"CfnInitLog,CloudWatchCfnInitLog\",",
                  "        \"IISLogs,CloudWatchIISLogs\",",
                  "        \"MemoryPerformanceCounter,CloudWatch\"",
                  "      ]",
                  "    }",
                  "  }",
                  "}"
                ]]}
              }
            },
            "commands" : {
              "01-enable-SSM" : {
                "command" : "powershell.exe -Command \"Set-Service -Name AmazonSSMAgent -StartupType Automatic\"",
                "waitAfterCompletion" : "0"
              },
              "02-restart-SSM" : {
                "command" : "powershell.exe -Command \"Restart-Service AmazonSSMAgent\"",
                "waitAfterCompletion" : "30"
              }
            }
          },
          "ConfigureCFN" : {
            "files" : {
              "c:\\cfn\\cfn-hup.conf" : {
                "content" : { "Fn::Join" : [ "\n", [
                  "[main]",
                  { "Fn::Sub" : "stack=${AWS::StackId}" },
                  { "Fn::Sub" : "region=${AWS::Region}" }
                  ]]}
              },
              "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf" : {
                "content": { "Fn::Join" : [ "\n", [
                  "[cfn-auto-reloader-hook]",
                  "triggers=post.update",
                  "path=Resources.Instance03A.Metadata.AWS::CloudFormation::Init",
                  { "Fn::Sub" : "action=cfn-init.exe --verbose --configsets All --stack ${AWS::StackId} --resource Instance03A --region ${AWS::Region}" }
                ]]}
              }
            },
            "services" : {
              "windows" : {
                "cfn-hup" : {
                  "enabled" : "true",
                  "ensureRunning" : "true",
                  "files" : [
                    "c:\\cfn\\cfn-hup.conf",
                    "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                  ]
                }
              }
            }
          },
          "ConfigureOS" : {
            "commands" : {
              "01-disable-windows-firewall" : {
                "command" : "powershell.exe -Command \"Get-NetFirewallProfile | Set-NetFirewallProfile -Enabled False\"",
                "waitAfterCompletion" : "0"
              },
              "02-set-execution-policy" : {
                "command" : "powershell.exe -Command \"Set-ExecutionPolicy RemoteSigned -Force\"",
                "waitAfterCompletion" : "0"
              }
            }
          },
          "ConfigureHostName" : {
            "commands" : {
              "01-configure-hostname" : {
                "command" : { "Fn::Sub" : "powershell.exe Rename-Computer -NewName ${GetHostName.HostName}03a -Restart" },
                "waitAfterCompletion" : "forever"
              }
            }
          },
          "JoinDomain" : {
            "commands" : {
              "01-join-domain" : {
                "command" : { "Fn::Join" : [ "", [
                  "powershell.exe -Command \"Add-Computer -DomainName ", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCPrivateDomain" }},
                  " -Credential (New-Object System.Management.Automation.PSCredential('", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCNetBIOSDomain" }}, "\\", { "Ref" : "DomainAdminUser" }, "',(ConvertTo-SecureString '", { "Ref" : "DomainAdminPassword" }, "' -AsPlainText -Force)))",
                  " -Restart\""
                ]]},
                "waitAfterCompletion" : "forever"
              }
            }
          },
          "InstallAtomProduct" : {
            "packages" : {
              "msi" : {
                "atom" : { "Fn::Join" : [ "", [
                  "https://", { "Fn::If" : [ "ConfigureGlobalS3", "s3", { "Fn::Sub" : "s3-${AWS::Region}" }]}, ".amazonaws.com/",
                  { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ProductsBucket" }}, "/", { "Ref" : "SharedProductFolder" }, "/", { "Ref" : "AtomProductObject" }
                ]]},

              }
            }
          },
          "InstallProduct" : {
            "packages" : {
              "msi" : {
                "placeholder" : { "Fn::Join" : [ "", [
                  "https://", { "Fn::If" : [ "ConfigureGlobalS3", "s3", { "Fn::Sub" : "s3-${AWS::Region}" }]}, ".amazonaws.com/",
                  { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ProductsBucket" }}, "/", { "Ref" : "ProductFolder" }, "/", { "Ref" : "ProductObject" }
                ]]}
              }
            }
          },
          "InstallConfiguration" : {
            "sources" : {
              "C:\\Inetpub\\wwwroot" : { "Fn::Join" : [ "", [
                "https://", { "Fn::If" : [ "ConfigureGlobalS3", "s3", { "Fn::Sub" : "s3-${AWS::Region}" }]}, ".amazonaws.com/",
                { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ConfigurationsBucket" }}, "/", { "Ref" : "ConfigurationFolder" }, "/", { "Ref" : "ConfigurationObject" }
              ]]}
            }
          },
          "InstallApplication" : {
            "sources" : {
              "C:\\Inetpub\\wwwroot" : { "Fn::Join" : [ "", [
                "https://", { "Fn::If" : [ "ConfigureGlobalS3", "s3", { "Fn::Sub" : "s3-${AWS::Region}" }]}, ".amazonaws.com/",
                { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ApplicationsBucket" }}, "/", { "Ref" : "ApplicationFolder" }, "/", { "Ref" : "ApplicationObject" }
              ]]}
            }
          },
          "SignalCFN" : {
            "commands" : {
              "01-signal-success" : {
                "command" : { "Fn::Sub" : "cfn-signal.exe --exit-code 0 \"${Instance03AWaitHandle}\"" }
              }
            }
          }
        }
      },
      "Properties" : {
        "ImageId" : { "Fn::If" : [ "GetImageID", { "Fn::GetAtt" : [ "GetWindowsImageId", "ImageId" ]},
                                                 { "Fn::FindInMap" : [ "ImageIdMap", { "Ref" : "AWS::Region" }, { "Ref" : "OSDate" }]}]},
        "InstanceType" : { "Fn::FindInMap" : [ "InstanceTypeMap", "DataStaging", { "Ref" : "EnvironmentType" }]},
        "IamInstanceProfile" : { "Ref" : "InstanceProfile" },
        "KeyName" : { "Ref" : "KeyName" },
        "NetworkInterfaces" : [{
          "Description"              : { "Fn::Join" : [ "-", [ { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }}, { "Ref" : "ApplicationName" }, { "Ref" : "ComponentName" }, "NetworkInterface03A", "eth0" ]]},
          "DeviceIndex"              : "0",
          "SubnetId"                 : { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-ApplicationSubnetA" }},
          "PrivateIpAddress"         : { "Fn::If" : [ "ConfigureStaticAddress", { "Fn::GetAtt" : [ "AddressCalculatorA", "Address10" ]}, { "Ref" : "AWS::NoValue" }]},
          "GroupSet"                 : [
            { "Ref" :  "InstanceSecurityGroup" },
            { "Fn::ImportValue" : { "Fn::Sub" : "${ActiveDirectoryStackName}-DomainMemberSecurityGroup" }},
            { "Fn::ImportValue" : { "Fn::Sub" : "${WebSphereMQStackName}-ClientSecurityGroup" }},
            { "Fn::ImportValue" : { "Fn::Sub" : "${RabbitMQStackName}-ClientSecurityGroup" }},
            { "Fn::ImportValue" : { "Fn::Sub" : "${MongoDBStackName}-ClientSecurityGroup" }},
            { "Fn::If" : [ "ConfigureDataTransferIntegration", { "Fn::ImportValue" : { "Fn::Sub" : "${DataTransferSFTPStackName}-ClientSecurityGroup" }}, { "Ref" : "AWS::NoValue" }]},
            { "Fn::ImportValue" : { "Fn::Sub" : "${EngineMonitoringStackName}-ClientSecurityGroup" }}
          ],
          "AssociatePublicIpAddress" : "false",
          "DeleteOnTermination"      : "true"
        }],
        "BlockDeviceMappings" : [{
          "DeviceName" : "/dev/sda1",
          "Ebs" : {
            "VolumeSize" : "50"
          }
        },
        {
          "DeviceName" : "/dev/xvdb",
          "Ebs" : {
            "VolumeSize" : "100",
            "VolumeType" : "gp2",
            "DeleteOnTermination" : "false"
          }
        }],
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }}, { "Ref" : "ApplicationName" }, { "Ref" : "ComponentName" }, "Instance03A" ]]}},
          { "Key" : "HostName", "Value" : { "Fn::Sub" : "${GetHostName.HostName}03a" }},
          { "Fn::If" : [ "ConfigureSchedule", { "Key" : "Schedule", "Value" : { "Ref" : "Schedule" }}, { "Ref" : "AWS::NoValue" }]}
        ],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : [ "\n", [
          "<script>",
          { "Fn::Sub" : "cfn-init.exe --verbose --configsets All --stack ${AWS::StackId} --resource Instance03A --region ${AWS::Region}" },
          "</script>"
        ]]}}
      }
    },

    "Instance03AWaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "Properties" : {
        "Handle" : { "Ref" : "Instance03AWaitHandle" },
        "Timeout" : "3600"
      },
      "DependsOn" : "Instance03A"
    },

    "Instance03AWaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },

    "AddressCalculatorB" : {
      "Type" : "Custom::AddressCalculator",
      "Properties" : {
        "ServiceToken" : { "Fn::ImportValue" : { "Fn::Sub" : "${StandardCIDRFunctionsStackName}-AddressCalculatorFunctionArn" }},
        "SubnetId" : { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-ApplicationSubnetB" }}
      },
      "Condition" : "ConfigureStaticAddress&MultiZone"
    },

    "Instance01B" : {
      "Type" : "AWS::EC2::Instance",
      "Metadata" : {
        "AWS::CloudFormation::Authentication" : {
          "S3Credentials" : {
            "type" : "S3",
            "roleName" : { "Ref" : "Role" },
            "buckets" : [
              { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ScriptsBucket" }},
              { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ProductsBucket" }},
              { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ConfigurationsBucket" }},
              { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ApplicationsBucket" }}
            ]
          }
        },
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "All" : [
              { "Fn::If" : [ "ConfigureLogs", "ConfigureLogs", { "Ref": "AWS::NoValue" }]},
              "ConfigureCFN",
              "ConfigureOS",
              "ConfigureHostName",
              "JoinDomain",
              { "Fn::If" : [ "InstallAtomProduct", "InstallAtomProduct", { "Ref": "AWS::NoValue" }]},
              { "Fn::If" : [ "InstallProduct", "InstallProduct", { "Ref": "AWS::NoValue" }]},
              { "Fn::If" : [ "InstallConfiguration", "InstallConfiguration", { "Ref": "AWS::NoValue" }]},
              { "Fn::If" : [ "InstallApplication", "InstallApplication", { "Ref": "AWS::NoValue" }]},
              "SignalCFN"
            ]
          },
          "ConfigureLogs" : {
            "files" : {
              "C:\\Program Files\\Amazon\\SSM\\Plugins\\awsCloudWatch\\AWS.EC2.Windows.CloudWatch.json" : {
                "content" : { "Fn::Join" : [ "", [
                  "{",
                  "  \"IsEnabled\" : true,",
                  "  \"EngineConfiguration\" : {",
                  "    \"PollInterval\" : \"00:00:10\",",
                  "    \"Components\" : [{",
                  "      \"Id\" : \"ApplicationEventLog\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.EventLog.EventLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"LogName\" : \"Application\",",
                  "        \"Levels\" : \"7\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"SystemEventLog\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.EventLog.EventLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"LogName\" : \"System\",",
                  "        \"Levels\" : \"7\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"SecurityEventLog\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.EventLog.EventLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"LogName\" : \"Security\",",
                  "        \"Levels\" : \"7\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"EC2ConfigLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"LogDirectoryPath\": \"C:\\\\Program Files\\\\Amazon\\\\Ec2ConfigService\\\\Logs\",",
                  "        \"TimestampFormat\": \"yyyy-MM-ddTHH:mm:ss.fffZ:\",",
                  "        \"Encoding\": \"ASCII\",",
                  "        \"Filter\": \"EC2ConfigLog.txt\",",
                  "        \"CultureName\": \"en-US\",",
                  "        \"TimeZoneKind\": \"UTC\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CfnInitLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"LogDirectoryPath\": \"C:\\\\cfn\\\\log\",",
                  "        \"TimestampFormat\": \"yyyy-MM-dd HH:mm:ss,fff\",",
                  "        \"Encoding\": \"ASCII\",",
                  "        \"Filter\": \"cfn-init.log\",",
                  "        \"CultureName\": \"en-US\",",
                  "        \"TimeZoneKind\": \"Local\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"IISLogs\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"LogDirectoryPath\" : \"C:\\\\inetpub\\\\logs\\\\LogFiles\\\\W3SVC1\",",
                  "        \"TimestampFormat\" : \"yyyy-MM-dd HH:mm:ss\",",
                  "        \"Encoding\" : \"UTF-8\",",
                  "        \"Filter\" : \"\",",
                  "        \"CultureName\" : \"en-US\",",
                  "        \"TimeZoneKind\" : \"UTC\",",
                  "        \"LineCount\" : \"3\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"MemoryPerformanceCounter\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.PerformanceCounterComponent.PerformanceCounterInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"CategoryName\" : \"Memory\",",
                  "        \"CounterName\" : \"Available MBytes\",",
                  "        \"InstanceName\" : \"\",",
                  "        \"MetricName\" : \"Memory\",",
                  "        \"Unit\" : \"Megabytes\",",
                  "        \"DimensionName\" : \"\",",
                  "        \"DimensionValue\" : \"\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchApplicationEventLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"DataStaging/{instance_id}/ApplicationEventLog\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchSystemEventLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"DataStaging/{instance_id}/SystemEventLog\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchSecurityEventLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"DataStaging/{instance_id}/SecurityEventLog\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchEC2ConfigLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"DataStaging/{instance_id}/EC2ConfigLog\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchCfnInitLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"DataStaging/{instance_id}/CfnInitLog\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchIISLogs\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"DataStaging/{instance_id}/IISLogs\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"CloudWatch\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.CloudWatch.CloudWatchOutputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"AccessKey\" : \"\",",
                  "        \"SecretKey\" : \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                  "        \"NameSpace\" : \"Windows/Default\"",
                  "      }",
                  "    }],",
                  "    \"Flows\": {",
                  "      \"Flows\": [",
                  "        \"ApplicationEventLog,CloudWatchApplicationEventLog\",",
                  "        \"SystemEventLog,CloudWatchSystemEventLog\",",
                  "        \"SecurityEventLog,CloudWatchSecurityEventLog\",",
                  "        \"EC2ConfigLog,CloudWatchEC2ConfigLog\",",
                  "        \"CfnInitLog,CloudWatchCfnInitLog\",",
                  "        \"IISLogs,CloudWatchIISLogs\",",
                  "        \"MemoryPerformanceCounter,CloudWatch\"",
                  "      ]",
                  "    }",
                  "  }",
                  "}"
                ]]}
              }
            },
            "commands" : {
              "01-enable-SSM" : {
                "command" : "powershell.exe -Command \"Set-Service -Name AmazonSSMAgent -StartupType Automatic\"",
                "waitAfterCompletion" : "0"
              },
              "02-restart-SSM" : {
                "command" : "powershell.exe -Command \"Restart-Service AmazonSSMAgent\"",
                "waitAfterCompletion" : "30"
              }
            }
          },
          "ConfigureCFN" : {
            "files" : {
              "c:\\cfn\\cfn-hup.conf" : {
                "content" : { "Fn::Join" : [ "\n", [
                  "[main]",
                  { "Fn::Sub" : "stack=${AWS::StackId}" },
                  { "Fn::Sub" : "region=${AWS::Region}" }
                  ]]}
              },
              "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf" : {
                "content": { "Fn::Join" : [ "\n", [
                  "[cfn-auto-reloader-hook]",
                  "triggers=post.update",
                  "path=Resources.Instance01B.Metadata.AWS::CloudFormation::Init",
                  { "Fn::Sub" : "action=cfn-init.exe --verbose --configsets All --stack ${AWS::StackId} --resource Instance01B --region ${AWS::Region}" }
                ]]}
              }
            },
            "services" : {
              "windows" : {
                "cfn-hup" : {
                  "enabled" : "true",
                  "ensureRunning" : "true",
                  "files" : [
                    "c:\\cfn\\cfn-hup.conf",
                    "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                  ]
                }
              }
            }
          },
          "ConfigureOS" : {
            "commands" : {
              "01-disable-windows-firewall" : {
                "command" : "powershell.exe -Command \"Get-NetFirewallProfile | Set-NetFirewallProfile -Enabled False\"",
                "waitAfterCompletion" : "0"
              },
              "02-set-execution-policy" : {
                "command" : "powershell.exe -Command \"Set-ExecutionPolicy RemoteSigned -Force\"",
                "waitAfterCompletion" : "0"
              }
            }
          },
          "ConfigureHostName" : {
            "commands" : {
              "01-configure-hostname" : {
                "command" : { "Fn::Sub" : "powershell.exe Rename-Computer -NewName ${GetHostName.HostName}01b -Restart" },
                "waitAfterCompletion" : "forever"
              }
            }
          },
          "JoinDomain" : {
            "commands" : {
              "01-join-domain" : {
                "command" : { "Fn::Join" : [ "", [
                  "powershell.exe -Command \"Add-Computer -DomainName ", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCPrivateDomain" }},
                  " -Credential (New-Object System.Management.Automation.PSCredential('", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCNetBIOSDomain" }}, "\\", { "Ref" : "DomainAdminUser" }, "',(ConvertTo-SecureString '", { "Ref" : "DomainAdminPassword" }, "' -AsPlainText -Force)))",
                  " -Restart\""
                ]]},
                "waitAfterCompletion" : "forever"
              }
            }
          },
          "InstallAtomProduct" : {
            "packages" : {
              "msi" : {
                "atom" : { "Fn::Join" : [ "", [
                  "https://", { "Fn::If" : [ "ConfigureGlobalS3", "s3", { "Fn::Sub" : "s3-${AWS::Region}" }]}, ".amazonaws.com/",
                  { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ProductsBucket" }}, "/", { "Ref" : "SharedProductFolder" }, "/", { "Ref" : "AtomProductObject" }
                ]]},

              }
            }
          },
          "InstallProduct" : {
            "packages" : {
              "msi" : {
                "placeholder" : { "Fn::Join" : [ "", [
                  "https://", { "Fn::If" : [ "ConfigureGlobalS3", "s3", { "Fn::Sub" : "s3-${AWS::Region}" }]}, ".amazonaws.com/",
                  { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ProductsBucket" }}, "/", { "Ref" : "ProductFolder" }, "/", { "Ref" : "ProductObject" }
                ]]}
              }
            }
          },
          "InstallConfiguration" : {
            "sources" : {
              "C:\\Inetpub\\wwwroot" : { "Fn::Join" : [ "", [
                "https://", { "Fn::If" : [ "ConfigureGlobalS3", "s3", { "Fn::Sub" : "s3-${AWS::Region}" }]}, ".amazonaws.com/",
                { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ConfigurationsBucket" }}, "/", { "Ref" : "ConfigurationFolder" }, "/", { "Ref" : "ConfigurationObject" }
              ]]}
            }
          },
          "InstallApplication" : {
            "sources" : {
              "C:\\Inetpub\\wwwroot" : { "Fn::Join" : [ "", [
                "https://", { "Fn::If" : [ "ConfigureGlobalS3", "s3", { "Fn::Sub" : "s3-${AWS::Region}" }]}, ".amazonaws.com/",
                { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ApplicationsBucket" }}, "/", { "Ref" : "ApplicationFolder" }, "/", { "Ref" : "ApplicationObject" }
              ]]}
            }
          },
          "SignalCFN" : {
            "commands" : {
              "01-signal-success" : {
                "command" : { "Fn::Sub" : "cfn-signal.exe --exit-code 0 \"${Instance01BWaitHandle}\"" }
              }
            }
          }
        }
      },
      "Properties" : {
        "ImageId" : { "Fn::If" : [ "GetImageID", { "Fn::GetAtt" : [ "GetWindowsImageId", "ImageId" ]},
                                                 { "Fn::FindInMap" : [ "ImageIdMap", { "Ref" : "AWS::Region" }, { "Ref" : "OSDate" }]}]},
        "InstanceType" : { "Fn::FindInMap" : [ "InstanceTypeMap", "DataStaging", { "Ref" : "EnvironmentType" }]},
        "IamInstanceProfile" : { "Ref" : "InstanceProfile" },
        "KeyName" : { "Ref" : "KeyName" },
        "NetworkInterfaces" : [{
          "Description"              : { "Fn::Join" : [ "-", [ { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }}, { "Ref" : "ApplicationName" }, { "Ref" : "ComponentName" }, "NetworkInterface01B", "eth0" ]]},
          "DeviceIndex"              : "0",
          "SubnetId"                 : { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-ApplicationSubnetB" }},
          "PrivateIpAddress"         : { "Fn::If" : [ "ConfigureStaticAddress&MultiZone", { "Fn::GetAtt" : [ "AddressCalculatorB", "Address8" ]}, { "Ref" : "AWS::NoValue" }]},
          "GroupSet"                 : [
            { "Ref" :  "InstanceSecurityGroup" },
            { "Fn::ImportValue" : { "Fn::Sub" : "${ActiveDirectoryStackName}-DomainMemberSecurityGroup" }},
            { "Fn::ImportValue" : { "Fn::Sub" : "${WebSphereMQStackName}-ClientSecurityGroup" }},
            { "Fn::ImportValue" : { "Fn::Sub" : "${RabbitMQStackName}-ClientSecurityGroup" }},
            { "Fn::ImportValue" : { "Fn::Sub" : "${MongoDBStackName}-ClientSecurityGroup" }},
            { "Fn::If" : [ "ConfigureDataTransferIntegration", { "Fn::ImportValue" : { "Fn::Sub" : "${DataTransferSFTPStackName}-ClientSecurityGroup" }}, { "Ref" : "AWS::NoValue" }]},
            { "Fn::ImportValue" : { "Fn::Sub" : "${EngineMonitoringStackName}-ClientSecurityGroup" }}
          ],
          "AssociatePublicIpAddress" : "false",
          "DeleteOnTermination"      : "true"
        }],
        "BlockDeviceMappings" : [{
          "DeviceName" : "/dev/sda1",
          "Ebs" : {
            "VolumeSize" : "50"
          }
        },
        {
          "DeviceName" : "/dev/xvdb",
          "Ebs" : {
            "VolumeSize" : "100",
            "VolumeType" : "gp2",
            "DeleteOnTermination" : "false"
          }
        }],
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }}, { "Ref" : "ApplicationName" }, { "Ref" : "ComponentName" }, "Instance01B" ]]}},
          { "Key" : "HostName", "Value" : { "Fn::Sub" : "${GetHostName.HostName}01b" }},
          { "Fn::If" : [ "ConfigureSchedule", { "Key" : "Schedule", "Value" : { "Ref" : "Schedule" }}, { "Ref" : "AWS::NoValue" }]}
        ],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : [ "\n", [
          "<script>",
          { "Fn::Sub" : "cfn-init.exe --verbose --configsets All --stack ${AWS::StackId} --resource Instance01B --region ${AWS::Region}" },
          "</script>"
        ]]}}
      },
      "Condition" : "ConfigureMultiZone"
    },

    "Instance01BWaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "Properties" : {
        "Handle" : { "Ref" : "Instance01BWaitHandle" },
        "Timeout" : "3600"
      },
      "DependsOn" : "Instance01B",
      "Condition" : "ConfigureMultiZone"
    },

    "Instance01BWaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle",
      "Condition" : "ConfigureMultiZone"
    },

    "Instance02B" : {
      "Type" : "AWS::EC2::Instance",
      "Metadata" : {
        "AWS::CloudFormation::Authentication" : {
          "S3Credentials" : {
            "type" : "S3",
            "roleName" : { "Ref" : "Role" },
            "buckets" : [
              { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ScriptsBucket" }},
              { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ProductsBucket" }},
              { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ConfigurationsBucket" }},
              { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ApplicationsBucket" }}
            ]
          }
        },
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "All" : [
              { "Fn::If" : [ "ConfigureLogs", "ConfigureLogs", { "Ref": "AWS::NoValue" }]},
              "ConfigureCFN",
              "ConfigureOS",
              "ConfigureHostName",
              "JoinDomain",
              { "Fn::If" : [ "InstallAtomProduct", "InstallAtomProduct", { "Ref": "AWS::NoValue" }]},
              { "Fn::If" : [ "InstallProduct", "InstallProduct", { "Ref": "AWS::NoValue" }]},
              { "Fn::If" : [ "InstallConfiguration", "InstallConfiguration", { "Ref": "AWS::NoValue" }]},
              { "Fn::If" : [ "InstallApplication", "InstallApplication", { "Ref": "AWS::NoValue" }]},
              "SignalCFN"
            ]
          },
          "ConfigureLogs" : {
            "files" : {
              "C:\\Program Files\\Amazon\\SSM\\Plugins\\awsCloudWatch\\AWS.EC2.Windows.CloudWatch.json" : {
                "content" : { "Fn::Join" : [ "", [
                  "{",
                  "  \"IsEnabled\" : true,",
                  "  \"EngineConfiguration\" : {",
                  "    \"PollInterval\" : \"00:00:10\",",
                  "    \"Components\" : [{",
                  "      \"Id\" : \"ApplicationEventLog\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.EventLog.EventLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"LogName\" : \"Application\",",
                  "        \"Levels\" : \"7\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"SystemEventLog\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.EventLog.EventLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"LogName\" : \"System\",",
                  "        \"Levels\" : \"7\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"SecurityEventLog\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.EventLog.EventLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"LogName\" : \"Security\",",
                  "        \"Levels\" : \"7\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"EC2ConfigLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"LogDirectoryPath\": \"C:\\\\Program Files\\\\Amazon\\\\Ec2ConfigService\\\\Logs\",",
                  "        \"TimestampFormat\": \"yyyy-MM-ddTHH:mm:ss.fffZ:\",",
                  "        \"Encoding\": \"ASCII\",",
                  "        \"Filter\": \"EC2ConfigLog.txt\",",
                  "        \"CultureName\": \"en-US\",",
                  "        \"TimeZoneKind\": \"UTC\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CfnInitLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"LogDirectoryPath\": \"C:\\\\cfn\\\\log\",",
                  "        \"TimestampFormat\": \"yyyy-MM-dd HH:mm:ss,fff\",",
                  "        \"Encoding\": \"ASCII\",",
                  "        \"Filter\": \"cfn-init.log\",",
                  "        \"CultureName\": \"en-US\",",
                  "        \"TimeZoneKind\": \"Local\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"IISLogs\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"LogDirectoryPath\" : \"C:\\\\inetpub\\\\logs\\\\LogFiles\\\\W3SVC1\",",
                  "        \"TimestampFormat\" : \"yyyy-MM-dd HH:mm:ss\",",
                  "        \"Encoding\" : \"UTF-8\",",
                  "        \"Filter\" : \"\",",
                  "        \"CultureName\" : \"en-US\",",
                  "        \"TimeZoneKind\" : \"UTC\",",
                  "        \"LineCount\" : \"3\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"MemoryPerformanceCounter\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.PerformanceCounterComponent.PerformanceCounterInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"CategoryName\" : \"Memory\",",
                  "        \"CounterName\" : \"Available MBytes\",",
                  "        \"InstanceName\" : \"\",",
                  "        \"MetricName\" : \"Memory\",",
                  "        \"Unit\" : \"Megabytes\",",
                  "        \"DimensionName\" : \"\",",
                  "        \"DimensionValue\" : \"\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchApplicationEventLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"DataStaging/{instance_id}/ApplicationEventLog\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchSystemEventLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"DataStaging/{instance_id}/SystemEventLog\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchSecurityEventLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"DataStaging/{instance_id}/SecurityEventLog\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchEC2ConfigLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"DataStaging/{instance_id}/EC2ConfigLog\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchCfnInitLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"DataStaging/{instance_id}/CfnInitLog\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchIISLogs\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"DataStaging/{instance_id}/IISLogs\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"CloudWatch\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.CloudWatch.CloudWatchOutputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"AccessKey\" : \"\",",
                  "        \"SecretKey\" : \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                  "        \"NameSpace\" : \"Windows/Default\"",
                  "      }",
                  "    }],",
                  "    \"Flows\": {",
                  "      \"Flows\": [",
                  "        \"ApplicationEventLog,CloudWatchApplicationEventLog\",",
                  "        \"SystemEventLog,CloudWatchSystemEventLog\",",
                  "        \"SecurityEventLog,CloudWatchSecurityEventLog\",",
                  "        \"EC2ConfigLog,CloudWatchEC2ConfigLog\",",
                  "        \"CfnInitLog,CloudWatchCfnInitLog\",",
                  "        \"IISLogs,CloudWatchIISLogs\",",
                  "        \"MemoryPerformanceCounter,CloudWatch\"",
                  "      ]",
                  "    }",
                  "  }",
                  "}"
                ]]}
              }
            },
            "commands" : {
              "01-enable-SSM" : {
                "command" : "powershell.exe -Command \"Set-Service -Name AmazonSSMAgent -StartupType Automatic\"",
                "waitAfterCompletion" : "0"
              },
              "02-restart-SSM" : {
                "command" : "powershell.exe -Command \"Restart-Service AmazonSSMAgent\"",
                "waitAfterCompletion" : "30"
              }
            }
          },
          "ConfigureCFN" : {
            "files" : {
              "c:\\cfn\\cfn-hup.conf" : {
                "content" : { "Fn::Join" : [ "\n", [
                  "[main]",
                  { "Fn::Sub" : "stack=${AWS::StackId}" },
                  { "Fn::Sub" : "region=${AWS::Region}" }
                  ]]}
              },
              "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf" : {
                "content": { "Fn::Join" : [ "\n", [
                  "[cfn-auto-reloader-hook]",
                  "triggers=post.update",
                  "path=Resources.Instance02B.Metadata.AWS::CloudFormation::Init",
                  { "Fn::Sub" : "action=cfn-init.exe --verbose --configsets All --stack ${AWS::StackId} --resource Instance02B --region ${AWS::Region}" }
                ]]}
              }
            },
            "services" : {
              "windows" : {
                "cfn-hup" : {
                  "enabled" : "true",
                  "ensureRunning" : "true",
                  "files" : [
                    "c:\\cfn\\cfn-hup.conf",
                    "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                  ]
                }
              }
            }
          },
          "ConfigureOS" : {
            "commands" : {
              "01-disable-windows-firewall" : {
                "command" : "powershell.exe -Command \"Get-NetFirewallProfile | Set-NetFirewallProfile -Enabled False\"",
                "waitAfterCompletion" : "0"
              },
              "02-set-execution-policy" : {
                "command" : "powershell.exe -Command \"Set-ExecutionPolicy RemoteSigned -Force\"",
                "waitAfterCompletion" : "0"
              }
            }
          },
          "ConfigureHostName" : {
            "commands" : {
              "01-configure-hostname" : {
                "command" : { "Fn::Sub" : "powershell.exe Rename-Computer -NewName ${GetHostName.HostName}02b -Restart" },
                "waitAfterCompletion" : "forever"
              }
            }
          },
          "JoinDomain" : {
            "commands" : {
              "01-join-domain" : {
                "command" : { "Fn::Join" : [ "", [
                  "powershell.exe -Command \"Add-Computer -DomainName ", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCPrivateDomain" }},
                  " -Credential (New-Object System.Management.Automation.PSCredential('", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCNetBIOSDomain" }}, "\\", { "Ref" : "DomainAdminUser" }, "',(ConvertTo-SecureString '", { "Ref" : "DomainAdminPassword" }, "' -AsPlainText -Force)))",
                  " -Restart\""
                ]]},
                "waitAfterCompletion" : "forever"
              }
            }
          },
          "InstallAtomProduct" : {
            "packages" : {
              "msi" : {
                "atom" : { "Fn::Join" : [ "", [
                  "https://", { "Fn::If" : [ "ConfigureGlobalS3", "s3", { "Fn::Sub" : "s3-${AWS::Region}" }]}, ".amazonaws.com/",
                  { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ProductsBucket" }}, "/", { "Ref" : "SharedProductFolder" }, "/", { "Ref" : "AtomProductObject" }
                ]]},

              }
            }
          },
          "InstallProduct" : {
            "packages" : {
              "msi" : {
                "placeholder" : { "Fn::Join" : [ "", [
                  "https://", { "Fn::If" : [ "ConfigureGlobalS3", "s3", { "Fn::Sub" : "s3-${AWS::Region}" }]}, ".amazonaws.com/",
                  { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ProductsBucket" }}, "/", { "Ref" : "ProductFolder" }, "/", { "Ref" : "ProductObject" }
                ]]}
              }
            }
          },
          "InstallConfiguration" : {
            "sources" : {
              "C:\\Inetpub\\wwwroot" : { "Fn::Join" : [ "", [
                "https://", { "Fn::If" : [ "ConfigureGlobalS3", "s3", { "Fn::Sub" : "s3-${AWS::Region}" }]}, ".amazonaws.com/",
                { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ConfigurationsBucket" }}, "/", { "Ref" : "ConfigurationFolder" }, "/", { "Ref" : "ConfigurationObject" }
              ]]}
            }
          },
          "InstallApplication" : {
            "sources" : {
              "C:\\Inetpub\\wwwroot" : { "Fn::Join" : [ "", [
                "https://", { "Fn::If" : [ "ConfigureGlobalS3", "s3", { "Fn::Sub" : "s3-${AWS::Region}" }]}, ".amazonaws.com/",
                { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ApplicationsBucket" }}, "/", { "Ref" : "ApplicationFolder" }, "/", { "Ref" : "ApplicationObject" }
              ]]}
            }
          },
          "SignalCFN" : {
            "commands" : {
              "01-signal-success" : {
                "command" : { "Fn::Sub" : "cfn-signal.exe --exit-code 0 \"${Instance02BWaitHandle}\"" }
              }
            }
          }
        }
      },
      "Properties" : {
        "ImageId" : { "Fn::If" : [ "GetImageID", { "Fn::GetAtt" : [ "GetWindowsImageId", "ImageId" ]},
                                                 { "Fn::FindInMap" : [ "ImageIdMap", { "Ref" : "AWS::Region" }, { "Ref" : "OSDate" }]}]},
        "InstanceType" : { "Fn::FindInMap" : [ "InstanceTypeMap", "DataStaging", { "Ref" : "EnvironmentType" }]},
        "IamInstanceProfile" : { "Ref" : "InstanceProfile" },
        "KeyName" : { "Ref" : "KeyName" },
        "NetworkInterfaces" : [{
          "Description"              : { "Fn::Join" : [ "-", [ { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }}, { "Ref" : "ApplicationName" }, { "Ref" : "ComponentName" }, "NetworkInterface02B", "eth0" ]]},
          "DeviceIndex"              : "0",
          "SubnetId"                 : { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-ApplicationSubnetB" }},
          "PrivateIpAddress"         : { "Fn::If" : [ "ConfigureStaticAddress&MultiZone", { "Fn::GetAtt" : [ "AddressCalculatorB", "Address9" ]}, { "Ref" : "AWS::NoValue" }]},
          "GroupSet"                 : [
            { "Ref" :  "InstanceSecurityGroup" },
            { "Fn::ImportValue" : { "Fn::Sub" : "${ActiveDirectoryStackName}-DomainMemberSecurityGroup" }},
            { "Fn::ImportValue" : { "Fn::Sub" : "${WebSphereMQStackName}-ClientSecurityGroup" }},
            { "Fn::ImportValue" : { "Fn::Sub" : "${RabbitMQStackName}-ClientSecurityGroup" }},
            { "Fn::ImportValue" : { "Fn::Sub" : "${MongoDBStackName}-ClientSecurityGroup" }},
            { "Fn::If" : [ "ConfigureDataTransferIntegration", { "Fn::ImportValue" : { "Fn::Sub" : "${DataTransferSFTPStackName}-ClientSecurityGroup" }}, { "Ref" : "AWS::NoValue" }]},
            { "Fn::ImportValue" : { "Fn::Sub" : "${EngineMonitoringStackName}-ClientSecurityGroup" }}
          ],
          "AssociatePublicIpAddress" : "false",
          "DeleteOnTermination"      : "true"
        }],
        "BlockDeviceMappings" : [{
          "DeviceName" : "/dev/sda1",
          "Ebs" : {
            "VolumeSize" : "50"
          }
        },
        {
          "DeviceName" : "/dev/xvdb",
          "Ebs" : {
            "VolumeSize" : "100",
            "VolumeType" : "gp2",
            "DeleteOnTermination" : "false"
          }
        }],
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }}, { "Ref" : "ApplicationName" }, { "Ref" : "ComponentName" }, "Instance02B" ]]}},
          { "Key" : "HostName", "Value" : { "Fn::Sub" : "${GetHostName.HostName}02b" }},
          { "Fn::If" : [ "ConfigureSchedule", { "Key" : "Schedule", "Value" : { "Ref" : "Schedule" }}, { "Ref" : "AWS::NoValue" }]}
        ],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : [ "\n", [
          "<script>",
          { "Fn::Sub" : "cfn-init.exe --verbose --configsets All --stack ${AWS::StackId} --resource Instance02B --region ${AWS::Region}" },
          "</script>"
        ]]}}
      },
      "Condition" : "ConfigureMultiZone"
    },

    "Instance02BWaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "Properties" : {
        "Handle" : { "Ref" : "Instance02BWaitHandle" },
        "Timeout" : "3600"
      },
      "DependsOn" : "Instance02B",
      "Condition" : "ConfigureMultiZone"
    },

    "Instance02BWaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle",
      "Condition" : "ConfigureMultiZone"
    },

    "Instance03B" : {
      "Type" : "AWS::EC2::Instance",
      "Metadata" : {
        "AWS::CloudFormation::Authentication" : {
          "S3Credentials" : {
            "type" : "S3",
            "roleName" : { "Ref" : "Role" },
            "buckets" : [
              { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ScriptsBucket" }},
              { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ProductsBucket" }},
              { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ConfigurationsBucket" }},
              { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ApplicationsBucket" }}
            ]
          }
        },
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "All" : [
              { "Fn::If" : [ "ConfigureLogs", "ConfigureLogs", { "Ref": "AWS::NoValue" }]},
              "ConfigureCFN",
              "ConfigureOS",
              "ConfigureHostName",
              "JoinDomain",
              { "Fn::If" : [ "InstallAtomProduct", "InstallAtomProduct", { "Ref": "AWS::NoValue" }]},
              { "Fn::If" : [ "InstallProduct", "InstallProduct", { "Ref": "AWS::NoValue" }]},
              { "Fn::If" : [ "InstallConfiguration", "InstallConfiguration", { "Ref": "AWS::NoValue" }]},
              { "Fn::If" : [ "InstallApplication", "InstallApplication", { "Ref": "AWS::NoValue" }]},
              "SignalCFN"
            ]
          },
          "ConfigureLogs" : {
            "files" : {
              "C:\\Program Files\\Amazon\\SSM\\Plugins\\awsCloudWatch\\AWS.EC2.Windows.CloudWatch.json" : {
                "content" : { "Fn::Join" : [ "", [
                  "{",
                  "  \"IsEnabled\" : true,",
                  "  \"EngineConfiguration\" : {",
                  "    \"PollInterval\" : \"00:00:10\",",
                  "    \"Components\" : [{",
                  "      \"Id\" : \"ApplicationEventLog\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.EventLog.EventLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"LogName\" : \"Application\",",
                  "        \"Levels\" : \"7\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"SystemEventLog\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.EventLog.EventLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"LogName\" : \"System\",",
                  "        \"Levels\" : \"7\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"SecurityEventLog\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.EventLog.EventLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"LogName\" : \"Security\",",
                  "        \"Levels\" : \"7\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"EC2ConfigLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"LogDirectoryPath\": \"C:\\\\Program Files\\\\Amazon\\\\Ec2ConfigService\\\\Logs\",",
                  "        \"TimestampFormat\": \"yyyy-MM-ddTHH:mm:ss.fffZ:\",",
                  "        \"Encoding\": \"ASCII\",",
                  "        \"Filter\": \"EC2ConfigLog.txt\",",
                  "        \"CultureName\": \"en-US\",",
                  "        \"TimeZoneKind\": \"UTC\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CfnInitLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"LogDirectoryPath\": \"C:\\\\cfn\\\\log\",",
                  "        \"TimestampFormat\": \"yyyy-MM-dd HH:mm:ss,fff\",",
                  "        \"Encoding\": \"ASCII\",",
                  "        \"Filter\": \"cfn-init.log\",",
                  "        \"CultureName\": \"en-US\",",
                  "        \"TimeZoneKind\": \"Local\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"IISLogs\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"LogDirectoryPath\" : \"C:\\\\inetpub\\\\logs\\\\LogFiles\\\\W3SVC1\",",
                  "        \"TimestampFormat\" : \"yyyy-MM-dd HH:mm:ss\",",
                  "        \"Encoding\" : \"UTF-8\",",
                  "        \"Filter\" : \"\",",
                  "        \"CultureName\" : \"en-US\",",
                  "        \"TimeZoneKind\" : \"UTC\",",
                  "        \"LineCount\" : \"3\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"MemoryPerformanceCounter\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.PerformanceCounterComponent.PerformanceCounterInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"CategoryName\" : \"Memory\",",
                  "        \"CounterName\" : \"Available MBytes\",",
                  "        \"InstanceName\" : \"\",",
                  "        \"MetricName\" : \"Memory\",",
                  "        \"Unit\" : \"Megabytes\",",
                  "        \"DimensionName\" : \"\",",
                  "        \"DimensionValue\" : \"\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchApplicationEventLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"DataStaging/{instance_id}/ApplicationEventLog\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchSystemEventLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"DataStaging/{instance_id}/SystemEventLog\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchSecurityEventLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"DataStaging/{instance_id}/SecurityEventLog\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchEC2ConfigLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"DataStaging/{instance_id}/EC2ConfigLog\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchCfnInitLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"DataStaging/{instance_id}/CfnInitLog\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchIISLogs\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"DataStaging/{instance_id}/IISLogs\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"CloudWatch\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.CloudWatch.CloudWatchOutputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"AccessKey\" : \"\",",
                  "        \"SecretKey\" : \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                  "        \"NameSpace\" : \"Windows/Default\"",
                  "      }",
                  "    }],",
                  "    \"Flows\": {",
                  "      \"Flows\": [",
                  "        \"ApplicationEventLog,CloudWatchApplicationEventLog\",",
                  "        \"SystemEventLog,CloudWatchSystemEventLog\",",
                  "        \"SecurityEventLog,CloudWatchSecurityEventLog\",",
                  "        \"EC2ConfigLog,CloudWatchEC2ConfigLog\",",
                  "        \"CfnInitLog,CloudWatchCfnInitLog\",",
                  "        \"IISLogs,CloudWatchIISLogs\",",
                  "        \"MemoryPerformanceCounter,CloudWatch\"",
                  "      ]",
                  "    }",
                  "  }",
                  "}"
                ]]}
              }
            },
            "commands" : {
              "01-enable-SSM" : {
                "command" : "powershell.exe -Command \"Set-Service -Name AmazonSSMAgent -StartupType Automatic\"",
                "waitAfterCompletion" : "0"
              },
              "02-restart-SSM" : {
                "command" : "powershell.exe -Command \"Restart-Service AmazonSSMAgent\"",
                "waitAfterCompletion" : "30"
              }
            }
          },
          "ConfigureCFN" : {
            "files" : {
              "c:\\cfn\\cfn-hup.conf" : {
                "content" : { "Fn::Join" : [ "\n", [
                  "[main]",
                  { "Fn::Sub" : "stack=${AWS::StackId}" },
                  { "Fn::Sub" : "region=${AWS::Region}" }
                  ]]}
              },
              "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf" : {
                "content": { "Fn::Join" : [ "\n", [
                  "[cfn-auto-reloader-hook]",
                  "triggers=post.update",
                  "path=Resources.Instance03B.Metadata.AWS::CloudFormation::Init",
                  { "Fn::Sub" : "action=cfn-init.exe --verbose --configsets All --stack ${AWS::StackId} --resource Instance03B --region ${AWS::Region}" }
                ]]}
              }
            },
            "services" : {
              "windows" : {
                "cfn-hup" : {
                  "enabled" : "true",
                  "ensureRunning" : "true",
                  "files" : [
                    "c:\\cfn\\cfn-hup.conf",
                    "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                  ]
                }
              }
            }
          },
          "ConfigureOS" : {
            "commands" : {
              "01-disable-windows-firewall" : {
                "command" : "powershell.exe -Command \"Get-NetFirewallProfile | Set-NetFirewallProfile -Enabled False\"",
                "waitAfterCompletion" : "0"
              },
              "02-set-execution-policy" : {
                "command" : "powershell.exe -Command \"Set-ExecutionPolicy RemoteSigned -Force\"",
                "waitAfterCompletion" : "0"
              }
            }
          },
          "ConfigureHostName" : {
            "commands" : {
              "01-configure-hostname" : {
                "command" : { "Fn::Sub" : "powershell.exe Rename-Computer -NewName ${GetHostName.HostName}03b -Restart" },
                "waitAfterCompletion" : "forever"
              }
            }
          },
          "JoinDomain" : {
            "commands" : {
              "01-join-domain" : {
                "command" : { "Fn::Join" : [ "", [
                  "powershell.exe -Command \"Add-Computer -DomainName ", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCPrivateDomain" }},
                  " -Credential (New-Object System.Management.Automation.PSCredential('", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCNetBIOSDomain" }}, "\\", { "Ref" : "DomainAdminUser" }, "',(ConvertTo-SecureString '", { "Ref" : "DomainAdminPassword" }, "' -AsPlainText -Force)))",
                  " -Restart\""
                ]]},
                "waitAfterCompletion" : "forever"
              }
            }
          },
          "InstallAtomProduct" : {
            "packages" : {
              "msi" : {
                "atom" : { "Fn::Join" : [ "", [
                  "https://", { "Fn::If" : [ "ConfigureGlobalS3", "s3", { "Fn::Sub" : "s3-${AWS::Region}" }]}, ".amazonaws.com/",
                  { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ProductsBucket" }}, "/", { "Ref" : "SharedProductFolder" }, "/", { "Ref" : "AtomProductObject" }
                ]]},

              }
            }
          },
          "InstallProduct" : {
            "packages" : {
              "msi" : {
                "placeholder" : { "Fn::Join" : [ "", [
                  "https://", { "Fn::If" : [ "ConfigureGlobalS3", "s3", { "Fn::Sub" : "s3-${AWS::Region}" }]}, ".amazonaws.com/",
                  { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ProductsBucket" }}, "/", { "Ref" : "ProductFolder" }, "/", { "Ref" : "ProductObject" }
                ]]}
              }
            }
          },
          "InstallConfiguration" : {
            "sources" : {
              "C:\\Inetpub\\wwwroot" : { "Fn::Join" : [ "", [
                "https://", { "Fn::If" : [ "ConfigureGlobalS3", "s3", { "Fn::Sub" : "s3-${AWS::Region}" }]}, ".amazonaws.com/",
                { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ConfigurationsBucket" }}, "/", { "Ref" : "ConfigurationFolder" }, "/", { "Ref" : "ConfigurationObject" }
              ]]}
            }
          },
          "InstallApplication" : {
            "sources" : {
              "C:\\Inetpub\\wwwroot" : { "Fn::Join" : [ "", [
                "https://", { "Fn::If" : [ "ConfigureGlobalS3", "s3", { "Fn::Sub" : "s3-${AWS::Region}" }]}, ".amazonaws.com/",
                { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ApplicationsBucket" }}, "/", { "Ref" : "ApplicationFolder" }, "/", { "Ref" : "ApplicationObject" }
              ]]}
            }
          },
          "SignalCFN" : {
            "commands" : {
              "01-signal-success" : {
                "command" : { "Fn::Sub" : "cfn-signal.exe --exit-code 0 \"${Instance03BWaitHandle}\"" }
              }
            }
          }
        }
      },
      "Properties" : {
        "ImageId" : { "Fn::If" : [ "GetImageID", { "Fn::GetAtt" : [ "GetWindowsImageId", "ImageId" ]},
                                                 { "Fn::FindInMap" : [ "ImageIdMap", { "Ref" : "AWS::Region" }, { "Ref" : "OSDate" }]}]},
        "InstanceType" : { "Fn::FindInMap" : [ "InstanceTypeMap", "DataStaging", { "Ref" : "EnvironmentType" }]},
        "IamInstanceProfile" : { "Ref" : "InstanceProfile" },
        "KeyName" : { "Ref" : "KeyName" },
        "NetworkInterfaces" : [{
          "Description"              : { "Fn::Join" : [ "-", [ { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }}, { "Ref" : "ApplicationName" }, { "Ref" : "ComponentName" }, "NetworkInterface03B", "eth0" ]]},
          "DeviceIndex"              : "0",
          "SubnetId"                 : { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-ApplicationSubnetB" }},
          "PrivateIpAddress"         : { "Fn::If" : [ "ConfigureStaticAddress&MultiZone", { "Fn::GetAtt" : [ "AddressCalculatorB", "Address10" ]}, { "Ref" : "AWS::NoValue" }]},
          "GroupSet"                 : [
            { "Ref" :  "InstanceSecurityGroup" },
            { "Fn::ImportValue" : { "Fn::Sub" : "${ActiveDirectoryStackName}-DomainMemberSecurityGroup" }},
            { "Fn::ImportValue" : { "Fn::Sub" : "${WebSphereMQStackName}-ClientSecurityGroup" }},
            { "Fn::ImportValue" : { "Fn::Sub" : "${RabbitMQStackName}-ClientSecurityGroup" }},
            { "Fn::ImportValue" : { "Fn::Sub" : "${MongoDBStackName}-ClientSecurityGroup" }},
            { "Fn::If" : [ "ConfigureDataTransferIntegration", { "Fn::ImportValue" : { "Fn::Sub" : "${DataTransferSFTPStackName}-ClientSecurityGroup" }}, { "Ref" : "AWS::NoValue" }]},
            { "Fn::ImportValue" : { "Fn::Sub" : "${EngineMonitoringStackName}-ClientSecurityGroup" }}
          ],
          "AssociatePublicIpAddress" : "false",
          "DeleteOnTermination"      : "true"
        }],
        "BlockDeviceMappings" : [{
          "DeviceName" : "/dev/sda1",
          "Ebs" : {
            "VolumeSize" : "50"
          }
        },
        {
          "DeviceName" : "/dev/xvdb",
          "Ebs" : {
            "VolumeSize" : "100",
            "VolumeType" : "gp2",
            "DeleteOnTermination" : "false"
          }
        }],
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }}, { "Ref" : "ApplicationName" }, { "Ref" : "ComponentName" }, "Instance03B" ]]}},
          { "Key" : "HostName", "Value" : { "Fn::Sub" : "${GetHostName.HostName}03b" }},
          { "Fn::If" : [ "ConfigureSchedule", { "Key" : "Schedule", "Value" : { "Ref" : "Schedule" }}, { "Ref" : "AWS::NoValue" }]}
        ],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : [ "\n", [
          "<script>",
          { "Fn::Sub" : "cfn-init.exe --verbose --configsets All --stack ${AWS::StackId} --resource Instance03B --region ${AWS::Region}" },
          "</script>"
        ]]}}
      },
      "Condition" : "ConfigureMultiZone"
    },

    "Instance03BWaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "Properties" : {
        "Handle" : { "Ref" : "Instance03BWaitHandle" },
        "Timeout" : "3600"
      },
      "DependsOn" : "Instance03B",
      "Condition" : "ConfigureMultiZone"
    },

    "Instance03BWaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle",
      "Condition" : "ConfigureMultiZone"
    }
  },

  "Outputs" : {
    "ClientSecurityGroup" : {
      "Description" : "The Client SecurityGroup",
      "Value" : { "Ref" : "ClientSecurityGroup" },
      "Export" : { "Name" : { "Fn::Sub" : "${AWS::StackName}-ClientSecurityGroup" }}
    },

    "InstanceSecurityGroup" : {
      "Description" : "The Instance SecurityGroup",
      "Value" : { "Ref" : "InstanceSecurityGroup" },
      "Export" : { "Name" : { "Fn::Sub" : "${AWS::StackName}-InstanceSecurityGroup" }}
    },

    "Instance01A" : {
      "Description" : "The Instance01A",
      "Value" : { "Ref" : "Instance01A" }
    },

    "HostName01A" : {
      "Description" : "The HostName01A",
      "Value" : { "Fn::Join" : [ "", [ { "Fn::GetAtt" : [ "GetHostName", "HostName" ]}, "01a.", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCPrivateDomain" }}]]}
    },

    "Instance02A" : {
      "Description" : "The Instance02A",
      "Value" : { "Ref" : "Instance02A" }
    },

    "HostName02A" : {
      "Description" : "The HostName02A",
      "Value" : { "Fn::Join" : [ "", [ { "Fn::GetAtt" : [ "GetHostName", "HostName" ]}, "02a.", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCPrivateDomain" }}]]}
    },

    "Instance03A" : {
      "Description" : "The Instance03A",
      "Value" : { "Ref" : "Instance03A" }
    },

    "HostName03A" : {
      "Description" : "The HostName03A",
      "Value" : { "Fn::Join" : [ "", [ { "Fn::GetAtt" : [ "GetHostName", "HostName" ]}, "03a.", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCPrivateDomain" }}]]}
    },

    "Instance01B" : {
      "Description" : "The Instance01B",
      "Value" : { "Ref" : "Instance01B" },
      "Condition" : "ConfigureMultiZone"
    },

    "HostName01B" : {
      "Description" : "The HostName01B",
      "Value" : { "Fn::Join" : [ "", [ { "Fn::GetAtt" : [ "GetHostName", "HostName" ]}, "01b.", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCPrivateDomain" }}]]},
      "Condition" : "ConfigureMultiZone"
    },

    "Instance02B" : {
      "Description" : "The Instance02B",
      "Value" : { "Ref" : "Instance02B" },
      "Condition" : "ConfigureMultiZone"
    },

    "HostName02B" : {
      "Description" : "The HostName02B",
      "Value" : { "Fn::Join" : [ "", [ { "Fn::GetAtt" : [ "GetHostName", "HostName" ]}, "02b.", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCPrivateDomain" }}]]},
      "Condition" : "ConfigureMultiZone"
    },

    "Instance03B" : {
      "Description" : "The Instance03B",
      "Value" : { "Ref" : "Instance03B" },
      "Condition" : "ConfigureMultiZone"
    },

    "HostName03B" : {
      "Description" : "The HostName03B",
      "Value" : { "Fn::Join" : [ "", [ { "Fn::GetAtt" : [ "GetHostName", "HostName" ]}, "03b.", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCPrivateDomain" }}]]},
      "Condition" : "ConfigureMultiZone"
    }
  }
}
