{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Application-Engine-DataStaging Template. This is a layer in the Engine application, which creates the InstanceProfile, and separate InventoryDetail, FLIFO, Schedule, ETicket, PNR and ACI Data Staging Instances.",

  "Metadata" : {
    "AWS::CloudFormation::Interface" : {
      "ParameterGroups" : [
        {
          "Label" : { "default" : "Stack Dependencies" },
          "Parameters" : [
            "VPCStackName",
            "CustomIdentifierFunctionsStackName",
            "StandardCIDRFunctionsStackName",
            "StandardAMIFunctionsStackName",
            "StandardBucketsStackName",
            "StandardTopicsStackName"
          ]
        },
        {
          "Label" : { "default" : "Resource Dependencies" },
          "Parameters" : [
            "KeyName",
            "DataStagingRole",
            "LogGroup",
            "DataStagingInstanceSecurityGroup"
          ]
        },
        {
          "Label" : { "default" : "System Configuration" },
          "Parameters" : [
            "CompanyName",
            "SystemName"
          ]
        },
        {
          "Label" : { "default" : "Environment Configuration" },
          "Parameters" : [
            "EnvironmentType",
            "WindowsOSName"
          ]
        },
        {
          "Label" : { "default" : "Application Dependencies Configuration" },
          "Parameters" : [
            "ProductFolder",
            "DataStagingProductObject",
            "ConfigurationFolder",
            "DataStagingConfigurationObject"
          ]
        },
        {
          "Label" : { "default" : "Application Configuration" },
          "Parameters" : [
            "ApplicationFolder",
            "DataStagingApplicationObject",
            "ApplicationName",
            "ApplicationVersion",
            "UseStaticAddress",
            "LogRetention",
            "Schedule"
          ]
        }
      ],

      "ParameterLabels" : {
        "VPCStackName" : { "default" : "VPC Stack Name" },
        "CustomIdentifierFunctionsStackName" : { "default" : "CustomIdentifierFunctions Stack Name" },
        "StandardCIDRFunctionsStackName" : { "default" : "StandardCIDRFunctions Stack Name" },
        "StandardAMIFunctionsStackName" : { "default" : "StandardAMIFunctions Stack Name" },
        "StandardBucketsStackName" : { "default" : "StandardBuckets Stack Name" },
        "StandardTopicsStackName" : { "default" : "StandardTopics Stack Name" },
        "KeyName" : { "default" : "Key Name" },
        "DataStagingRole" : { "default" : "DataStagingRole" },
        "LogGroup" : { "default" : "LogGroup" },
        "DataStagingInstanceSecurityGroup" : { "default" : "DataStagingInstance SecurityGroup" },
        "CompanyName" : { "default" : "Company Name" },
        "SystemName" : { "default" : "System Name" },
        "EnvironmentType" : { "default" : "Environment Type" },
        "WindowsOSName" : { "default" : "Windows Operating System Name" },
        "ProductFolder" : { "default" : "Product Folder" },
        "DataStagingProductObject" : { "default" : "DataStaging Product Object" },
        "ConfigurationFolder" : { "default" : "Configuration Folder" },
        "DataStagingConfigurationObject" : { "default" : "DataStaging Configuration Object" },
        "ApplicationFolder" : { "default" : "Application Folder" },
        "DataStagingApplicationObject" : { "default" : "DataStaging Application Object" },
        "ApplicationName" : { "default" : "Application Name" },
        "ApplicationVersion" : { "default" : "Application Version" },
        "UseStaticAddress" : { "default" : "Use Static Address" },
        "LogRetention" : { "default" : "Log Retention" },
        "Schedule" : { "default" : "Schedule" }
      }
    }
  },

  "Parameters" : {
    "VPCStackName" : {
      "Description" : "Name of the CloudFormation Stack containing the VPC",
      "Type" : "String",
      "MinLength" : 8,
      "MaxLength" : 64,
      "Default" : "Production-VPC",
      "AllowedPattern" : "^[A-Z][-a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters and dashes."
    },

    "CustomIdentifierFunctionsStackName" : {
      "Description" : "Name of the CloudFormation Stack containing the Custom Identifier Functions",
      "Type" : "String",
      "MaxLength" : 64,
      "Default" : "CustomIdentifierFunctions",
      "AllowedPattern" : "(^$|^[A-Z][-a-zA-Z0-9]*$)",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters and dashes."
    },

    "StandardCIDRFunctionsStackName" : {
      "Description" : "Name of the CloudFormation Stack containing the Standard CIDR Functions",
      "Type" : "String",
      "MaxLength" : 64,
      "Default" : "StandardCIDRFunctions",
      "AllowedPattern" : "(^$|^[A-Z][-a-zA-Z0-9]*$)",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters and dashes."
    },

    "StandardAMIFunctionsStackName" : {
      "Description" : "Name of the CloudFormation Stack containing the Standard AMI Functions",
      "Type" : "String",
      "MaxLength" : 64,
      "Default" : "StandardAMIFunctions",
      "AllowedPattern" : "(^$|^[A-Z][-a-zA-Z0-9]*$)",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters and dashes."
    },

    "StandardBucketsStackName" : {
      "Description" : "Name of the CloudFormation Stack containing Standard Buckets",
      "Type" : "String",
      "MinLength" : 2,
      "MaxLength" : 64,
      "Default" : "StandardBuckets",
      "AllowedPattern" : "^[A-Z][-a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters and dashes."
    },

    "StandardTopicsStackName" : {
      "Description" : "Name of the CloudFormation Stack containing Standard Topics",
      "Type" : "String",
      "MinLength" : 2,
      "MaxLength" : 64,
      "Default" : "StandardTopics",
      "AllowedPattern" : "^[A-Z][-a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters and dashes."
    },

    "KeyName" : {
      "Description" : "Name of an existing KeyPair to enable SSH access to the Instances",
      "Type" : "AWS::EC2::KeyPair::KeyName",
      "MaxLength" : 32,
      "Default" : "administrator",
      "AllowedPattern" : "(^$|^[_a-zA-Z0-9]*$)",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    },

    "DataStagingRole" : {
      "Description" : "Name of an existing Role which provides permissions needed by the DataStagingInstance",
      "Type" : "String",
      "MaxLength" : 128,
      "AllowedPattern" : "^[-a-zA-Z0-9]*$",
      "ConstraintDescription" : "must be the name of an existing Role."
    },

    "LogGroup" : {
      "Description" : "Name of an existing LogGroup which provides access to CloudWatch Logs",
      "Type" : "String",
      "MaxLength" : 128,
      "AllowedPattern" : "^[-a-zA-Z0-9]*$",
      "ConstraintDescription" : "must be the name of an existing LogGroup."
    },

    "DataStagingInstanceSecurityGroup" : {
      "Description" : "ID of an existing SecurityGroup which controls access to the DataStagingInstances",
      "Type" : "AWS::EC2::SecurityGroup::Id",
      "MaxLength" : 32,
      "AllowedPattern" : "^sg-[0-9a-f]{8}$",
      "ConstraintDescription" : "must be the name of an existing SecurityGroup."
    },

    "CompanyName" : {
      "Description" : "Name of the Company associated with the Stack",
      "Type" : "String",
      "MinLength" : 2,
      "MaxLength" : 32,
      "Default" : "Travel",
      "AllowedPattern" : "^[A-Z][a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters."
    },

    "SystemName" : {
      "Description" : "Name of the System associated with the Stack",
      "Type" : "String",
      "MinLength" : 2,
      "MaxLength" : 32,
      "Default" : "IROPS",
      "AllowedPattern" : "^[A-Z][a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters."
    },

    "EnvironmentType" : {
      "Description" : "Type of the Environment to build. Used to select size-related options in Mappings",
      "Type" : "String",
      "Default" : "small",
      "AllowedValues" : [ "small", "medium", "large", "xlarge" ],
      "ConstraintDescription" : "must be small, medium, large or xlarge."
    },

    "WindowsOSName" : {
      "Description" : "The Operating System to use for Windows Instances",
      "Type" : "String",
      "Default" : "Windows Server 2012 R2",
      "AllowedValues" : [ "Windows Server 2012 R2", "Windows Server 2016" ],
      "ConstraintDescription" : "must be \"Windows Server 2012 R2\" or \"Windows Server 2016\"."
    },

    "ProductFolder" : {
      "Description" : "Folder within the S3 Products bucket containing Products deployed by this Template",
      "Type" : "String",
      "MinLength" : 2,
      "MaxLength" : 32,
      "Default" : "Engine",
      "AllowedPattern" : "^[A-Z][a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters."
    },

    "DataStagingProductObject" : {
      "Description" : "Object within the S3 bucket and folder containing the Engine DataStaging Component installer",
      "Type" : "String",
      "MaxLength" : 64,
      "Default" : "",
      "AllowedPattern" : "(^$|^[-_.a-zA-Z0-9]*$)",
      "ConstraintDescription" : "must be a valid filename, not containing slashes."
    },

    "ConfigurationFolder" : {
      "Description" : "Folder within the S3 Configurations bucket containing Configurations deployed by this Template",
      "Type" : "String",
      "MinLength" : 2,
      "MaxLength" : 32,
      "Default" : "Engine",
      "AllowedPattern" : "^[A-Z][a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters."
    },

    "DataStagingConfigurationObject" : {
      "Description" : "Object within the S3 bucket and folder containing the Engine DataStaging Component configuration",
      "Type" : "String",
      "MaxLength" : 64,
      "Default" : "",
      "AllowedPattern" : "(^$|^[-_.a-zA-Z0-9]*$)",
      "ConstraintDescription" : "must be a valid filename, not containing slashes."
    },

    "ApplicationFolder" : {
      "Description" : "Folder within the S3 Applications bucket containing Applications deployed by this Template",
      "Type" : "String",
      "MinLength" : 2,
      "MaxLength" : 32,
      "Default" : "Engine",
      "AllowedPattern" : "^[A-Z][a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters."
    },

    "DataStagingApplicationObject" : {
      "Description" : "Object within the S3 bucket and folder containing the Engine DataStaging Component application",
      "Type" : "String",
      "MaxLength" : 64,
      "Default" : "",
      "AllowedPattern" : "(^$|^[-_.a-zA-Z0-9]*$)",
      "ConstraintDescription" : "must be a valid filename, not containing slashes."
    },

    "ApplicationName" : {
      "Description" : "Name of the Application associated with the Stack",
      "Type" : "String",
      "MinLength" : 2,
      "MaxLength" : 32,
      "Default" : "Engine",
      "AllowedPattern" : "^[A-Z][a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters."
    },

    "ApplicationVersion" : {
      "Description" : "Version of the Application",
      "Type" : "String",
      "MinLength" : 5,
      "MaxLength" : 32,
      "Default" : "1.0.0",
      "AllowedPattern" : "^[0-9]*.[0-9]*.[0-9]*(-[a-zA-Z0-9][-a-zA-Z0-9]*)?$",
      "ConstraintDescription" : "must follow semantic versioning conventions."
    },

    "UseStaticAddress" : {
      "Description" : "Create and attach a separate Static Address",
      "Type" : "String",
      "Default" : "true",
      "AllowedValues" : [ "true", "false" ],
      "ConstraintDescription" : "must be either true or false."
    },

    "LogRetention" : {
      "Description" : "Number of days to retain CloudWatch Log Events (0 disables use of CloudWatch Logs)",
      "Type" : "Number",
      "Default" : 14,
      "AllowedValues" : [ 0, 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653 ],
      "ConstraintDescription" : "must be: 0 (disabled), 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827 or 3653."
    },

    "Schedule" : {
      "Description" : "Schedule Tag Value (blank disables Scheduler)",
      "Type" : "String",
      "Default" : "",
      "AllowedPattern" : "(^$|^([0-9]|1[0-9]|2[0-3]):[0-5][0-9]-([0-9]|1[0-9]|2[0-3]):[0-5][0-9]T?$)",
      "ConstraintDescription" : "See Scheduler Lambda Function description for Tag format."
    }
  },

  "Mappings" : {
    "InstanceTypeMap" : {
      "InventoryDetail" : { "small" : "t2.large", "medium" : "r4.xlarge", "large" : "r4.2xlarge", "xlarge" : "r4.4xlarge" },
      "FLIFO"           : { "small" : "t2.large", "medium" : "r4.xlarge", "large" : "r4.2xlarge", "xlarge" : "r4.4xlarge" },
      "Schedule"        : { "small" : "t2.large", "medium" : "r4.xlarge", "large" : "r4.2xlarge", "xlarge" : "r4.4xlarge" },
      "ETicket"         : { "small" : "t2.large", "medium" : "r4.xlarge", "large" : "r4.2xlarge", "xlarge" : "r4.4xlarge" },
      "PNR"             : { "small" : "t2.large", "medium" : "r4.xlarge", "large" : "r4.2xlarge", "xlarge" : "r4.4xlarge" },
      "ACI"             : { "small" : "t2.large", "medium" : "r4.xlarge", "large" : "r4.2xlarge", "xlarge" : "r4.4xlarge" }
    }
  },

  "Conditions" : {
    "ConfigureGlobalS3" : { "Fn::Equals" : [{ "Ref" : "AWS::Region" }, "us-east-1" ]},
    "ConfigureKey" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Ref" : "KeyName" }, "" ]}]},
    "InstallProduct" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Ref" : "DataStagingProductObject" }, "" ]}]},
    "InstallConfiguration" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Ref" : "DataStagingConfigurationObject" }, "" ]}]},
    "InstallApplication" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Ref" : "DataStagingApplicationObject" }, "" ]}]},
    "ConfigureStaticAddress" : { "Fn::Equals" : [{ "Ref" : "UseStaticAddress" }, "true" ]},
    "ConfigureLogs" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Ref" : "LogRetention" }, "0" ]}]},
    "ConfigureSchedule" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Ref" : "Schedule" }, "" ]}]}
  },

  "Resources" : {
    "GetInventoryDetailHostName" : {
      "Type" : "Custom::GetHostName",
      "Properties" : {
        "ServiceToken" : { "Fn::ImportValue" : { "Fn::Sub" : "${CustomIdentifierFunctionsStackName}-GetHostNameFunctionArn" }},
        "CompanyName" : { "Ref" : "CompanyName" },
        "LocationName" : { "Ref": "AWS::Region" },
        "EnvironmentName" : { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }},
        "ApplicationName" : { "Ref" : "ApplicationName" },
        "ComponentName" : "InventoryDetail"
      }
    },

    "GetFLIFOHostName" : {
      "Type" : "Custom::GetHostName",
      "Properties" : {
        "ServiceToken" : { "Fn::ImportValue" : { "Fn::Sub" : "${CustomIdentifierFunctionsStackName}-GetHostNameFunctionArn" }},
        "CompanyName" : { "Ref" : "CompanyName" },
        "LocationName" : { "Ref": "AWS::Region" },
        "EnvironmentName" : { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }},
        "ApplicationName" : { "Ref" : "ApplicationName" },
        "ComponentName" : "FLIFO"
      }
    },

    "GetScheduleHostName" : {
      "Type" : "Custom::GetHostName",
      "Properties" : {
        "ServiceToken" : { "Fn::ImportValue" : { "Fn::Sub" : "${CustomIdentifierFunctionsStackName}-GetHostNameFunctionArn" }},
        "CompanyName" : { "Ref" : "CompanyName" },
        "LocationName" : { "Ref": "AWS::Region" },
        "EnvironmentName" : { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }},
        "ApplicationName" : { "Ref" : "ApplicationName" },
        "ComponentName" : "Schedule"
      }
    },

    "GetETicketHostName" : {
      "Type" : "Custom::GetHostName",
      "Properties" : {
        "ServiceToken" : { "Fn::ImportValue" : { "Fn::Sub" : "${CustomIdentifierFunctionsStackName}-GetHostNameFunctionArn" }},
        "CompanyName" : { "Ref" : "CompanyName" },
        "LocationName" : { "Ref": "AWS::Region" },
        "EnvironmentName" : { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }},
        "ApplicationName" : { "Ref" : "ApplicationName" },
        "ComponentName" : "ETicket"
      }
    },

    "GetPNRHostName" : {
      "Type" : "Custom::GetHostName",
      "Properties" : {
        "ServiceToken" : { "Fn::ImportValue" : { "Fn::Sub" : "${CustomIdentifierFunctionsStackName}-GetHostNameFunctionArn" }},
        "CompanyName" : { "Ref" : "CompanyName" },
        "LocationName" : { "Ref": "AWS::Region" },
        "EnvironmentName" : { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }},
        "ApplicationName" : { "Ref" : "ApplicationName" },
        "ComponentName" : "PNR"
      }
    },

    "GetACIHostName" : {
      "Type" : "Custom::GetHostName",
      "Properties" : {
        "ServiceToken" : { "Fn::ImportValue" : { "Fn::Sub" : "${CustomIdentifierFunctionsStackName}-GetHostNameFunctionArn" }},
        "CompanyName" : { "Ref" : "CompanyName" },
        "LocationName" : { "Ref": "AWS::Region" },
        "EnvironmentName" : { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }},
        "ApplicationName" : { "Ref" : "ApplicationName" },
        "ComponentName" : "ACI"
      }
    },

    "GetWindowsImageId" : {
      "Type" : "Custom::GetWindowsImageId",
      "Properties" : {
        "ServiceToken" : { "Fn::ImportValue" : { "Fn::Sub" : "${StandardAMIFunctionsStackName}-GetWindowsImageIdFunctionArn" }},
        "Region" : { "Ref" : "AWS::Region" },
        "OSName" : { "Ref" : "WindowsOSName" }
      }
    },

    "InstanceProfile" : {
      "Type" : "AWS::IAM::InstanceProfile",
      "Properties" : {
        "Path" : "/",
        "Roles" : [{ "Ref" : "DataStagingRole" }]
      }
    },

    "AddressCalculatorA" : {
      "Type" : "Custom::AddressCalculator",
      "Properties" : {
        "ServiceToken" : { "Fn::ImportValue" : { "Fn::Sub" : "${StandardCIDRFunctionsStackName}-AddressCalculatorFunctionArn" }},
        "SubnetId" : { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-ApplicationSubnetA" }}
      },
      "Condition" : "ConfigureStaticAddress"
    },

    "InventoryDetailInstance01A" : {
      "Type" : "AWS::EC2::Instance",
      "Metadata" : {
        "AWS::CloudFormation::Authentication" : {
          "S3Credentials" : {
            "type" : "S3",
            "roleName" : { "Ref" : "DataStagingRole" },
            "buckets" : [
              { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ProductsBucket" }},
              { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ConfigurationsBucket" }},
              { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ApplicationsBucket" }}
            ]
          }
        },
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "All" : [
              { "Fn::If" : [ "ConfigureLogs", "ConfigureLogs", { "Ref": "AWS::NoValue" }]},
              "ConfigureOS",
              "ConfigureCFN",
              "InstallAtomEditor",
              { "Fn::If" : [ "InstallProduct", "InstallInventoryDetailProduct", { "Ref": "AWS::NoValue" }]},
              { "Fn::If" : [ "InstallConfiguration", "InstallInventoryDetailConfiguration", { "Ref": "AWS::NoValue" }]},
              { "Fn::If" : [ "InstallApplication", "InstallInventoryDetailApplication", { "Ref": "AWS::NoValue" }]}
            ]
          },
          "ConfigureLogs" : {
            "files" : {
              "C:\\Program Files\\Amazon\\SSM\\Plugins\\awsCloudWatch\\AWS.EC2.Windows.CloudWatch.json" : {
                "content" : { "Fn::Join" : [ "", [
                  "{",
                  "  \"IsEnabled\" : true,",
                  "  \"EngineConfiguration\" : {",
                  "    \"PollInterval\" : \"00:00:10\",",
                  "    \"Components\" : [{",
                  "      \"Id\" : \"ApplicationEventLog\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.EventLog.EventLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"LogName\" : \"Application\",",
                  "        \"Levels\" : \"7\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"SystemEventLog\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.EventLog.EventLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"LogName\" : \"System\",",
                  "        \"Levels\" : \"7\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"SecurityEventLog\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.EventLog.EventLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"LogName\" : \"Security\",",
                  "        \"Levels\" : \"7\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"EC2ConfigLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"LogDirectoryPath\": \"C:\\\\Program Files\\\\Amazon\\\\Ec2ConfigService\\\\Logs\",",
                  "        \"TimestampFormat\": \"yyyy-MM-ddTHH:mm:ss.fffZ:\",",
                  "        \"Encoding\": \"ASCII\",",
                  "        \"Filter\": \"EC2ConfigLog.txt\",",
                  "        \"CultureName\": \"en-US\",",
                  "        \"TimeZoneKind\": \"UTC\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CfnInitLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"LogDirectoryPath\": \"C:\\\\cfn\\\\log\",",
                  "        \"TimestampFormat\": \"yyyy-MM-dd HH:mm:ss,fff\",",
                  "        \"Encoding\": \"ASCII\",",
                  "        \"Filter\": \"cfn-init.log\",",
                  "        \"CultureName\": \"en-US\",",
                  "        \"TimeZoneKind\": \"Local\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"MemoryPerformanceCounter\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.PerformanceCounterComponent.PerformanceCounterInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"CategoryName\" : \"Memory\",",
                  "        \"CounterName\" : \"Available MBytes\",",
                  "        \"InstanceName\" : \"\",",
                  "        \"MetricName\" : \"Memory\",",
                  "        \"Unit\" : \"Megabytes\",",
                  "        \"DimensionName\" : \"\",",
                  "        \"DimensionValue\" : \"\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchApplicationEventLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"InventoryDetail/{instance_id}/ApplicationEventLog\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchSystemEventLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"InventoryDetail/{instance_id}/SystemEventLog\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchSecurityEventLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"InventoryDetail/{instance_id}/SecurityEventLog\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchEC2ConfigLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"InventoryDetail/{instance_id}/EC2ConfigLog\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchCfnInitLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"InventoryDetail/{instance_id}/CfnInitLog\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"CloudWatch\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.CloudWatch.CloudWatchOutputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"AccessKey\" : \"\",",
                  "        \"SecretKey\" : \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                  "        \"NameSpace\" : \"Windows/Default\"",
                  "      }",
                  "    }],",
                  "    \"Flows\": {",
                  "      \"Flows\": [",
                  "        \"ApplicationEventLog,CloudWatchApplicationEventLog\",",
                  "        \"SystemEventLog,CloudWatchSystemEventLog\",",
                  "        \"SecurityEventLog,CloudWatchSecurityEventLog\",",
                  "        \"EC2ConfigLog,CloudWatchEC2ConfigLog\",",
                  "        \"CfnInitLog,CloudWatchCfnInitLog\",",
                  "        \"MemoryPerformanceCounter,CloudWatch\"",
                  "      ]",
                  "    }",
                  "  }",
                  "}"
                ]]}
              }
            },
            "commands" : {
              "01-enable-SSM" : {
                "command" : "powershell.exe -Command \"Set-Service -Name AmazonSSMAgent -StartupType Automatic\"",
                "waitAfterCompletion" : "0"
              },
              "02-restart-SSM" : {
                "command" : "powershell.exe -Command \"Restart-Service AmazonSSMAgent\"",
                "waitAfterCompletion" : "30"
              }
            }
          },
          "ConfigureOS" : {
            "commands" : {
              "01-disable-windows-firewall" : {
                "command" : "powershell.exe -Command \"Get-NetFirewallProfile | Set-NetFirewallProfile -Enabled False\"",
                "waitAfterCompletion" : "0"
              },
              "02-set-execution-policy" : {
                "command" : "powershell.exe -Command \"Set-ExecutionPolicy RemoteSigned -Force\"",
                "waitAfterCompletion" : "0"
              }
            }
          },
          "ConfigureCFN" : {
            "files" : {
              "c:\\cfn\\cfn-hup.conf" : {
                "content" : { "Fn::Join" : [ "\n", [
                  "[main]",
                  { "Fn::Sub" : "stack=${AWS::StackId}" },
                  { "Fn::Sub" : "region=${AWS::Region}" }
                  ]]}
              },
              "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf" : {
                "content": { "Fn::Join" : [ "\n", [
                  "[cfn-auto-reloader-hook]",
                  "triggers=post.update",
                  "path=Resources.InventoryDetailInstance01A.Metadata.AWS::CloudFormation::Init",
                  { "Fn::Sub" : "action=cfn-init.exe --verbose --configsets All --stack ${AWS::StackId} --resource InventoryDetailInstance01A --region ${AWS::Region}" }
                ]]}
              }
            },
            "services" : {
              "windows" : {
                "cfn-hup" : {
                  "enabled" : "true",
                  "ensureRunning" : "true",
                  "files" : [
                    "c:\\cfn\\cfn-hup.conf",
                    "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                  ]
                }
              }
            }
          },
          "InstallAtomEditor" : {
            "packages" : {
              "msi" : {
                "atom" : "https://github.com/atom/atom/releases/download/v1.16.0/AtomSetup-x64.msi"
              }
            }
          },
          "InstallInventoryDetailProduct" : {
            "sources" : {
              "C:\\Inetpub\\wwwroot" : { "Fn::Join" : [ "", [ "https://", { "Fn::If" : [ "ConfigureGlobalS3", "s3", { "Fn::Sub" : "s3-${AWS::Region}" }]}, ".amazonaws.com/", { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ProductsBucket" }}, "/", { "Ref" : "ProductFolder" }, "/", { "Ref" : "DataStagingProductObject" }]]}
            }
          },
          "InstallInventoryDetailConfiguration" : {
            "sources" : {
              "C:\\Inetpub\\wwwroot" : { "Fn::Join" : [ "", [ "https://", { "Fn::If" : [ "ConfigureGlobalS3", "s3", { "Fn::Sub" : "s3-${AWS::Region}" }]}, ".amazonaws.com/", { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ConfigurationsBucket" }}, "/", { "Ref" : "ConfigurationFolder" }, "/", { "Ref" : "DataStagingConfigurationObject" }]]}
            }
          },
          "InstallInventoryDetailApplication" : {
            "sources" : {
              "C:\\Inetpub\\wwwroot" : { "Fn::Join" : [ "", [ "https://", { "Fn::If" : [ "ConfigureGlobalS3", "s3", { "Fn::Sub" : "s3-${AWS::Region}" }]}, ".amazonaws.com/", { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ApplicationsBucket" }}, "/", { "Ref" : "ApplicationFolder" }, "/", { "Ref" : "DataStagingApplicationObject" }]]}
            }
          },
          "ConfigureHostname" : {
            "commands" : {
              "01-set-hostname" : {
                "command" : { "Fn::Join" : [ "", [ "powershell.exe Rename-Computer -NewName ", { "Fn::GetAtt" : [ "GetInventoryDetailHostName", "HostName" ]}, "01a", " -Restart" ]]},
                "waitAfterCompletion" : "forever"
              }
            }
          }
        }
      },
      "Properties" : {
        "ImageId" : { "Fn::GetAtt" : [ "GetWindowsImageId", "ImageId" ]},
        "InstanceType" : { "Fn::FindInMap" : [ "InstanceTypeMap", "InventoryDetail", { "Ref" : "EnvironmentType" }]},
        "IamInstanceProfile" : { "Ref" : "InstanceProfile" },
        "KeyName" : { "Fn::If" : [ "ConfigureKey", { "Ref" : "KeyName" }, { "Ref" : "AWS::NoValue" }]},
        "NetworkInterfaces" : [{
          "Description"              : { "Fn::Join" : [ "-", [ { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }}, { "Ref" : "ApplicationName" }, "InventoryDetailNetworkInterface01A", "eth0" ]]},
          "DeviceIndex"              : "0",
          "SubnetId"                 : { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-ApplicationSubnetA" }},
          "PrivateIpAddress"         : { "Fn::If" : [ "ConfigureStaticAddress", { "Fn::GetAtt" : [ "AddressCalculatorA", "Address8" ]}, { "Ref" : "AWS::NoValue" }]},
          "GroupSet"                 : [{ "Ref" :  "DataStagingInstanceSecurityGroup" }],
          "AssociatePublicIpAddress" : "false",
          "DeleteOnTermination"      : "true"
        }],
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }}, { "Ref" : "ApplicationName" }, "InventoryDetailInstance01A" ]]}},
          { "Fn::If" : [ "ConfigureSchedule", { "Key" : "Schedule", "Value" : { "Ref" : "Schedule" }}, { "Ref" : "AWS::NoValue" }]}
        ],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : [ "\n", [
          "<script>",
          { "Fn::Sub" : "cfn-init.exe --verbose --configsets All --stack ${AWS::StackId} --resource InventoryDetailInstance01A --region ${AWS::Region}" },
          { "Fn::Sub" : "cfn-signal.exe --exit-code %ERRORLEVEL% --stack ${AWS::StackName} --resource InventoryDetailInstance01A --region ${AWS::Region}" },
          "</script>"
        ]]}}
      },
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT20M"
        }
      }
    },

    "FLIFOInstance01A" : {
      "Type" : "AWS::EC2::Instance",
      "Metadata" : {
        "AWS::CloudFormation::Authentication" : {
          "S3Credentials" : {
            "type" : "S3",
            "roleName" : { "Ref" : "DataStagingRole" },
            "buckets" : [
              { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ProductsBucket" }},
              { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ConfigurationsBucket" }},
              { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ApplicationsBucket" }}
            ]
          }
        },
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "All" : [
              { "Fn::If" : [ "ConfigureLogs", "ConfigureLogs", { "Ref": "AWS::NoValue" }]},
              "ConfigureOS",
              "ConfigureCFN",
              "InstallAtomEditor",
              { "Fn::If" : [ "InstallProduct", "InstallFLIFOProduct", { "Ref": "AWS::NoValue" }]},
              { "Fn::If" : [ "InstallConfiguration", "InstallFLIFOConfiguration", { "Ref": "AWS::NoValue" }]},
              { "Fn::If" : [ "InstallApplication", "InstallFLIFOApplication", { "Ref": "AWS::NoValue" }]}
            ]
          },
          "ConfigureLogs" : {
            "files" : {
              "C:\\Program Files\\Amazon\\SSM\\Plugins\\awsCloudWatch\\AWS.EC2.Windows.CloudWatch.json" : {
                "content" : { "Fn::Join" : [ "", [
                  "{",
                  "  \"IsEnabled\" : true,",
                  "  \"EngineConfiguration\" : {",
                  "    \"PollInterval\" : \"00:00:10\",",
                  "    \"Components\" : [{",
                  "      \"Id\" : \"ApplicationEventLog\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.EventLog.EventLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"LogName\" : \"Application\",",
                  "        \"Levels\" : \"7\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"SystemEventLog\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.EventLog.EventLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"LogName\" : \"System\",",
                  "        \"Levels\" : \"7\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"SecurityEventLog\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.EventLog.EventLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"LogName\" : \"Security\",",
                  "        \"Levels\" : \"7\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"EC2ConfigLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"LogDirectoryPath\": \"C:\\\\Program Files\\\\Amazon\\\\Ec2ConfigService\\\\Logs\",",
                  "        \"TimestampFormat\": \"yyyy-MM-ddTHH:mm:ss.fffZ:\",",
                  "        \"Encoding\": \"ASCII\",",
                  "        \"Filter\": \"EC2ConfigLog.txt\",",
                  "        \"CultureName\": \"en-US\",",
                  "        \"TimeZoneKind\": \"UTC\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CfnInitLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"LogDirectoryPath\": \"C:\\\\cfn\\\\log\",",
                  "        \"TimestampFormat\": \"yyyy-MM-dd HH:mm:ss,fff\",",
                  "        \"Encoding\": \"ASCII\",",
                  "        \"Filter\": \"cfn-init.log\",",
                  "        \"CultureName\": \"en-US\",",
                  "        \"TimeZoneKind\": \"Local\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"MemoryPerformanceCounter\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.PerformanceCounterComponent.PerformanceCounterInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"CategoryName\" : \"Memory\",",
                  "        \"CounterName\" : \"Available MBytes\",",
                  "        \"InstanceName\" : \"\",",
                  "        \"MetricName\" : \"Memory\",",
                  "        \"Unit\" : \"Megabytes\",",
                  "        \"DimensionName\" : \"\",",
                  "        \"DimensionValue\" : \"\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchApplicationEventLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"FLIFO/{instance_id}/ApplicationEventLog\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchSystemEventLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"FLIFO/{instance_id}/SystemEventLog\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchSecurityEventLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"FLIFO/{instance_id}/SecurityEventLog\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchEC2ConfigLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"FLIFO/{instance_id}/EC2ConfigLog\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchCfnInitLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"FLIFO/{instance_id}/CfnInitLog\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"CloudWatch\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.CloudWatch.CloudWatchOutputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"AccessKey\" : \"\",",
                  "        \"SecretKey\" : \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                  "        \"NameSpace\" : \"Windows/Default\"",
                  "      }",
                  "    }],",
                  "    \"Flows\": {",
                  "      \"Flows\": [",
                  "        \"ApplicationEventLog,CloudWatchApplicationEventLog\",",
                  "        \"SystemEventLog,CloudWatchSystemEventLog\",",
                  "        \"SecurityEventLog,CloudWatchSecurityEventLog\",",
                  "        \"EC2ConfigLog,CloudWatchEC2ConfigLog\",",
                  "        \"CfnInitLog,CloudWatchCfnInitLog\",",
                  "        \"MemoryPerformanceCounter,CloudWatch\"",
                  "      ]",
                  "    }",
                  "  }",
                  "}"
                ]]}
              }
            },
            "commands" : {
              "01-enable-SSM" : {
                "command" : "powershell.exe -Command \"Set-Service -Name AmazonSSMAgent -StartupType Automatic\"",
                "waitAfterCompletion" : "0"
              },
              "02-restart-SSM" : {
                "command" : "powershell.exe -Command \"Restart-Service AmazonSSMAgent\"",
                "waitAfterCompletion" : "30"
              }
            }
          },
          "ConfigureOS" : {
            "commands" : {
              "01-disable-windows-firewall" : {
                "command" : "powershell.exe -Command \"Get-NetFirewallProfile | Set-NetFirewallProfile -Enabled False\"",
                "waitAfterCompletion" : "0"
              },
              "02-set-execution-policy" : {
                "command" : "powershell.exe -Command \"Set-ExecutionPolicy RemoteSigned -Force\"",
                "waitAfterCompletion" : "0"
              }
            }
          },
          "ConfigureCFN" : {
            "files" : {
              "c:\\cfn\\cfn-hup.conf" : {
                "content" : { "Fn::Join" : [ "\n", [
                  "[main]",
                  { "Fn::Sub" : "stack=${AWS::StackId}" },
                  { "Fn::Sub" : "region=${AWS::Region}" }
                  ]]}
              },
              "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf" : {
                "content": { "Fn::Join" : [ "\n", [
                  "[cfn-auto-reloader-hook]",
                  "triggers=post.update",
                  "path=Resources.FLIFOInstance01A.Metadata.AWS::CloudFormation::Init",
                  { "Fn::Sub" : "action=cfn-init.exe --verbose --configsets All --stack ${AWS::StackId} --resource FLIFOInstance01A --region ${AWS::Region}" }
                ]]}
              }
            },
            "services" : {
              "windows" : {
                "cfn-hup" : {
                  "enabled" : "true",
                  "ensureRunning" : "true",
                  "files" : [
                    "c:\\cfn\\cfn-hup.conf",
                    "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                  ]
                }
              }
            }
          },
          "InstallAtomEditor" : {
            "packages" : {
              "msi" : {
                "atom" : "https://github.com/atom/atom/releases/download/v1.16.0/AtomSetup-x64.msi"
              }
            }
          },
          "InstallFLIFOProduct" : {
            "sources" : {
              "C:\\Inetpub\\wwwroot" : { "Fn::Join" : [ "", [ "https://", { "Fn::If" : [ "ConfigureGlobalS3", "s3", { "Fn::Sub" : "s3-${AWS::Region}" }]}, ".amazonaws.com/", { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ProductsBucket" }}, "/", { "Ref" : "ProductFolder" }, "/", { "Ref" : "DataStagingProductObject" }]]}
            }
          },
          "InstallFLIFOConfiguration" : {
            "sources" : {
              "C:\\Inetpub\\wwwroot" : { "Fn::Join" : [ "", [ "https://", { "Fn::If" : [ "ConfigureGlobalS3", "s3", { "Fn::Sub" : "s3-${AWS::Region}" }]}, ".amazonaws.com/", { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ConfigurationsBucket" }}, "/", { "Ref" : "ConfigurationFolder" }, "/", { "Ref" : "DataStagingConfigurationObject" }]]}
            }
          },
          "InstallFLIFOApplication" : {
            "sources" : {
              "C:\\Inetpub\\wwwroot" : { "Fn::Join" : [ "", [ "https://", { "Fn::If" : [ "ConfigureGlobalS3", "s3", { "Fn::Sub" : "s3-${AWS::Region}" }]}, ".amazonaws.com/", { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ApplicationsBucket" }}, "/", { "Ref" : "ApplicationFolder" }, "/", { "Ref" : "DataStagingApplicationObject" }]]}
            }
          },
          "ConfigureHostname" : {
            "commands" : {
              "01-set-hostname" : {
                "command" : { "Fn::Join" : [ "", [ "powershell.exe Rename-Computer -NewName ", { "Fn::GetAtt" : [ "GetFLIFOHostName", "HostName" ]}, "01a", " -Restart" ]]},
                "waitAfterCompletion" : "forever"
              }
            }
          }
        }
      },
      "Properties" : {
        "ImageId" : { "Fn::GetAtt" : [ "GetWindowsImageId", "ImageId" ]},
        "InstanceType" : { "Fn::FindInMap" : [ "InstanceTypeMap", "FLIFO", { "Ref" : "EnvironmentType" }]},
        "IamInstanceProfile" : { "Ref" : "InstanceProfile" },
        "KeyName" : { "Fn::If" : [ "ConfigureKey", { "Ref" : "KeyName" }, { "Ref" : "AWS::NoValue" }]},
        "NetworkInterfaces" : [{
          "Description"              : { "Fn::Join" : [ "-", [ { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }}, { "Ref" : "ApplicationName" }, "FLIFONetworkInterface01A", "eth0" ]]},
          "DeviceIndex"              : "0",
          "SubnetId"                 : { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-ApplicationSubnetA" }},
          "PrivateIpAddress"         : { "Fn::If" : [ "ConfigureStaticAddress", { "Fn::GetAtt" : [ "AddressCalculatorA", "Address9" ]}, { "Ref" : "AWS::NoValue" }]},
          "GroupSet"                 : [{ "Ref" :  "DataStagingInstanceSecurityGroup" }],
          "AssociatePublicIpAddress" : "false",
          "DeleteOnTermination"      : "true"
        }],
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }}, { "Ref" : "ApplicationName" }, "FLIFOInstance01A" ]]}},
          { "Fn::If" : [ "ConfigureSchedule", { "Key" : "Schedule", "Value" : { "Ref" : "Schedule" }}, { "Ref" : "AWS::NoValue" }]}
        ],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : [ "\n", [
          "<script>",
          { "Fn::Sub" : "cfn-init.exe --verbose --configsets All --stack ${AWS::StackId} --resource FLIFOInstance01A --region ${AWS::Region}" },
          { "Fn::Sub" : "cfn-signal.exe --exit-code %ERRORLEVEL% --stack ${AWS::StackName} --resource FLIFOInstance01A --region ${AWS::Region}" },
          "</script>"
        ]]}}
      },
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT20M"
        }
      }
    },

    "ScheduleInstance01A" : {
      "Type" : "AWS::EC2::Instance",
      "Metadata" : {
        "AWS::CloudFormation::Authentication" : {
          "S3Credentials" : {
            "type" : "S3",
            "roleName" : { "Ref" : "DataStagingRole" },
            "buckets" : [
              { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ProductsBucket" }},
              { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ConfigurationsBucket" }},
              { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ApplicationsBucket" }}
            ]
          }
        },
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "All" : [
              { "Fn::If" : [ "ConfigureLogs", "ConfigureLogs", { "Ref": "AWS::NoValue" }]},
              "ConfigureOS",
              "ConfigureCFN",
              "InstallAtomEditor",
              { "Fn::If" : [ "InstallProduct", "InstallScheduleProduct", { "Ref": "AWS::NoValue" }]},
              { "Fn::If" : [ "InstallConfiguration", "InstallScheduleConfiguration", { "Ref": "AWS::NoValue" }]},
              { "Fn::If" : [ "InstallApplication", "InstallScheduleApplication", { "Ref": "AWS::NoValue" }]}
            ]
          },
          "ConfigureLogs" : {
            "files" : {
              "C:\\Program Files\\Amazon\\SSM\\Plugins\\awsCloudWatch\\AWS.EC2.Windows.CloudWatch.json" : {
                "content" : { "Fn::Join" : [ "", [
                  "{",
                  "  \"IsEnabled\" : true,",
                  "  \"EngineConfiguration\" : {",
                  "    \"PollInterval\" : \"00:00:10\",",
                  "    \"Components\" : [{",
                  "      \"Id\" : \"ApplicationEventLog\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.EventLog.EventLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"LogName\" : \"Application\",",
                  "        \"Levels\" : \"7\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"SystemEventLog\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.EventLog.EventLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"LogName\" : \"System\",",
                  "        \"Levels\" : \"7\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"SecurityEventLog\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.EventLog.EventLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"LogName\" : \"Security\",",
                  "        \"Levels\" : \"7\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"EC2ConfigLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"LogDirectoryPath\": \"C:\\\\Program Files\\\\Amazon\\\\Ec2ConfigService\\\\Logs\",",
                  "        \"TimestampFormat\": \"yyyy-MM-ddTHH:mm:ss.fffZ:\",",
                  "        \"Encoding\": \"ASCII\",",
                  "        \"Filter\": \"EC2ConfigLog.txt\",",
                  "        \"CultureName\": \"en-US\",",
                  "        \"TimeZoneKind\": \"UTC\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CfnInitLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"LogDirectoryPath\": \"C:\\\\cfn\\\\log\",",
                  "        \"TimestampFormat\": \"yyyy-MM-dd HH:mm:ss,fff\",",
                  "        \"Encoding\": \"ASCII\",",
                  "        \"Filter\": \"cfn-init.log\",",
                  "        \"CultureName\": \"en-US\",",
                  "        \"TimeZoneKind\": \"Local\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"MemoryPerformanceCounter\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.PerformanceCounterComponent.PerformanceCounterInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"CategoryName\" : \"Memory\",",
                  "        \"CounterName\" : \"Available MBytes\",",
                  "        \"InstanceName\" : \"\",",
                  "        \"MetricName\" : \"Memory\",",
                  "        \"Unit\" : \"Megabytes\",",
                  "        \"DimensionName\" : \"\",",
                  "        \"DimensionValue\" : \"\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchApplicationEventLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"Schedule/{instance_id}/ApplicationEventLog\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchSystemEventLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"Schedule/{instance_id}/SystemEventLog\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchSecurityEventLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"Schedule/{instance_id}/SecurityEventLog\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchEC2ConfigLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"Schedule/{instance_id}/EC2ConfigLog\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchCfnInitLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"Schedule/{instance_id}/CfnInitLog\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"CloudWatch\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.CloudWatch.CloudWatchOutputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"AccessKey\" : \"\",",
                  "        \"SecretKey\" : \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                  "        \"NameSpace\" : \"Windows/Default\"",
                  "      }",
                  "    }],",
                  "    \"Flows\": {",
                  "      \"Flows\": [",
                  "        \"ApplicationEventLog,CloudWatchApplicationEventLog\",",
                  "        \"SystemEventLog,CloudWatchSystemEventLog\",",
                  "        \"SecurityEventLog,CloudWatchSecurityEventLog\",",
                  "        \"EC2ConfigLog,CloudWatchEC2ConfigLog\",",
                  "        \"CfnInitLog,CloudWatchCfnInitLog\",",
                  "        \"MemoryPerformanceCounter,CloudWatch\"",
                  "      ]",
                  "    }",
                  "  }",
                  "}"
                ]]}
              }
            },
            "commands" : {
              "01-enable-SSM" : {
                "command" : "powershell.exe -Command \"Set-Service -Name AmazonSSMAgent -StartupType Automatic\"",
                "waitAfterCompletion" : "0"
              },
              "02-restart-SSM" : {
                "command" : "powershell.exe -Command \"Restart-Service AmazonSSMAgent\"",
                "waitAfterCompletion" : "30"
              }
            }
          },
          "ConfigureOS" : {
            "commands" : {
              "01-disable-windows-firewall" : {
                "command" : "powershell.exe -Command \"Get-NetFirewallProfile | Set-NetFirewallProfile -Enabled False\"",
                "waitAfterCompletion" : "0"
              },
              "02-set-execution-policy" : {
                "command" : "powershell.exe -Command \"Set-ExecutionPolicy RemoteSigned -Force\"",
                "waitAfterCompletion" : "0"
              }
            }
          },
          "ConfigureCFN" : {
            "files" : {
              "c:\\cfn\\cfn-hup.conf" : {
                "content" : { "Fn::Join" : [ "\n", [
                  "[main]",
                  { "Fn::Sub" : "stack=${AWS::StackId}" },
                  { "Fn::Sub" : "region=${AWS::Region}" }
                  ]]}
              },
              "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf" : {
                "content": { "Fn::Join" : [ "\n", [
                  "[cfn-auto-reloader-hook]",
                  "triggers=post.update",
                  "path=Resources.ScheduleInstance01A.Metadata.AWS::CloudFormation::Init",
                  { "Fn::Sub" : "action=cfn-init.exe --verbose --configsets All --stack ${AWS::StackId} --resource ScheduleInstance01A --region ${AWS::Region}" }
                ]]}
              }
            },
            "services" : {
              "windows" : {
                "cfn-hup" : {
                  "enabled" : "true",
                  "ensureRunning" : "true",
                  "files" : [
                    "c:\\cfn\\cfn-hup.conf",
                    "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                  ]
                }
              }
            }
          },
          "InstallAtomEditor" : {
            "packages" : {
              "msi" : {
                "atom" : "https://github.com/atom/atom/releases/download/v1.16.0/AtomSetup-x64.msi"
              }
            }
          },
          "InstallScheduleProduct" : {
            "sources" : {
              "C:\\Inetpub\\wwwroot" : { "Fn::Join" : [ "", [ "https://", { "Fn::If" : [ "ConfigureGlobalS3", "s3", { "Fn::Sub" : "s3-${AWS::Region}" }]}, ".amazonaws.com/", { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ProductsBucket" }}, "/", { "Ref" : "ProductFolder" }, "/", { "Ref" : "DataStagingProductObject" }]]}
            }
          },
          "InstallScheduleConfiguration" : {
            "sources" : {
              "C:\\Inetpub\\wwwroot" : { "Fn::Join" : [ "", [ "https://", { "Fn::If" : [ "ConfigureGlobalS3", "s3", { "Fn::Sub" : "s3-${AWS::Region}" }]}, ".amazonaws.com/", { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ConfigurationsBucket" }}, "/", { "Ref" : "ConfigurationFolder" }, "/", { "Ref" : "DataStagingConfigurationObject" }]]}
            }
          },
          "InstallScheduleApplication" : {
            "sources" : {
              "C:\\Inetpub\\wwwroot" : { "Fn::Join" : [ "", [ "https://", { "Fn::If" : [ "ConfigureGlobalS3", "s3", { "Fn::Sub" : "s3-${AWS::Region}" }]}, ".amazonaws.com/", { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ApplicationsBucket" }}, "/", { "Ref" : "ApplicationFolder" }, "/", { "Ref" : "DataStagingApplicationObject" }]]}
            }
          },
          "ConfigureHostname" : {
            "commands" : {
              "01-set-hostname" : {
                "command" : { "Fn::Join" : [ "", [ "powershell.exe Rename-Computer -NewName ", { "Fn::GetAtt" : [ "GetScheduleHostName", "HostName" ]}, "01a", " -Restart" ]]},
                "waitAfterCompletion" : "forever"
              }
            }
          }
        }
      },
      "Properties" : {
        "ImageId" : { "Fn::GetAtt" : [ "GetWindowsImageId", "ImageId" ]},
        "InstanceType" : { "Fn::FindInMap" : [ "InstanceTypeMap", "Schedule", { "Ref" : "EnvironmentType" }]},
        "IamInstanceProfile" : { "Ref" : "InstanceProfile" },
        "KeyName" : { "Fn::If" : [ "ConfigureKey", { "Ref" : "KeyName" }, { "Ref" : "AWS::NoValue" }]},
        "NetworkInterfaces" : [{
          "Description"              : { "Fn::Join" : [ "-", [ { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }}, { "Ref" : "ApplicationName" }, "ScheduleNetworkInterface01A", "eth0" ]]},
          "DeviceIndex"              : "0",
          "SubnetId"                 : { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-ApplicationSubnetA" }},
          "PrivateIpAddress"         : { "Fn::If" : [ "ConfigureStaticAddress", { "Fn::GetAtt" : [ "AddressCalculatorA", "Address10" ]}, { "Ref" : "AWS::NoValue" }]},
          "GroupSet"                 : [{ "Ref" :  "DataStagingInstanceSecurityGroup" }],
          "AssociatePublicIpAddress" : "false",
          "DeleteOnTermination"      : "true"
        }],
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }}, { "Ref" : "ApplicationName" }, "ScheduleInstance01A" ]]}},
          { "Fn::If" : [ "ConfigureSchedule", { "Key" : "Schedule", "Value" : { "Ref" : "Schedule" }}, { "Ref" : "AWS::NoValue" }]}
        ],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : [ "\n", [
          "<script>",
          { "Fn::Sub" : "cfn-init.exe --verbose --configsets All --stack ${AWS::StackId} --resource ScheduleInstance01A --region ${AWS::Region}" },
          { "Fn::Sub" : "cfn-signal.exe --exit-code %ERRORLEVEL% --stack ${AWS::StackName} --resource ScheduleInstance01A --region ${AWS::Region}" },
          "</script>"
        ]]}}
      },
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT20M"
        }
      }
    },

    "ETicketInstance01A" : {
      "Type" : "AWS::EC2::Instance",
      "Metadata" : {
        "AWS::CloudFormation::Authentication" : {
          "S3Credentials" : {
            "type" : "S3",
            "roleName" : { "Ref" : "DataStagingRole" },
            "buckets" : [
              { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ProductsBucket" }},
              { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ConfigurationsBucket" }},
              { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ApplicationsBucket" }}
            ]
          }
        },
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "All" : [
              { "Fn::If" : [ "ConfigureLogs", "ConfigureLogs", { "Ref": "AWS::NoValue" }]},
              "ConfigureOS",
              "ConfigureCFN",
              "InstallAtomEditor",
              { "Fn::If" : [ "InstallProduct", "InstallETicketProduct", { "Ref": "AWS::NoValue" }]},
              { "Fn::If" : [ "InstallConfiguration", "InstallETicketConfiguration", { "Ref": "AWS::NoValue" }]},
              { "Fn::If" : [ "InstallApplication", "InstallETicketApplication", { "Ref": "AWS::NoValue" }]}
            ]
          },
          "ConfigureLogs" : {
            "files" : {
              "C:\\Program Files\\Amazon\\SSM\\Plugins\\awsCloudWatch\\AWS.EC2.Windows.CloudWatch.json" : {
                "content" : { "Fn::Join" : [ "", [
                  "{",
                  "  \"IsEnabled\" : true,",
                  "  \"EngineConfiguration\" : {",
                  "    \"PollInterval\" : \"00:00:10\",",
                  "    \"Components\" : [{",
                  "      \"Id\" : \"ApplicationEventLog\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.EventLog.EventLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"LogName\" : \"Application\",",
                  "        \"Levels\" : \"7\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"SystemEventLog\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.EventLog.EventLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"LogName\" : \"System\",",
                  "        \"Levels\" : \"7\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"SecurityEventLog\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.EventLog.EventLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"LogName\" : \"Security\",",
                  "        \"Levels\" : \"7\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"EC2ConfigLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"LogDirectoryPath\": \"C:\\\\Program Files\\\\Amazon\\\\Ec2ConfigService\\\\Logs\",",
                  "        \"TimestampFormat\": \"yyyy-MM-ddTHH:mm:ss.fffZ:\",",
                  "        \"Encoding\": \"ASCII\",",
                  "        \"Filter\": \"EC2ConfigLog.txt\",",
                  "        \"CultureName\": \"en-US\",",
                  "        \"TimeZoneKind\": \"UTC\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CfnInitLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"LogDirectoryPath\": \"C:\\\\cfn\\\\log\",",
                  "        \"TimestampFormat\": \"yyyy-MM-dd HH:mm:ss,fff\",",
                  "        \"Encoding\": \"ASCII\",",
                  "        \"Filter\": \"cfn-init.log\",",
                  "        \"CultureName\": \"en-US\",",
                  "        \"TimeZoneKind\": \"Local\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"MemoryPerformanceCounter\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.PerformanceCounterComponent.PerformanceCounterInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"CategoryName\" : \"Memory\",",
                  "        \"CounterName\" : \"Available MBytes\",",
                  "        \"InstanceName\" : \"\",",
                  "        \"MetricName\" : \"Memory\",",
                  "        \"Unit\" : \"Megabytes\",",
                  "        \"DimensionName\" : \"\",",
                  "        \"DimensionValue\" : \"\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchApplicationEventLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"ETicket/{instance_id}/ApplicationEventLog\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchSystemEventLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"ETicket/{instance_id}/SystemEventLog\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchSecurityEventLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"ETicket/{instance_id}/SecurityEventLog\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchEC2ConfigLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"ETicket/{instance_id}/EC2ConfigLog\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchCfnInitLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"ETicket/{instance_id}/CfnInitLog\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"CloudWatch\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.CloudWatch.CloudWatchOutputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"AccessKey\" : \"\",",
                  "        \"SecretKey\" : \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                  "        \"NameSpace\" : \"Windows/Default\"",
                  "      }",
                  "    }],",
                  "    \"Flows\": {",
                  "      \"Flows\": [",
                  "        \"ApplicationEventLog,CloudWatchApplicationEventLog\",",
                  "        \"SystemEventLog,CloudWatchSystemEventLog\",",
                  "        \"SecurityEventLog,CloudWatchSecurityEventLog\",",
                  "        \"EC2ConfigLog,CloudWatchEC2ConfigLog\",",
                  "        \"CfnInitLog,CloudWatchCfnInitLog\",",
                  "        \"MemoryPerformanceCounter,CloudWatch\"",
                  "      ]",
                  "    }",
                  "  }",
                  "}"
                ]]}
              }
            },
            "commands" : {
              "01-enable-SSM" : {
                "command" : "powershell.exe -Command \"Set-Service -Name AmazonSSMAgent -StartupType Automatic\"",
                "waitAfterCompletion" : "0"
              },
              "02-restart-SSM" : {
                "command" : "powershell.exe -Command \"Restart-Service AmazonSSMAgent\"",
                "waitAfterCompletion" : "30"
              }
            }
          },
          "ConfigureOS" : {
            "commands" : {
              "01-disable-windows-firewall" : {
                "command" : "powershell.exe -Command \"Get-NetFirewallProfile | Set-NetFirewallProfile -Enabled False\"",
                "waitAfterCompletion" : "0"
              },
              "02-set-execution-policy" : {
                "command" : "powershell.exe -Command \"Set-ExecutionPolicy RemoteSigned -Force\"",
                "waitAfterCompletion" : "0"
              }
            }
          },
          "ConfigureCFN" : {
            "files" : {
              "c:\\cfn\\cfn-hup.conf" : {
                "content" : { "Fn::Join" : [ "\n", [
                  "[main]",
                  { "Fn::Sub" : "stack=${AWS::StackId}" },
                  { "Fn::Sub" : "region=${AWS::Region}" }
                  ]]}
              },
              "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf" : {
                "content": { "Fn::Join" : [ "\n", [
                  "[cfn-auto-reloader-hook]",
                  "triggers=post.update",
                  "path=Resources.ETicketInstance01A.Metadata.AWS::CloudFormation::Init",
                  { "Fn::Sub" : "action=cfn-init.exe --verbose --configsets All --stack ${AWS::StackId} --resource ETicketInstance01A --region ${AWS::Region}" }
                ]]}
              }
            },
            "services" : {
              "windows" : {
                "cfn-hup" : {
                  "enabled" : "true",
                  "ensureRunning" : "true",
                  "files" : [
                    "c:\\cfn\\cfn-hup.conf",
                    "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                  ]
                }
              }
            }
          },
          "InstallAtomEditor" : {
            "packages" : {
              "msi" : {
                "atom" : "https://github.com/atom/atom/releases/download/v1.16.0/AtomSetup-x64.msi"
              }
            }
          },
          "InstallETicketProduct" : {
            "sources" : {
              "C:\\Inetpub\\wwwroot" : { "Fn::Join" : [ "", [ "https://", { "Fn::If" : [ "ConfigureGlobalS3", "s3", { "Fn::Sub" : "s3-${AWS::Region}" }]}, ".amazonaws.com/", { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ProductsBucket" }}, "/", { "Ref" : "ProductFolder" }, "/", { "Ref" : "DataStagingProductObject" }]]}
            }
          },
          "InstallETicketConfiguration" : {
            "sources" : {
              "C:\\Inetpub\\wwwroot" : { "Fn::Join" : [ "", [ "https://", { "Fn::If" : [ "ConfigureGlobalS3", "s3", { "Fn::Sub" : "s3-${AWS::Region}" }]}, ".amazonaws.com/", { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ConfigurationsBucket" }}, "/", { "Ref" : "ConfigurationFolder" }, "/", { "Ref" : "DataStagingConfigurationObject" }]]}
            }
          },
          "InstallETicketApplication" : {
            "sources" : {
              "C:\\Inetpub\\wwwroot" : { "Fn::Join" : [ "", [ "https://", { "Fn::If" : [ "ConfigureGlobalS3", "s3", { "Fn::Sub" : "s3-${AWS::Region}" }]}, ".amazonaws.com/", { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ApplicationsBucket" }}, "/", { "Ref" : "ApplicationFolder" }, "/", { "Ref" : "DataStagingApplicationObject" }]]}
            }
          },
          "ConfigureHostname" : {
            "commands" : {
              "01-set-hostname" : {
                "command" : { "Fn::Join" : [ "", [ "powershell.exe Rename-Computer -NewName ", { "Fn::GetAtt" : [ "GetETicketHostName", "HostName" ]}, "01a", " -Restart" ]]},
                "waitAfterCompletion" : "forever"
              }
            }
          }
        }
      },
      "Properties" : {
        "ImageId" : { "Fn::GetAtt" : [ "GetWindowsImageId", "ImageId" ]},
        "InstanceType" : { "Fn::FindInMap" : [ "InstanceTypeMap", "ETicket", { "Ref" : "EnvironmentType" }]},
        "IamInstanceProfile" : { "Ref" : "InstanceProfile" },
        "KeyName" : { "Fn::If" : [ "ConfigureKey", { "Ref" : "KeyName" }, { "Ref" : "AWS::NoValue" }]},
        "NetworkInterfaces" : [{
          "Description"              : { "Fn::Join" : [ "-", [ { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }}, { "Ref" : "ApplicationName" }, "ETicketNetworkInterface01A", "eth0" ]]},
          "DeviceIndex"              : "0",
          "SubnetId"                 : { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-ApplicationSubnetA" }},
          "PrivateIpAddress"         : { "Fn::If" : [ "ConfigureStaticAddress", { "Fn::GetAtt" : [ "AddressCalculatorA", "Address11" ]}, { "Ref" : "AWS::NoValue" }]},
          "GroupSet"                 : [{ "Ref" :  "DataStagingInstanceSecurityGroup" }],
          "AssociatePublicIpAddress" : "false",
          "DeleteOnTermination"      : "true"
        }],
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }}, { "Ref" : "ApplicationName" }, "ETicketInstance01A" ]]}},
          { "Fn::If" : [ "ConfigureSchedule", { "Key" : "Schedule", "Value" : { "Ref" : "Schedule" }}, { "Ref" : "AWS::NoValue" }]}
        ],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : [ "\n", [
          "<script>",
          { "Fn::Sub" : "cfn-init.exe --verbose --configsets All --stack ${AWS::StackId} --resource ETicketInstance01A --region ${AWS::Region}" },
          { "Fn::Sub" : "cfn-signal.exe --exit-code %ERRORLEVEL% --stack ${AWS::StackName} --resource ETicketInstance01A --region ${AWS::Region}" },
          "</script>"
        ]]}}
      },
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT20M"
        }
      }
    },

    "PNRInstance01A" : {
      "Type" : "AWS::EC2::Instance",
      "Metadata" : {
        "AWS::CloudFormation::Authentication" : {
          "S3Credentials" : {
            "type" : "S3",
            "roleName" : { "Ref" : "DataStagingRole" },
            "buckets" : [
              { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ProductsBucket" }},
              { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ConfigurationsBucket" }},
              { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ApplicationsBucket" }}
            ]
          }
        },
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "All" : [
              { "Fn::If" : [ "ConfigureLogs", "ConfigureLogs", { "Ref": "AWS::NoValue" }]},
              "ConfigureOS",
              "ConfigureCFN",
              "InstallAtomEditor",
              { "Fn::If" : [ "InstallProduct", "InstallPNRProduct", { "Ref": "AWS::NoValue" }]},
              { "Fn::If" : [ "InstallConfiguration", "InstallPNRConfiguration", { "Ref": "AWS::NoValue" }]},
              { "Fn::If" : [ "InstallApplication", "InstallPNRApplication", { "Ref": "AWS::NoValue" }]}
            ]
          },
          "ConfigureLogs" : {
            "files" : {
              "C:\\Program Files\\Amazon\\SSM\\Plugins\\awsCloudWatch\\AWS.EC2.Windows.CloudWatch.json" : {
                "content" : { "Fn::Join" : [ "", [
                  "{",
                  "  \"IsEnabled\" : true,",
                  "  \"EngineConfiguration\" : {",
                  "    \"PollInterval\" : \"00:00:10\",",
                  "    \"Components\" : [{",
                  "      \"Id\" : \"ApplicationEventLog\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.EventLog.EventLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"LogName\" : \"Application\",",
                  "        \"Levels\" : \"7\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"SystemEventLog\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.EventLog.EventLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"LogName\" : \"System\",",
                  "        \"Levels\" : \"7\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"SecurityEventLog\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.EventLog.EventLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"LogName\" : \"Security\",",
                  "        \"Levels\" : \"7\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"EC2ConfigLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"LogDirectoryPath\": \"C:\\\\Program Files\\\\Amazon\\\\Ec2ConfigService\\\\Logs\",",
                  "        \"TimestampFormat\": \"yyyy-MM-ddTHH:mm:ss.fffZ:\",",
                  "        \"Encoding\": \"ASCII\",",
                  "        \"Filter\": \"EC2ConfigLog.txt\",",
                  "        \"CultureName\": \"en-US\",",
                  "        \"TimeZoneKind\": \"UTC\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CfnInitLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"LogDirectoryPath\": \"C:\\\\cfn\\\\log\",",
                  "        \"TimestampFormat\": \"yyyy-MM-dd HH:mm:ss,fff\",",
                  "        \"Encoding\": \"ASCII\",",
                  "        \"Filter\": \"cfn-init.log\",",
                  "        \"CultureName\": \"en-US\",",
                  "        \"TimeZoneKind\": \"Local\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"MemoryPerformanceCounter\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.PerformanceCounterComponent.PerformanceCounterInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"CategoryName\" : \"Memory\",",
                  "        \"CounterName\" : \"Available MBytes\",",
                  "        \"InstanceName\" : \"\",",
                  "        \"MetricName\" : \"Memory\",",
                  "        \"Unit\" : \"Megabytes\",",
                  "        \"DimensionName\" : \"\",",
                  "        \"DimensionValue\" : \"\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchApplicationEventLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"PNR/{instance_id}/ApplicationEventLog\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchSystemEventLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"PNR/{instance_id}/SystemEventLog\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchSecurityEventLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"PNR/{instance_id}/SecurityEventLog\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchEC2ConfigLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"PNR/{instance_id}/EC2ConfigLog\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchCfnInitLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"PNR/{instance_id}/CfnInitLog\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"CloudWatch\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.CloudWatch.CloudWatchOutputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"AccessKey\" : \"\",",
                  "        \"SecretKey\" : \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                  "        \"NameSpace\" : \"Windows/Default\"",
                  "      }",
                  "    }],",
                  "    \"Flows\": {",
                  "      \"Flows\": [",
                  "        \"ApplicationEventLog,CloudWatchApplicationEventLog\",",
                  "        \"SystemEventLog,CloudWatchSystemEventLog\",",
                  "        \"SecurityEventLog,CloudWatchSecurityEventLog\",",
                  "        \"EC2ConfigLog,CloudWatchEC2ConfigLog\",",
                  "        \"CfnInitLog,CloudWatchCfnInitLog\",",
                  "        \"MemoryPerformanceCounter,CloudWatch\"",
                  "      ]",
                  "    }",
                  "  }",
                  "}"
                ]]}
              }
            },
            "commands" : {
              "01-enable-SSM" : {
                "command" : "powershell.exe -Command \"Set-Service -Name AmazonSSMAgent -StartupType Automatic\"",
                "waitAfterCompletion" : "0"
              },
              "02-restart-SSM" : {
                "command" : "powershell.exe -Command \"Restart-Service AmazonSSMAgent\"",
                "waitAfterCompletion" : "30"
              }
            }
          },
          "ConfigureOS" : {
            "commands" : {
              "01-disable-windows-firewall" : {
                "command" : "powershell.exe -Command \"Get-NetFirewallProfile | Set-NetFirewallProfile -Enabled False\"",
                "waitAfterCompletion" : "0"
              },
              "02-set-execution-policy" : {
                "command" : "powershell.exe -Command \"Set-ExecutionPolicy RemoteSigned -Force\"",
                "waitAfterCompletion" : "0"
              }
            }
          },
          "ConfigureCFN" : {
            "files" : {
              "c:\\cfn\\cfn-hup.conf" : {
                "content" : { "Fn::Join" : [ "\n", [
                  "[main]",
                  { "Fn::Sub" : "stack=${AWS::StackId}" },
                  { "Fn::Sub" : "region=${AWS::Region}" }
                  ]]}
              },
              "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf" : {
                "content": { "Fn::Join" : [ "\n", [
                  "[cfn-auto-reloader-hook]",
                  "triggers=post.update",
                  "path=Resources.PNRInstance01A.Metadata.AWS::CloudFormation::Init",
                  { "Fn::Sub" : "action=cfn-init.exe --verbose --configsets All --stack ${AWS::StackId} --resource PNRInstance01A --region ${AWS::Region}" }
                ]]}
              }
            },
            "services" : {
              "windows" : {
                "cfn-hup" : {
                  "enabled" : "true",
                  "ensureRunning" : "true",
                  "files" : [
                    "c:\\cfn\\cfn-hup.conf",
                    "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                  ]
                }
              }
            }
          },
          "InstallAtomEditor" : {
            "packages" : {
              "msi" : {
                "atom" : "https://github.com/atom/atom/releases/download/v1.16.0/AtomSetup-x64.msi"
              }
            }
          },
          "InstallPNRProduct" : {
            "sources" : {
              "C:\\Inetpub\\wwwroot" : { "Fn::Join" : [ "", [ "https://", { "Fn::If" : [ "ConfigureGlobalS3", "s3", { "Fn::Sub" : "s3-${AWS::Region}" }]}, ".amazonaws.com/", { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ProductsBucket" }}, "/", { "Ref" : "ProductFolder" }, "/", { "Ref" : "DataStagingProductObject" }]]}
            }
          },
          "InstallPNRConfiguration" : {
            "sources" : {
              "C:\\Inetpub\\wwwroot" : { "Fn::Join" : [ "", [ "https://", { "Fn::If" : [ "ConfigureGlobalS3", "s3", { "Fn::Sub" : "s3-${AWS::Region}" }]}, ".amazonaws.com/", { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ConfigurationsBucket" }}, "/", { "Ref" : "ConfigurationFolder" }, "/", { "Ref" : "DataStagingConfigurationObject" }]]}
            }
          },
          "InstallPNRApplication" : {
            "sources" : {
              "C:\\Inetpub\\wwwroot" : { "Fn::Join" : [ "", [ "https://", { "Fn::If" : [ "ConfigureGlobalS3", "s3", { "Fn::Sub" : "s3-${AWS::Region}" }]}, ".amazonaws.com/", { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ApplicationsBucket" }}, "/", { "Ref" : "ApplicationFolder" }, "/", { "Ref" : "DataStagingApplicationObject" }]]}
            }
          },
          "ConfigureHostname" : {
            "commands" : {
              "01-set-hostname" : {
                "command" : { "Fn::Join" : [ "", [ "powershell.exe Rename-Computer -NewName ", { "Fn::GetAtt" : [ "GetPNRHostName", "HostName" ]}, "01a", " -Restart" ]]},
                "waitAfterCompletion" : "forever"
              }
            }
          }
        }
      },
      "Properties" : {
        "ImageId" : { "Fn::GetAtt" : [ "GetWindowsImageId", "ImageId" ]},
        "InstanceType" : { "Fn::FindInMap" : [ "InstanceTypeMap", "PNR", { "Ref" : "EnvironmentType" }]},
        "IamInstanceProfile" : { "Ref" : "InstanceProfile" },
        "KeyName" : { "Fn::If" : [ "ConfigureKey", { "Ref" : "KeyName" }, { "Ref" : "AWS::NoValue" }]},
        "NetworkInterfaces" : [{
          "Description"              : { "Fn::Join" : [ "-", [ { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }}, { "Ref" : "ApplicationName" }, "PNRNetworkInterface01A", "eth0" ]]},
          "DeviceIndex"              : "0",
          "SubnetId"                 : { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-ApplicationSubnetA" }},
          "PrivateIpAddress"         : { "Fn::If" : [ "ConfigureStaticAddress", { "Fn::GetAtt" : [ "AddressCalculatorA", "Address12" ]}, { "Ref" : "AWS::NoValue" }]},
          "GroupSet"                 : [{ "Ref" :  "DataStagingInstanceSecurityGroup" }],
          "AssociatePublicIpAddress" : "false",
          "DeleteOnTermination"      : "true"
        }],
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }}, { "Ref" : "ApplicationName" }, "PNRInstance01A" ]]}},
          { "Fn::If" : [ "ConfigureSchedule", { "Key" : "Schedule", "Value" : { "Ref" : "Schedule" }}, { "Ref" : "AWS::NoValue" }]}
        ],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : [ "\n", [
          "<script>",
          { "Fn::Sub" : "cfn-init.exe --verbose --configsets All --stack ${AWS::StackId} --resource PNRInstance01A --region ${AWS::Region}" },
          { "Fn::Sub" : "cfn-signal.exe --exit-code %ERRORLEVEL% --stack ${AWS::StackName} --resource PNRInstance01A --region ${AWS::Region}" },
          "</script>"
        ]]}}
      },
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT20M"
        }
      }
    },

    "ACIInstance01A" : {
      "Type" : "AWS::EC2::Instance",
      "Metadata" : {
        "AWS::CloudFormation::Authentication" : {
          "S3Credentials" : {
            "type" : "S3",
            "roleName" : { "Ref" : "DataStagingRole" },
            "buckets" : [
              { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ProductsBucket" }},
              { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ConfigurationsBucket" }},
              { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ApplicationsBucket" }}
            ]
          }
        },
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "All" : [
              { "Fn::If" : [ "ConfigureLogs", "ConfigureLogs", { "Ref": "AWS::NoValue" }]},
              "ConfigureOS",
              "ConfigureCFN",
              "InstallAtomEditor",
              { "Fn::If" : [ "InstallProduct", "InstallACIProduct", { "Ref": "AWS::NoValue" }]},
              { "Fn::If" : [ "InstallConfiguration", "InstallACIConfiguration", { "Ref": "AWS::NoValue" }]},
              { "Fn::If" : [ "InstallApplication", "InstallACIApplication", { "Ref": "AWS::NoValue" }]}
            ]
          },
          "ConfigureLogs" : {
            "files" : {
              "C:\\Program Files\\Amazon\\SSM\\Plugins\\awsCloudWatch\\AWS.EC2.Windows.CloudWatch.json" : {
                "content" : { "Fn::Join" : [ "", [
                  "{",
                  "  \"IsEnabled\" : true,",
                  "  \"EngineConfiguration\" : {",
                  "    \"PollInterval\" : \"00:00:10\",",
                  "    \"Components\" : [{",
                  "      \"Id\" : \"ApplicationEventLog\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.EventLog.EventLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"LogName\" : \"Application\",",
                  "        \"Levels\" : \"7\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"SystemEventLog\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.EventLog.EventLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"LogName\" : \"System\",",
                  "        \"Levels\" : \"7\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"SecurityEventLog\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.EventLog.EventLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"LogName\" : \"Security\",",
                  "        \"Levels\" : \"7\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"EC2ConfigLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"LogDirectoryPath\": \"C:\\\\Program Files\\\\Amazon\\\\Ec2ConfigService\\\\Logs\",",
                  "        \"TimestampFormat\": \"yyyy-MM-ddTHH:mm:ss.fffZ:\",",
                  "        \"Encoding\": \"ASCII\",",
                  "        \"Filter\": \"EC2ConfigLog.txt\",",
                  "        \"CultureName\": \"en-US\",",
                  "        \"TimeZoneKind\": \"UTC\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CfnInitLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"LogDirectoryPath\": \"C:\\\\cfn\\\\log\",",
                  "        \"TimestampFormat\": \"yyyy-MM-dd HH:mm:ss,fff\",",
                  "        \"Encoding\": \"ASCII\",",
                  "        \"Filter\": \"cfn-init.log\",",
                  "        \"CultureName\": \"en-US\",",
                  "        \"TimeZoneKind\": \"Local\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"MemoryPerformanceCounter\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.PerformanceCounterComponent.PerformanceCounterInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"CategoryName\" : \"Memory\",",
                  "        \"CounterName\" : \"Available MBytes\",",
                  "        \"InstanceName\" : \"\",",
                  "        \"MetricName\" : \"Memory\",",
                  "        \"Unit\" : \"Megabytes\",",
                  "        \"DimensionName\" : \"\",",
                  "        \"DimensionValue\" : \"\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchApplicationEventLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"ACI/{instance_id}/ApplicationEventLog\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchSystemEventLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"ACI/{instance_id}/SystemEventLog\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchSecurityEventLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"ACI/{instance_id}/SecurityEventLog\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchEC2ConfigLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"ACI/{instance_id}/EC2ConfigLog\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchCfnInitLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"ACI/{instance_id}/CfnInitLog\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"CloudWatch\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.CloudWatch.CloudWatchOutputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"AccessKey\" : \"\",",
                  "        \"SecretKey\" : \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                  "        \"NameSpace\" : \"Windows/Default\"",
                  "      }",
                  "    }],",
                  "    \"Flows\": {",
                  "      \"Flows\": [",
                  "        \"ApplicationEventLog,CloudWatchApplicationEventLog\",",
                  "        \"SystemEventLog,CloudWatchSystemEventLog\",",
                  "        \"SecurityEventLog,CloudWatchSecurityEventLog\",",
                  "        \"EC2ConfigLog,CloudWatchEC2ConfigLog\",",
                  "        \"CfnInitLog,CloudWatchCfnInitLog\",",
                  "        \"MemoryPerformanceCounter,CloudWatch\"",
                  "      ]",
                  "    }",
                  "  }",
                  "}"
                ]]}
              }
            },
            "commands" : {
              "01-enable-SSM" : {
                "command" : "powershell.exe -Command \"Set-Service -Name AmazonSSMAgent -StartupType Automatic\"",
                "waitAfterCompletion" : "0"
              },
              "02-restart-SSM" : {
                "command" : "powershell.exe -Command \"Restart-Service AmazonSSMAgent\"",
                "waitAfterCompletion" : "30"
              }
            }
          },
          "ConfigureOS" : {
            "commands" : {
              "01-disable-windows-firewall" : {
                "command" : "powershell.exe -Command \"Get-NetFirewallProfile | Set-NetFirewallProfile -Enabled False\"",
                "waitAfterCompletion" : "0"
              },
              "02-set-execution-policy" : {
                "command" : "powershell.exe -Command \"Set-ExecutionPolicy RemoteSigned -Force\"",
                "waitAfterCompletion" : "0"
              }
            }
          },
          "ConfigureCFN" : {
            "files" : {
              "c:\\cfn\\cfn-hup.conf" : {
                "content" : { "Fn::Join" : [ "\n", [
                  "[main]",
                  { "Fn::Sub" : "stack=${AWS::StackId}" },
                  { "Fn::Sub" : "region=${AWS::Region}" }
                  ]]}
              },
              "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf" : {
                "content": { "Fn::Join" : [ "\n", [
                  "[cfn-auto-reloader-hook]",
                  "triggers=post.update",
                  "path=Resources.ACIInstance01A.Metadata.AWS::CloudFormation::Init",
                  { "Fn::Sub" : "action=cfn-init.exe --verbose --configsets All --stack ${AWS::StackId} --resource ACIInstance01A --region ${AWS::Region}" }
                ]]}
              }
            },
            "services" : {
              "windows" : {
                "cfn-hup" : {
                  "enabled" : "true",
                  "ensureRunning" : "true",
                  "files" : [
                    "c:\\cfn\\cfn-hup.conf",
                    "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                  ]
                }
              }
            }
          },
          "InstallAtomEditor" : {
            "packages" : {
              "msi" : {
                "atom" : "https://github.com/atom/atom/releases/download/v1.16.0/AtomSetup-x64.msi"
              }
            }
          },
          "InstallACIProduct" : {
            "sources" : {
              "C:\\Inetpub\\wwwroot" : { "Fn::Join" : [ "", [ "https://", { "Fn::If" : [ "ConfigureGlobalS3", "s3", { "Fn::Sub" : "s3-${AWS::Region}" }]}, ".amazonaws.com/", { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ProductsBucket" }}, "/", { "Ref" : "ProductFolder" }, "/", { "Ref" : "DataStagingProductObject" }]]}
            }
          },
          "InstallACIConfiguration" : {
            "sources" : {
              "C:\\Inetpub\\wwwroot" : { "Fn::Join" : [ "", [ "https://", { "Fn::If" : [ "ConfigureGlobalS3", "s3", { "Fn::Sub" : "s3-${AWS::Region}" }]}, ".amazonaws.com/", { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ConfigurationsBucket" }}, "/", { "Ref" : "ConfigurationFolder" }, "/", { "Ref" : "DataStagingConfigurationObject" }]]}
            }
          },
          "InstallACIApplication" : {
            "sources" : {
              "C:\\Inetpub\\wwwroot" : { "Fn::Join" : [ "", [ "https://", { "Fn::If" : [ "ConfigureGlobalS3", "s3", { "Fn::Sub" : "s3-${AWS::Region}" }]}, ".amazonaws.com/", { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ApplicationsBucket" }}, "/", { "Ref" : "ApplicationFolder" }, "/", { "Ref" : "DataStagingApplicationObject" }]]}
            }
          },
          "ConfigureHostname" : {
            "commands" : {
              "01-set-hostname" : {
                "command" : { "Fn::Join" : [ "", [ "powershell.exe Rename-Computer -NewName ", { "Fn::GetAtt" : [ "GetACIHostName", "HostName" ]}, "01a", " -Restart" ]]},
                "waitAfterCompletion" : "forever"
              }
            }
          }
        }
      },
      "Properties" : {
        "ImageId" : { "Fn::GetAtt" : [ "GetWindowsImageId", "ImageId" ]},
        "InstanceType" : { "Fn::FindInMap" : [ "InstanceTypeMap", "ACI", { "Ref" : "EnvironmentType" }]},
        "IamInstanceProfile" : { "Ref" : "InstanceProfile" },
        "KeyName" : { "Fn::If" : [ "ConfigureKey", { "Ref" : "KeyName" }, { "Ref" : "AWS::NoValue" }]},
        "NetworkInterfaces" : [{
          "Description"              : { "Fn::Join" : [ "-", [ { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }}, { "Ref" : "ApplicationName" }, "ACINetworkInterface01A", "eth0" ]]},
          "DeviceIndex"              : "0",
          "SubnetId"                 : { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-ApplicationSubnetA" }},
          "PrivateIpAddress"         : { "Fn::If" : [ "ConfigureStaticAddress", { "Fn::GetAtt" : [ "AddressCalculatorA", "Address13" ]}, { "Ref" : "AWS::NoValue" }]},
          "GroupSet"                 : [{ "Ref" :  "DataStagingInstanceSecurityGroup" }],
          "AssociatePublicIpAddress" : "false",
          "DeleteOnTermination"      : "true"
        }],
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }}, { "Ref" : "ApplicationName" }, "ACIInstance01A" ]]}},
          { "Fn::If" : [ "ConfigureSchedule", { "Key" : "Schedule", "Value" : { "Ref" : "Schedule" }}, { "Ref" : "AWS::NoValue" }]}
        ],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : [ "\n", [
          "<script>",
          { "Fn::Sub" : "cfn-init.exe --verbose --configsets All --stack ${AWS::StackId} --resource ACIInstance01A --region ${AWS::Region}" },
          { "Fn::Sub" : "cfn-signal.exe --exit-code %ERRORLEVEL% --stack ${AWS::StackName} --resource ACIInstance01A --region ${AWS::Region}" },
          "</script>"
        ]]}}
      },
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT20M"
        }
      }
    }
  },

  "Outputs" : {
    "InventoryDetailInstance01A" : {
      "Description" : "The InventoryDetailInstance01A",
      "Value" : { "Ref" : "InventoryDetailInstance01A" }
    },

    "InventoryDetailHostName01A" : {
      "Description" : "The InventoryDetailHostName01A",
      "Value" : { "Fn::Join" : [ "", [ { "Fn::GetAtt" : [ "GetInventoryDetailHostName", "HostName" ]}, "01a.", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCDomain" }}]]}
    },

    "FLIFOInstance01A" : {
      "Description" : "The FLIFOInstance01A",
      "Value" : { "Ref" : "FLIFOInstance01A" }
    },

    "FLIFOHostName01A" : {
      "Description" : "The FLIFOHostName01A",
      "Value" : { "Fn::Join" : [ "", [ { "Fn::GetAtt" : [ "GetFLIFOHostName", "HostName" ]}, "01a.", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCDomain" }}]]}
    },

    "ScheduleInstance01A" : {
      "Description" : "The ScheduleInstance01A",
      "Value" : { "Ref" : "ScheduleInstance01A" }
    },

    "ScheduleHostName01A" : {
      "Description" : "The ScheduleHostName01A",
      "Value" : { "Fn::Join" : [ "", [ { "Fn::GetAtt" : [ "GetScheduleHostName", "HostName" ]}, "01a.", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCDomain" }}]]}
    },

    "ETicketInstance01A" : {
      "Description" : "The ETicketInstance01A",
      "Value" : { "Ref" : "ETicketInstance01A" }
    },

    "ETicketHostName01A" : {
      "Description" : "The ETicketHostName01A",
      "Value" : { "Fn::Join" : [ "", [ { "Fn::GetAtt" : [ "GetETicketHostName", "HostName" ]}, "01a.", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCDomain" }}]]}
    },

    "PNRInstance01A" : {
      "Description" : "The PNRInstance01A",
      "Value" : { "Ref" : "PNRInstance01A" }
    },

    "PNRHostName01A" : {
      "Description" : "The PNRHostName01A",
      "Value" : { "Fn::Join" : [ "", [ { "Fn::GetAtt" : [ "GetPNRHostName", "HostName" ]}, "01a.", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCDomain" }}]]}
    },

    "ACIInstance01A" : {
      "Description" : "The ACIInstance01A",
      "Value" : { "Ref" : "ACIInstance01A" }
    },

    "ACIHostName01A" : {
      "Description" : "The ACIHostName01A",
      "Value" : { "Fn::Join" : [ "", [ { "Fn::GetAtt" : [ "GetACIHostName", "HostName" ]}, "01a.", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCDomain" }}]]}
    }
  }
}
