{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Application-WebSphereMQ-QueueInstances Template. This is a layer in the WebSphereMQ application, which creates the InstanceProfile, and separate QueueInstances.",

  "Metadata" : {
    "AWS::CloudFormation::Interface" : {
      "ParameterGroups" : [
        {
          "Label" : { "default" : "Stack Dependencies" },
          "Parameters" : [
            "VPCStackName",
            "CustomIdentifierFunctionsStackName",
            "StandardCIDRFunctionsStackName",
            "StandardAMIFunctionsStackName",
            "StandardTopicsStackName"
          ]
        },
        {
          "Label" : { "default" : "Resource Dependencies" },
          "Parameters" : [
            "KeyName",
            "Role",
            "LogGroup",
            "InstanceSecurityGroup",
            "FileSystem"
          ]
        },
        {
          "Label" : { "default" : "System Configuration" },
          "Parameters" : [
            "CompanyName",
            "SystemName"
          ]
        },
        {
          "Label" : { "default" : "Environment Configuration" },
          "Parameters" : [
            "EnvironmentSize",
            "InstanceOS"
          ]
        },
        {
          "Label" : { "default" : "Application Dependencies Configuration" },
          "Parameters" : [
            "ProductsBucket",
            "ProductWebSphereMQFolder",
            "ProductWebSphereMQObject",
            "ConfigurationsBucket",
            "ConfigurationWebSphereMQFolder",
            "ConfigurationWebSphereMQObject"
          ]
        },
        {
          "Label" : { "default" : "Application Configuration" },
          "Parameters" : [
            "ApplicationName",
            "UseStaticAddress",
            "UseFileSystemMonitoring",
            "LogRetention",
            "Schedule"
          ]
        }
      ],

      "ParameterLabels" : {
        "VPCStackName" : { "default" : "VPC Stack Name" },
        "CustomIdentifierFunctionsStackName" : { "default" : "CustomIdentifierFunctions Stack Name" },
        "StandardCIDRFunctionsStackName" : { "default" : "StandardCIDRFunctions Stack Name" },
        "StandardAMIFunctionsStackName" : { "default" : "StandardAMIFunctions Stack Name" },
        "StandardTopicsStackName" : { "default" : "StandardTopics Stack Name" },
        "KeyName" : { "default" : "Key Name" },
        "Role" : { "default" : "Role" },
        "LogGroup" : { "default" : "LogGroup" },
        "InstanceSecurityGroup" : { "default" : "Instance SecurityGroup" },
        "FileSystem" : { "default" : "FileSystem" },
        "CompanyName" : { "default" : "Company Name" },
        "SystemName" : { "default" : "System Name" },
        "EnvironmentSize" : { "default" : "Environment Size" },
        "InstanceOS" : { "default" : "Instance Operating System" },
        "ProductsBucket" : { "default" : "Products Bucket" },
        "ProductWebSphereMQFolder" : { "default" : "Product WebSphereMQ Folder" },
        "ProductWebSphereMQObject" : { "default" : "Product WebSphereMQ Object" },
        "ConfigurationsBucket" : { "default" : "Configurations Bucket" },
        "ConfigurationWebSphereMQFolder" : { "default" : "Configuration WebSphereMQ Folder" },
        "ConfigurationWebSphereMQObject" : { "default" : "Configuration WebSphereMQ Object" },
        "ApplicationName" : { "default" : "Application Name" },
        "UseStaticAddress" : { "default" : "Use Static Address" },
        "UseFileSystemMonitoring" : { "default" : "Use FileSystem Monitoring" },
        "LogRetention" : { "default" : "Log Retention" },
        "Schedule" : { "default" : "Schedule" }
      }
    }
  },

  "Parameters" : {
    "VPCStackName" : {
      "Description" : "Name of the CloudFormation Stack containing the VPC",
      "Type" : "String",
      "MinLength" : 8,
      "MaxLength" : 64,
      "Default" : "Production-VPC",
      "AllowedPattern" : "^[A-Z][-a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters and dashes."
    },

    "CustomIdentifierFunctionsStackName" : {
      "Description" : "Name of the CloudFormation Stack containing the Custom Identifier Functions",
      "Type" : "String",
      "MaxLength" : 64,
      "Default" : "CustomIdentifierFunctions",
      "AllowedPattern" : "(^$|^[A-Z][-a-zA-Z0-9]*$)",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters and dashes."
    },

    "StandardCIDRFunctionsStackName" : {
      "Description" : "Name of the CloudFormation Stack containing the Standard CIDR Functions",
      "Type" : "String",
      "MaxLength" : 64,
      "Default" : "StandardCIDRFunctions",
      "AllowedPattern" : "(^$|^[A-Z][-a-zA-Z0-9]*$)",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters and dashes."
    },

    "StandardAMIFunctionsStackName" : {
      "Description" : "Name of the CloudFormation Stack containing the Standard AMI Functions",
      "Type" : "String",
      "MaxLength" : 64,
      "Default" : "StandardAMIFunctions",
      "AllowedPattern" : "(^$|^[A-Z][-a-zA-Z0-9]*$)",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters and dashes."
    },

    "StandardTopicsStackName" : {
      "Description" : "Name of the CloudFormation Stack containing Standard Topics",
      "Type" : "String",
      "MinLength" : 2,
      "MaxLength" : 64,
      "Default" : "StandardTopics",
      "AllowedPattern" : "^[A-Z][-a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters and dashes."
    },

    "KeyName" : {
      "Description" : "Name of an existing KeyPair to enable SSH access to the Instances",
      "Type" : "AWS::EC2::KeyPair::KeyName",
      "MaxLength" : 32,
      "Default" : "administrator",
      "AllowedPattern" : "(^$|^[_a-zA-Z0-9]*$)",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    },

    "Role" : {
      "Description" : "Name of an existing Role which provides permissions needed by the Instance",
      "Type" : "String",
      "MaxLength" : 128,
      "AllowedPattern" : "^[-a-zA-Z0-9]*$",
      "ConstraintDescription" : "must be the name of an existing Role."
    },

    "LogGroup" : {
      "Description" : "Name of an existing LogGroup which provides access to CloudWatch Logs",
      "Type" : "String",
      "MaxLength" : 128,
      "AllowedPattern" : "^[-a-zA-Z0-9]*$",
      "ConstraintDescription" : "must be the name of an existing LogGroup."
    },

    "InstanceSecurityGroup" : {
      "Description" : "ID of an existing SecurityGroup which controls access to the Instances",
      "Type" : "AWS::EC2::SecurityGroup::Id",
      "MaxLength" : 32,
      "AllowedPattern" : "^sg-[0-9a-f]{8}$",
      "ConstraintDescription" : "must be the name of an existing SecurityGroup."
    },

    "FileSystem" : {
      "Description" : "Name of an existing FileSystem which provides shared Instance storage",
      "Type" : "String",
      "MaxLength" : 128,
      "AllowedPattern" : "^[-a-zA-Z0-9]*$",
      "ConstraintDescription" : "must be the name of an existing FileSystem."
    },

    "CompanyName" : {
      "Description" : "Name of the Company associated with the Stack",
      "Type" : "String",
      "MinLength" : 2,
      "MaxLength" : 32,
      "Default" : "Travel",
      "AllowedPattern" : "^[A-Z][a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters."
    },

    "SystemName" : {
      "Description" : "Name of the System associated with the Stack",
      "Type" : "String",
      "MinLength" : 2,
      "MaxLength" : 32,
      "Default" : "IROPS",
      "AllowedPattern" : "^[A-Z][a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters."
    },

    "EnvironmentSize" : {
      "Description" : "Size of the Environment to build. Used to select size-related options in Mappings",
      "Type" : "String",
      "Default" : "small",
      "AllowedValues" : [ "small", "medium", "large", "xlarge" ],
      "ConstraintDescription" : "must be small, medium, large or xlarge."
    },

    "InstanceOS" : {
      "Description" : "The Operating System to use for Instances",
      "Type" : "String",
      "Default" : "AMZN",
      "AllowedValues" : [ "AMZN", "RHEL" ],
      "ConstraintDescription" : "must be AMZN = \"Amazon Linux 2016.09.1\" or RHEL = \"RHEL 7.3\"."
    },

    "ProductsBucket" : {
      "Description" : "S3 bucket containing 3rd-Party Products to be deployed",
      "Type" : "String",
      "MaxLength" : 64,
      "Default" : "products-us-west-2-irops",
      "AllowedPattern" : "^[a-z][-a-z0-9]*$",
      "ConstraintDescription" : "must begin with a lower case letter and contain only lower case letters, numbers and dashes."
    },

    "ProductWebSphereMQFolder" : {
      "Description" : "Folder within S3 bucket containing WebSphereMQ product objects",
      "Type" : "String",
      "MinLength" : 2,
      "MaxLength" : 32,
      "Default" : "WebSphereMQ",
      "AllowedPattern" : "^[A-Z][a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters."
    },

    "ProductWebSphereMQObject" : {
      "Description" : "Object within S3 bucket and folder containing WebSphereMQ installer",
      "Type" : "String",
      "MaxLength" : 64,
      "Default" : "",
      "AllowedPattern" : "(^$|^[-_.a-zA-Z0-9]*$)",
      "ConstraintDescription" : "must be a valid filename, not containing slashes."
    },

    "ConfigurationsBucket" : {
      "Description" : "S3 bucket containing Configurations to be deployed",
      "Type" : "String",
      "MinLength" : 2,
      "MaxLength" : 64,
      "Default" : "configurations-us-west-2-irops",
      "AllowedPattern" : "^[a-z][-a-z0-9]*$",
      "ConstraintDescription" : "must begin with a lower case letter and contain only lower case letters, numbers and dashes."
    },

    "ConfigurationWebSphereMQFolder" : {
      "Description" : "Folder within S3 bucket containing WebSphereMQ configuration objects",
      "Type" : "String",
      "MinLength" : 2,
      "MaxLength" : 32,
      "Default" : "WebSphereMQ",
      "AllowedPattern" : "^[A-Z][a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters."
    },

    "ConfigurationWebSphereMQObject" : {
      "Description" : "Object within S3 bucket and folder containing WebSphereMQ configuration",
      "Type" : "String",
      "MaxLength" : 64,
      "Default" : "",
      "AllowedPattern" : "(^$|^[-_.a-zA-Z0-9]*$)",
      "ConstraintDescription" : "must be a valid filename, not containing slashes."
    },

    "ApplicationName" : {
      "Description" : "Name of the Application associated with the Stack",
      "Type" : "String",
      "MinLength" : 2,
      "MaxLength" : 32,
      "Default" : "WebSphereMQ",
      "AllowedPattern" : "^[A-Z][a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters."
    },

    "UseStaticAddress" : {
      "Description" : "Create and attach a separate Static Address",
      "Type" : "String",
      "Default" : "true",
      "AllowedValues" : [ "true", "false" ],
      "ConstraintDescription" : "must be either true or false."
    },

    "UseFileSystemMonitoring" : {
      "Description" : "Send EFS NFS Statistics to CloudWatch as Custom Metrics",
      "Type" : "String",
      "Default" : "true",
      "AllowedValues" : [ "true", "false" ],
      "ConstraintDescription" : "must be either true or false."
    },

    "LogRetention" : {
      "Description" : "Number of days to retain CloudWatch Log Events (0 disables use of CloudWatch Logs)",
      "Type" : "Number",
      "Default" : 14,
      "AllowedValues" : [ 0, 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653 ],
      "ConstraintDescription" : "must be: 0 (disabled), 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827 or 3653."
    },

    "Schedule" : {
      "Description" : "Schedule Tag Value (blank disables Scheduler)",
      "Type" : "String",
      "Default" : "",
      "AllowedPattern" : "(^$|^([0-9]|1[0-9]|2[0-3]):[0-5][0-9]-([0-9]|1[0-9]|2[0-3]):[0-5][0-9]T?$)",
      "ConstraintDescription" : "See Scheduler Lambda Function description for Tag format."
    }
  },

  "Mappings" : {
    "InstanceTypeMap" : {
      "Queue" : { "small" : "c4.large", "medium" : "c4.xlarge", "large" : "c4.2xlarge", "xlarge" : "c4.4xlarge" }
    }
  },

  "Conditions" : {
    "ConfigureKey" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Ref" : "KeyName" }, "" ]}]},
    "ConfigureAMZN" : { "Fn::Equals" : [{ "Ref" : "InstanceOS" }, "AMZN" ]},
    "ConfigureRHEL" : { "Fn::Equals" : [{ "Ref" : "InstanceOS" }, "RHEL" ]},
    "DownloadProduct" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Ref" : "ProductWebSphereMQObject" }, "" ]}]},
    "DownloadConfiguration" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Ref" : "ConfigurationWebSphereMQObject" }, "" ]}]},
    "ConfigureStaticAddress" : { "Fn::Equals" : [{ "Ref" : "UseStaticAddress" }, "true" ]},
    "ConfigureMQHAFileSystemMonitoring" : { "Fn::Equals" : [{ "Ref" : "UseFileSystemMonitoring" }, "true" ]},
    "ConfigureLogs" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Ref" : "LogRetention" }, "0" ]}]},
    "ConfigureSchedule" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Ref" : "Schedule" }, "" ]}]}
  },

  "Resources" : {
    "GetHostName" : {
      "Type" : "Custom::GetHostName",
      "Properties" : {
        "ServiceToken" : { "Fn::ImportValue" : { "Fn::Sub" : "${CustomIdentifierFunctionsStackName}-GetHostNameFunctionArn" }},
        "CompanyName" : { "Ref" : "CompanyName" },
        "LocationName" : { "Ref": "AWS::Region" },
        "EnvironmentName" : { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }},
        "ApplicationName" : { "Ref" : "ApplicationName" }
      }
    },

    "GetAmazonLinuxImageId" : {
      "Type" : "Custom::GetAmazonLinuxImageId",
      "Properties" : {
        "ServiceToken" : { "Fn::ImportValue" : { "Fn::Sub" : "${StandardAMIFunctionsStackName}-GetAmazonLinuxImageIdFunctionArn" }},
        "Region" : { "Ref" : "AWS::Region" },
        "Architecture" : "HVM64"
      },
      "Condition" : "ConfigureAMZN"
    },

    "GetRHELImageId" : {
      "Type" : "Custom::GetRHELImageId",
      "Properties" : {
        "ServiceToken" : { "Fn::ImportValue" : { "Fn::Sub" : "${StandardAMIFunctionsStackName}-GetRHELImageIdFunctionArn" }},
        "Region" : { "Ref" : "AWS::Region" },
        "OSName" : "RHEL 7.3"
      },
      "Condition" : "ConfigureRHEL"
    },

    "InstanceProfile" : {
      "Type" : "AWS::IAM::InstanceProfile",
      "Properties" : {
        "Path" : "/",
        "Roles" : [{ "Ref" : "Role" }]
      }
    },

    "AddressCalculatorA" : {
      "Type" : "Custom::AddressCalculator",
      "Properties" : {
        "ServiceToken" : { "Fn::ImportValue" : { "Fn::Sub" : "${StandardCIDRFunctionsStackName}-AddressCalculatorFunctionArn" }},
        "SubnetId" : { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-QueueSubnetA" }}
      },
      "Condition" : "ConfigureStaticAddress"
    },

    "QueueInstanceA" : {
      "Type" : "AWS::EC2::Instance",
      "Metadata" : {
        "AWS::CloudFormation::Authentication" : {
          "S3Credentials" : {
            "type" : "S3",
            "roleName" : { "Ref" : "Role" },
            "buckets" : [
              { "Ref" : "ProductsBucket" },
              { "Ref" : "ConfigurationsBucket" }
            ]
          }
        },
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "All" : [
              "UpdateOS",
              { "Fn::If" : [ "ConfigureAMZN", "ConfigureOSUpdates", { "Ref": "AWS::NoValue" }]},
              "ConfigureHostname",
              "ConfigureOS",
              "ConfigureMQHAFileSystem",
              { "Fn::If" : [ "ConfigureMQHAFileSystemMonitoring", "ConfigureMQHAFileSystemMonitoring", { "Ref": "AWS::NoValue" }]},
              "ConfigureCFN",
              "InstallSSMAgent",
              { "Fn::If" : [ "DownloadProduct", "DownloadWebSphereMQ", { "Ref": "AWS::NoValue" }]},
              { "Fn::If" : [ "DownloadConfiguration", "ConfigureWebSphereMQ", { "Ref": "AWS::NoValue" }]},
              { "Fn::If" : [ "ConfigureLogs", { "Fn::If" : [ "ConfigureAMZN", "InstallLogs", "BuildLogs" ]}, { "Ref": "AWS::NoValue" }]},
              { "Fn::If" : [ "ConfigureLogs", "ConfigureLogs", { "Ref": "AWS::NoValue" }]}
            ]
          },
          "UpdateOS" : {
            "commands" : {
              "01_yum_update" : {
                "command" : "yum update -y",
                "ignoreErrors" : "false"
              }
            }
          },
          "ConfigureOSUpdates" : {
            "packages" : {
              "yum" : {
                "yum-cron" : []
              }
            },
            "files" : {
              "/etc/yum/yum-cron.conf" : {
                "content" : { "Fn::Join" : [ "", [
                  "[commands]\n",
                  "update_cmd = security\n",
                  "update_messages = yes\n",
                  "download_updates = yes\n",
                  "apply_updates = yes\n",
                  "random_sleep = 10\n"
                ]]},
                "mode"  : "000644",
                "owner" : "root",
                "group" : "root"
              }
            }
          },
          "ConfigureHostname" : {
            "files" : {
              "/root/bin/sethostname" : {
                "content" : { "Fn::Join" : [ "", [
                  "#!/bin/bash\n",
                  "zone=$(curl -s -m 60 http://169.254.169.254/latest/meta-data/placement/availability-zone)\n",
                  "region=${zone::-1}\n",
                  "hostname=", { "Fn::Join" : [ "", [ { "Fn::GetAtt" : [ "GetHostName", "HostName" ]}, "01a.", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCDomain" }}]]}, "\n",
                  "address=$(curl -s -m 60 http://169.254.169.254/latest/meta-data/local-ipv4)\n",
                  "sed -i -e \"/^$address/d\" -e \"$ a$address $hostname ${hostname%%.*} wmqa\" /etc/hosts\n",
                  "hostname $hostname\n"
                ]]},
                "mode"  : "000700",
                "owner" : "root",
                "group" : "root"
              }
            },
            "commands" : {
              "01_sethostname" : {
                "command" : "/root/bin/sethostname",
                "ignoreErrors" : "false"
              }
            }
          },
          "ConfigureOS" : {
            "users" : {
              "mqm" : {}
            },
            "files" : {
              "/etc/profile.d/local.sh" : {
                "content" : { "Fn::Join" : [ "", [
                  "alias lsa='ls -lAF'\n",
                  "alias ip4='ip addr | grep \" inet \"'\n"
                ]]},
                "mode"  : "000644",
                "owner" : "root",
                "group" : "root"
              },
              "/home/mqm/.bashrc" : {
                "content" : { "Fn::Join" : [ "", [
                  "# .bashrc\n",
                  "\n",
                  "# Source global definitions\n",
                  "if [ -f /etc/bashrc ]; then\n",
                  "        . /etc/bashrc\n",
                  "fi\n",
                  "\n",
                  "# User specific aliases and functions\n",
                ]]},
                "mode"  : "000644",
                "owner" : "mqm",
                "group" : "mqm"
              },
              "/home/mqm/.bash_profile" : {
                "content" : { "Fn::Join" : [ "", [
                  "# .bash_profile\n",
                  "\n",
                  "# Get the aliases and functions\n",
                  "if [ -f ~/.bashrc ]; then\n",
                  "        . ~/.bashrc\n",
                  "fi\n",
                  "\n",
                  "# User specific environment and startup programs\n",
                  "\n",
                  "PATH=$PATH:$HOME/.local/bin:$HOME/bin:/var/mqm:/opt:.\n",
                  "\n",
                  "export PATH\n",
                  "\n",
                  "set -o vi\n"
                ]]},
                "mode"  : "000644",
                "owner" : "mqm",
                "group" : "mqm"
              },
              "/etc/sysctl.d/40-mqm.conf" : {
                "content" : { "Fn::Join" : [ "", [
                  "# Additional Kernel Parameters needed for WebSphereMQ\n",
                  "kernel.sem = 32000 1024000000 500 32000\n",
                  "fs.file-max = 524288\n",
                  "kernel.pid_max = 131072\n",
                  "kernel.threads-max = 131072\n",
                  "vm.overcommit_memory = 2\n"
                ]]},
                "mode"  : "000644",
                "owner" : "root",
                "group" : "root"
              },
              "/etc/security/limits.conf" : {
                "content" : { "Fn::Join" : [ "", [
                  "# /etc/security/limits.conf\n",
                  "# Increased limits needed for WebSphereMQ\n",
                  "#<domain>  <type>  <item>  <value>\n",
                  "mqm        hard    nofile  32760\n",
                  "mqm        soft    nofile  32760\n",
                  "mqm        hard    nproc   32760\n",
                  "mqm        soft    nproc   32760\n"
                ]]},
                "mode"  : "000644",
                "owner" : "root",
                "group" : "root"
              }
            },
            "commands" : {
              "01_usermod_mqm" : {
                "command" : "usermod -s /bin/bash mqm",
                "ignoreErrors" : "false"
              },
              "02_chown_home_mqm" : {
                "command" : "chown -R mqm:mqm /home/mqm",
                "ignoreErrors" : "false"
              },
              "03_mkdir_opt_mqm" : {
                "command" : "mkdir -p /opt/mqm",
                "ignoreErrors" : "false"
              },
              "04_chown_opt_mqm" : {
                "command" : "chown -R mqm:mqm /opt/mqm",
                "ignoreErrors" : "false"
              },
              "05_mkdir_var_mqm" : {
                "command" : "mkdir -p /var/mqm",
                "ignoreErrors" : "false"
              },
              "06_chown_var_mqm" : {
                "command" : "chown -R mqm:mqm /var/mqm",
                "ignoreErrors" : "false"
              },
              "07_mkdir_mqha" : {
                "command" : "mkdir -p /MQHA",
                "ignoreErrors" : "false"
              },
              "08_chown_mqha" : {
                "command" : "chown -R mqm:mqm /MQHA",
                "ignoreErrors" : "false"
              }
            }
          },
          "ConfigureMQHAFileSystem" : {
            "packages" : {
              "yum" : {
                "nfs-utils" : []
              }
            },
            "files" : {
              "/root/bin/mountmqhafilesystem" : {
                "content" : { "Fn::Join" : [ "", [
                  "#!/bin/bash\n",
                  "zone=$(curl -s -m 60 http://169.254.169.254/latest/meta-data/placement/availability-zone)\n",
                  "region=${zone::-1}\n",
                  "filesystem=", { "Ref" : "FileSystem" }, "\n",
                  "echo \"$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] Create /MQHA mount point\"\n",
                  "mkdir -p /MQHA\n",
                  "echo \"$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] Wait for FileSystem DNS name to resolve\"\n",
                  "attempt=0\n",
                  "attempts=30\n",
                  "delay=5\n",
                  "while ((attempt++ <= attempts)); do\n",
                  "    if getent hosts $filesystem.efs.$region.amazonaws.com &> /dev/null; then\n",
                  "        break\n",
                  "    else\n",
                  "        echo \"$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] FileSystem MountTarget not yet available, pausing $delay seconds...\"\n",
                  "        sleep $delay\n",
                  "    fi\n",
                  "done\n",
                  "echo \"$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] Add FileSystem MountPoint to /etc/fstab\"\n",
                  "sed -i -e \"/$filesystem/d\" -e \"$ a$filesystem.efs.$region.amazonaws.com:/ /MQHA nfs nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2\" /etc/fstab\n",
                  "echo \"$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] Mounting /MQHA\"\n",
                  "mount /MQHA\n",
                  "chown -R mqm:mqm /MQHA\n"
                ]]},
                "mode"  : "000700",
                "owner" : "root",
                "group" : "root"
              }
            },
            "commands" : {
              "01_attachvolume" : {
                "command" : "/root/bin/mountmqhafilesystem",
                "ignoreErrors" : "false"
              }
            }
          },
          "ConfigureMQHAFileSystemMonitoring" : {
            "files" : {
              "/root/bin/putfilesystemmetrics" : {
                "content" : { "Fn::Join" : [ "", [
                  "#!/bin/bash\n",
                  "\n",
                  "INPUT=\"$(cat)\"\n",
                  "CW_JSON_OPEN='{ \"Namespace\" : \"EFS\", \"MetricData\" : [ '\n",
                  "CW_JSON_CLOSE=' ] }'\n",
                  "CW_JSON_METRIC=''\n",
                  "METRIC_COUNTER=0\n",
                  "\n",
                  "for COL in 1 2 3 4 5 6; do\n",
                  "\n",
                  " COUNTER=0\n",
                  " METRIC_FIELD=$COL\n",
                  " DATA_FIELD=$(($COL+($COL-1)))\n",
                  "\n",
                  " while read line; do\n",
                  "   if [[ COUNTER -gt 0 ]]; then\n",
                  "\n",
                  "     LINE=`echo $line | tr -s ' ' `\n",
                  "     AWS_COMMAND=\"aws cloudwatch put-metric-data --region ", { "Ref" : "AWS::Region" }, "\"\n",
                  "     MOD=$(( $COUNTER % 2))\n",
                  "\n",
                  "     if [ $MOD -eq 1 ]; then\n",
                  "       METRIC_NAME=`echo $LINE | cut -d ' ' -f $METRIC_FIELD`\n",
                  "     else\n",
                  "       METRIC_VALUE=`echo $LINE | cut -d ' ' -f $DATA_FIELD`\n",
                  "     fi\n",
                  "\n",
                  "     if [[ -n \"$METRIC_NAME\" && -n \"$METRIC_VALUE\" ]]; then\n",
                  "       INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)\n",
                  "       CW_JSON_METRIC=\"$CW_JSON_METRIC { \\\"MetricName\\\" : \\\"$METRIC_NAME\\\", \\\"Dimensions\\\" : [{\\\"Name\\\" : \\\"InstanceId\\\", \\\"Value\\\" : \\\"$INSTANCE_ID\\\"} ], \\\"Value\\\" : $METRIC_VALUE },\"\n",
                  "       unset METRIC_NAME\n",
                  "       unset METRIC_VALUE\n",
                  "\n",
                  "       METRIC_COUNTER=$((METRIC_COUNTER+1))\n",
                  "       if [ $METRIC_COUNTER -eq 20 ]; then\n",
                  "         # 20 is max metric collection size, so we have to submit here\n",
                  "         aws cloudwatch put-metric-data --region ", { "Ref" : "AWS::Region" }, " --cli-input-json \"`echo $CW_JSON_OPEN ${CW_JSON_METRIC%?} $CW_JSON_CLOSE`\"\n",
                  "\n",
                  "         # reset\n",
                  "         METRIC_COUNTER=0\n",
                  "         CW_JSON_METRIC=''\n",
                  "       fi\n",
                  "     fi  \n",
                  "\n",
                  "\n",
                  "\n",
                  "     COUNTER=$((COUNTER+1))\n",
                  "   fi\n",
                  "\n",
                  "   if [[ \"$line\" == \"Client nfs v4:\" ]]; then\n",
                  "     # the next line is the good stuff \n",
                  "     COUNTER=$((COUNTER+1))\n",
                  "   fi\n",
                  " done <<< \"$INPUT\"\n",
                  "done\n",
                  "\n",
                  "# submit whatever is left\n",
                  "aws cloudwatch put-metric-data --region ", { "Ref" : "AWS::Region" }, " --cli-input-json \"`echo $CW_JSON_OPEN ${CW_JSON_METRIC%?} $CW_JSON_CLOSE`\""
                ]]},
                "mode" : "000755",
                "owner" : "root",
                "group" : "root"
              },
              "/root/crontab" : {
                "content" : { "Fn::Join" : [ "", [
                  "* * * * * /usr/sbin/nfsstat | /root/bin/putfilesystemmetrics\n"
                ]]},
                "owner" : "root",
                "group" : "root"
              }
            }
          },
          "ConfigureCFN" : {
            "files" : {
              "/etc/cfn/cfn-hup.conf" : {
                "content" : { "Fn::Join" : [ "", [
                  "[main]\n",
                  "stack=", { "Ref" : "AWS::StackId" }, "\n",
                  "region=", { "Ref" : "AWS::Region" }, "\n"
                ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
                "content" : { "Fn::Join" : [ "", [
                  "[cfn-auto-reloader-hook]\n",
                  "triggers=post.update\n",
                  "path=Resources.QueueInstanceA.Metadata.AWS::CloudFormation::Init\n",
                  "action=/opt/aws/bin/cfn-init --verbose",
                  " --configsets All",
                  " --stack ", { "Ref" : "AWS::StackName" },
                  " --resource QueueInstanceA",
                  " --region ", { "Ref" : "AWS::Region" }, "\n"
                ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              }
            },
            "services" : {
              "sysvinit" : {
                "cfn-hup" : {
                  "enabled" : "true",
                  "ensureRunning" : "true",
                  "files" : [
                    "/etc/cfn/cfn-hup.conf",
                    "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                  ]
                }
              }
            }
          },
          "InstallSSMAgent" : {
            "packages" : {
              "rpm" : {
                "amazon-ssm-agent" : [ "https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm" ]
              }
            }
          },
          "DownloadWebSphereMQ" : {
            "sources" : {
              "/var/tmp" : { "Fn::Sub" : "https://s3-${AWS::Region}.amazonaws.com/${ProductsBucket}/${ProductWebSphereMQFolder}/${ProductWebSphereMQObject}" }
            }
          },
          "ConfigureWebSphereMQ" : {
            "sources" : {
              "/etc" : { "Fn::Sub" : "https://s3-${AWS::Region}.amazonaws.com/${ConfigurationsBucket}/${ConfigurationWebSphereMQFolder}/${ConfigurationWebSphereMQObject}" }
            }
          },
          "InstallLogs" : {
            "packages" : {
              "yum" : {
                "awslogs" : []
              }
            }
          },
          "BuildLogs" : {
            "files" : {
              "/etc/awslogs/awscli.conf" : {
                "content" : { "Fn::Join" : [ "", [
                  "[plugins]\n",
                  "cwlogs = cwlogs\n",
                  "[default]\n",
                  "region = us-east-1\n"
                ]]},
                "mode"  : "000644",
                "owner" : "root",
                "group" : "root"
              },
              "/etc/awslogs/awslogs.conf" : {
                "content" : { "Fn::Join" : [ "", [
                  "[general]\n",
                  "state_file = /var/lib/awslogs/agent-state\n",
                  "[/var/log/messages]\n",
                  "datetime_format = %b %d %H:%M:%S\n",
                  "file = /var/log/messages\n",
                  "buffer_duration = 5000\n",
                  "log_stream_name = {instance_id}\n",
                  "initial_position = start_of_file\n",
                  "log_group_name = /var/log/messages\n"
                ]]},
                "mode"  : "000644",
                "owner" : "root",
                "group" : "root"
              },
              "/root/bin/buildawslogs" : {
                "content" : { "Fn::Join" : [ "", [
                  "#!/bin/bash\n",
                  "zone=$(curl -s -m 60 http://169.254.169.254/latest/meta-data/placement/availability-zone)\n",
                  "region=${zone::-1}\n",
                  "cd /var/tmp\n",
                  "curl -O https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py\n",
                  "python awslogs-agent-setup.py --non-interactive --configfile /etc/awslogs/awslogs.conf --region ", { "Ref" : "AWS::Region" }, "\n",
                  "# Create symlinks to make this work like rpm\n",
                  "ln -s /var/awslogs /var/lib/awslogs\n",
                  "mv /var/awslogs/etc/aws.conf /var/awslogs/etc/aws.conf.bak\n",
                  "ln -s /etc/awslogs/awscli.conf /var/awslogs/etc/aws.conf\n",
                  "mv /var/awslogs/etc/awslogs.conf /var/awslogs/etc/awslogs.conf.bak\n",
                  "ln -s /etc/awslogs/awslogs.conf /var/awslogs/etc/awslogs.conf\n"
                ]]},
                "mode"  : "000700",
                "owner" : "root",
                "group" : "root"
              }
            },
            "commands" : {
              "01_buildawslogs" : {
                "command" : "/root/bin/buildawslogs"
              }
            }
          },
          "ConfigureLogs" : {
            "files" : {
              "/etc/awslogs/awscli.conf" : {
                "content" : { "Fn::Join" : [ "", [
                  "[default]\n",
                  "region = ", { "Ref" : "AWS::Region" }, "\n",
                  "[plugins]\n",
                  "cwlogs = cwlogs\n"
                ]]},
                "mode"  : "000644",
                "owner" : "root",
                "group" : "root"
              },
              "/etc/awslogs/awslogs.conf" : {
                "content" : { "Fn::Join" : [ "", [
                  "[general]\n",
                  "state_file = /var/lib/awslogs/agent-state\n",
                  "[/var/log/messages]\n",
                  "datetime_format = %b %d %H:%M:%S\n",
                  "file = /var/log/messages\n",
                  "log_stream_name = {instance_id}/var/log/messages\n",
                  "log_group_name = ", { "Fn::If" : [ "ConfigureLogs", { "Ref" : "LogGroup" }, { "Ref" : "AWS::NoValue" }]}, "\n",
                  "[/var/log/secure]\n",
                  "datetime_format = %b %d %H:%M:%S\n",
                  "file = /var/log/secure\n",
                  "log_stream_name = {instance_id}/var/log/secure\n",
                  "log_group_name = ", { "Fn::If" : [ "ConfigureLogs", { "Ref" : "LogGroup" }, { "Ref" : "AWS::NoValue" }]}, "\n",
                  "[/var/log/cron]\n",
                  "datetime_format = %b %d %H:%M:%S\n",
                  "file = /var/log/cron\n",
                  "log_stream_name = {instance_id}/var/log/cron\n",
                  "log_group_name = ", { "Fn::If" : [ "ConfigureLogs", { "Ref" : "LogGroup" }, { "Ref" : "AWS::NoValue" }]}, "\n",
                  "[/var/log/cloud-init.log]\n",
                  "datetime_format = %b %d %H:%M:%S\n",
                  "file = /var/log/cloud-init.log\n",
                  "log_stream_name = {instance_id}/var/log/cloud-init.log\n",
                  "log_group_name = ", { "Fn::If" : [ "ConfigureLogs", { "Ref" : "LogGroup" }, { "Ref" : "AWS::NoValue" }]}, "\n",
                  "[/var/log/cfn-init.log]\n",
                  "datetime_format = %Y-%m-%d %H:%M:%S\n",
                  "file = /var/log/cfn-init.log\n",
                  "log_stream_name = {instance_id}/var/log/cfn-init.log\n",
                  "log_group_name = ", { "Fn::If" : [ "ConfigureLogs", { "Ref" : "LogGroup" }, { "Ref" : "AWS::NoValue" }]}, "\n",
                  "[/var/log/cfn-hup.log]\n",
                  "datetime_format = %Y-%m-%d %H:%M:%S\n",
                  "file = /var/log/cfn-hup.log\n",
                  "log_stream_name = {instance_id}/var/log/cfn-hup.log\n",
                  "log_group_name = ", { "Fn::If" : [ "ConfigureLogs", { "Ref" : "LogGroup" }, { "Ref" : "AWS::NoValue" }]}, "\n",
                  "[/var/log/cfn-init-cmd.log]\n",
                  "datetime_format = %Y-%m-%d %H:%M:%S\n",
                  "file = /var/log/cfn-init-cmd.log\n",
                  "log_stream_name = {instance_id}/var/log/cfn-init-cmd.log\n",
                  "log_group_name = ", { "Fn::If" : [ "ConfigureLogs", { "Ref" : "LogGroup" }, { "Ref" : "AWS::NoValue" }]}, "\n",
                  "[/var/log/cloud-init-output.log]\n",
                  "file = /var/log/cloud-init-output.log\n",
                  "log_stream_name = {instance_id}/var/log/cloud-init-output.log\n",
                  "log_group_name = ", { "Fn::If" : [ "ConfigureLogs", { "Ref" : "LogGroup" }, { "Ref" : "AWS::NoValue" }]}, "\n",
                  "[/var/log/dmesg]\n",
                  "file = /var/log/dmesg\n",
                  "log_stream_name = {instance_id}/var/log/dmesg\n",
                  "log_group_name = ", { "Fn::If" : [ "ConfigureLogs", { "Ref" : "LogGroup" }, { "Ref" : "AWS::NoValue" }]}, "\n",
                  "[/var/log/httpd/access_log]\n",
                  "file = /var/log/httpd/access_log\n",
                  "log_stream_name = {instance_id}/var/log/httpd/access_log\n",
                  "log_group_name = ", { "Fn::If" : [ "ConfigureLogs", { "Ref" : "LogGroup" }, { "Ref" : "AWS::NoValue" }]}, "\n",
                  "[/var/log/httpd/error_log]\n",
                  "file = /var/log/httpd/error_log\n",
                  "log_stream_name = {instance_id}/var/log/httpd/error_log\n",
                  "log_group_name = ", { "Fn::If" : [ "ConfigureLogs", { "Ref" : "LogGroup" }, { "Ref" : "AWS::NoValue" }]}, "\n"
                ]]},
                "mode"  : "000644",
                "owner" : "root",
                "group" : "root"
              }
            },
            "services" : {
              "sysvinit" : {
                "awslogs" : {
                  "enabled" : "true",
                  "ensureRunning" : "true",
                  "packages" : { "yum" : [ "awslogs" ]},
                  "files" : [
                    "/etc/awslogs/awslogs.conf",
                    "/etc/awslogs/awscli.conf"
                  ]
                }
              }
            }
          }
        }
      },
      "Properties" : {
        "ImageId" : { "Fn::If" : [ "ConfigureAMZN", { "Fn::GetAtt" : [ "GetAmazonLinuxImageId", "ImageId" ]},
                                                    { "Fn::GetAtt" : [ "GetRHELImageId", "ImageId" ]}]},
        "InstanceType" : { "Fn::FindInMap" : [ "InstanceTypeMap", "Queue", { "Ref" : "EnvironmentSize" }]},
        "IamInstanceProfile" : { "Ref" : "InstanceProfile" },
        "KeyName" : { "Fn::If" : [ "ConfigureKey", { "Ref" : "KeyName" }, { "Ref" : "AWS::NoValue" }]},
        "NetworkInterfaces" : [{
          "Description"              : { "Fn::Join" : [ "-", [ { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }}, { "Ref" : "ApplicationName" }, "NetworkInterfaceA", "eth0" ]]},
          "DeviceIndex"              : "0",
          "SubnetId"                 : { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-QueueSubnetA" }},
          "PrivateIpAddress"         : { "Fn::If" : [ "ConfigureStaticAddress", { "Fn::GetAtt" : [ "AddressCalculatorA", "Address4" ]}, { "Ref" : "AWS::NoValue" }]},
          "GroupSet"                 : [{ "Ref" :  "InstanceSecurityGroup" }],
          "AssociatePublicIpAddress" : "false",
          "DeleteOnTermination"      : "true"
        }],
        "BlockDeviceMappings" : [{
          "DeviceName" : { "Fn::If" : [ "ConfigureAMZN", "/dev/xvda", "/dev/sda1" ]},
          "Ebs" : {
            "VolumeSize" : "32"
          }
        }],
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }}, { "Ref" : "ApplicationName" }, "QueueInstanceA" ]]}},
          { "Fn::If" : [ "ConfigureSchedule", { "Key" : "Schedule", "Value" : { "Ref" : "Schedule" }}, { "Ref" : "AWS::NoValue" }]}
        ],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : [ "", [
          "#!/bin/bash -xe\n",
          { "Fn::If" : [ "ConfigureRHEL", { "Fn::Join" : [ "", [
            "# Add to RHEL what Amazon Linux includes\n",
            "# Install EPEL\n",
            "yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm\n",
            "# Install Python Pip and Python Daemon\n",
            "yum install -y python-pip python-daemon\n",
            "pip install --upgrade pip\n",
            "# Install AWS CLI\n",
            "pip install awscli\n",
            "# Install AWS CLI CloudWatch Logs Plugin\n",
            "pip install awscli-cwlogs\n",
            "# Download CFN Bootstrap\n",
            "cd /opt\n",
            "curl -O https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
            "tar -xvpf aws-cfn-bootstrap-latest.tar.gz\n",
            "rm -f aws-cfn-bootstrap-latest.tar.gz\n",
            "# Build and Install CFN Bootstrap\n",
            "cd aws-cfn-bootstrap-*\n",
            "python setup.py build\n",
            "python setup.py install\n",
            "cd /opt\n",
            "rm -Rf aws-cfn-bootstrap-*\n",
            "# Create CFN Bootstrap symlinks\n",
            "ln -s /usr/init/redhat/cfn-hup /etc/init.d/cfn-hup\n",
            "chmod 775 /usr/init/redhat/cfn-hup\n",
            "mkdir -p /opt/aws/bin\n",
            "ln -s /usr/bin/cfn-hup /opt/aws/bin/cfn-hup\n",
            "ln -s /usr/bin/cfn-init /opt/aws/bin/cfn-init\n",
            "ln -s /usr/bin/cfn-signal /opt/aws/bin/cfn-signal\n",
            "ln -s /usr/bin/cfn-elect-cmd-leader /opt/aws/bin/cfn-elect-cmd-leader\n",
            "ln -s /usr/bin/cfn-get-metadata /opt/aws/bin/cfn-get-metadata\n",
            "ln -s /usr/bin/cfn-send-cmd-event /opt/aws/bin/cfn-send-cmd-event\n",
            "ln -s /usr/bin/cfn-send-cmd-result /opt/aws/bin/cfn-send-cmd-result\n"
          ]]},
            "yum update -y aws-cfn-bootstrap\n"
          ]},
          "\n",
          "# Install the files and packages from the metadata\n",
          "/opt/aws/bin/cfn-init --verbose",
          " --configsets All",
          " --stack ", { "Ref" : "AWS::StackName" },
          " --resource QueueInstanceA",
          " --region ", { "Ref" : "AWS::Region" }, "\n",
          "\n",
          "# Signal the status from cfn-init\n",
          "/opt/aws/bin/cfn-signal --exit-code $?",
          " --stack ", { "Ref" : "AWS::StackName" },
          " --resource QueueInstanceA",
          " --region ", { "Ref" : "AWS::Region" }, "\n"
        ]]}}
      },
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT10M"
        }
      }
    },

    "AddressCalculatorB" : {
      "Type" : "Custom::AddressCalculator",
      "Properties" : {
        "ServiceToken" : { "Fn::ImportValue" : { "Fn::Sub" : "${StandardCIDRFunctionsStackName}-AddressCalculatorFunctionArn" }},
        "SubnetId" : { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-QueueSubnetB" }}
      },
      "Condition" : "ConfigureStaticAddress"
    },

    "QueueInstanceB" : {
      "Type" : "AWS::EC2::Instance",
      "Metadata" : {
        "AWS::CloudFormation::Authentication" : {
          "S3Credentials" : {
            "type" : "S3",
            "roleName" : { "Ref" : "Role" },
            "buckets" : [
              { "Ref" : "ProductsBucket" },
              { "Ref" : "ConfigurationsBucket" }
            ]
          }
        },
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "All" : [
              "UpdateOS",
              { "Fn::If" : [ "ConfigureAMZN", "ConfigureOSUpdates", { "Ref": "AWS::NoValue" }]},
              "ConfigureHostname",
              "ConfigureOS",
              "ConfigureMQHAFileSystem",
              { "Fn::If" : [ "ConfigureMQHAFileSystemMonitoring", "ConfigureMQHAFileSystemMonitoring", { "Ref": "AWS::NoValue" }]},
              "ConfigureCFN",
              "InstallSSMAgent",
              { "Fn::If" : [ "DownloadProduct", "DownloadWebSphereMQ", { "Ref": "AWS::NoValue" }]},
              { "Fn::If" : [ "DownloadConfiguration", "ConfigureWebSphereMQ", { "Ref": "AWS::NoValue" }]},
              { "Fn::If" : [ "ConfigureLogs", { "Fn::If" : [ "ConfigureAMZN", "InstallLogs", "BuildLogs" ]}, { "Ref": "AWS::NoValue" }]},
              { "Fn::If" : [ "ConfigureLogs", "ConfigureLogs", { "Ref": "AWS::NoValue" }]}
            ]
          },
          "UpdateOS" : {
            "commands" : {
              "01_yum_update" : {
                "command" : "yum update -y",
                "ignoreErrors" : "false"
              }
            }
          },
          "ConfigureOSUpdates" : {
            "packages" : {
              "yum" : {
                "yum-cron" : []
              }
            },
            "files" : {
              "/etc/yum/yum-cron.conf" : {
                "content" : { "Fn::Join" : [ "", [
                  "[commands]\n",
                  "update_cmd = security\n",
                  "update_messages = yes\n",
                  "download_updates = yes\n",
                  "apply_updates = yes\n",
                  "random_sleep = 10\n"
                ]]},
                "mode"  : "000644",
                "owner" : "root",
                "group" : "root"
              }
            }
          },
          "ConfigureHostname" : {
            "files" : {
              "/root/bin/sethostname" : {
                "content" : { "Fn::Join" : [ "", [
                  "#!/bin/bash\n",
                  "zone=$(curl -s -m 60 http://169.254.169.254/latest/meta-data/placement/availability-zone)\n",
                  "region=${zone::-1}\n",
                  "hostname=", { "Fn::Join" : [ "", [ { "Fn::GetAtt" : [ "GetHostName", "HostName" ]}, "01b.", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCDomain" }}]]}, "\n",
                  "address=$(curl -s -m 60 http://169.254.169.254/latest/meta-data/local-ipv4)\n",
                  "sed -i -e \"/^$address/d\" -e \"$ a$address $hostname ${hostname%%.*} wmqb\" /etc/hosts\n",
                  "hostname $hostname\n"
                ]]},
                "mode"  : "000700",
                "owner" : "root",
                "group" : "root"
              }
            },
            "commands" : {
              "01_sethostname" : {
                "command" : "/root/bin/sethostname",
                "ignoreErrors" : "false"
              }
            }
          },
          "ConfigureOS" : {
            "users" : {
              "mqm" : {}
            },
            "files" : {
              "/etc/profile.d/local.sh" : {
                "content" : { "Fn::Join" : [ "", [
                  "alias lsa='ls -lAF'\n",
                  "alias ip4='ip addr | grep \" inet \"'\n"
                ]]},
                "mode"  : "000644",
                "owner" : "root",
                "group" : "root"
              },
              "/home/mqm/.bashrc" : {
                "content" : { "Fn::Join" : [ "", [
                  "# .bashrc\n",
                  "\n",
                  "# Source global definitions\n",
                  "if [ -f /etc/bashrc ]; then\n",
                  "        . /etc/bashrc\n",
                  "fi\n",
                  "\n",
                  "# User specific aliases and functions\n",
                ]]},
                "mode"  : "000644",
                "owner" : "mqm",
                "group" : "mqm"
              },
              "/home/mqm/.bash_profile" : {
                "content" : { "Fn::Join" : [ "", [
                  "# .bash_profile\n",
                  "\n",
                  "# Get the aliases and functions\n",
                  "if [ -f ~/.bashrc ]; then\n",
                  "        . ~/.bashrc\n",
                  "fi\n",
                  "\n",
                  "# User specific environment and startup programs\n",
                  "\n",
                  "PATH=$PATH:$HOME/.local/bin:$HOME/bin:/var/mqm:/opt:.\n",
                  "\n",
                  "export PATH\n",
                  "\n",
                  "set -o vi\n"
                ]]},
                "mode"  : "000644",
                "owner" : "mqm",
                "group" : "mqm"
              },
              "/etc/sysctl.d/40-mqm.conf" : {
                "content" : { "Fn::Join" : [ "", [
                  "# Additional Kernel Parameters needed for WebSphereMQ\n",
                  "kernel.sem = 32000 1024000000 500 32000\n",
                  "fs.file-max = 524288\n",
                  "kernel.pid_max = 131072\n",
                  "kernel.threads-max = 131072\n",
                  "vm.overcommit_memory = 2\n"
                ]]},
                "mode"  : "000644",
                "owner" : "root",
                "group" : "root"
              },
              "/etc/security/limits.conf" : {
                "content" : { "Fn::Join" : [ "", [
                  "# /etc/security/limits.conf\n",
                  "# Increased limits needed for WebSphereMQ\n",
                  "#<domain>  <type>  <item>  <value>\n",
                  "mqm        hard    nofile  32760\n",
                  "mqm        soft    nofile  32760\n",
                  "mqm        hard    nproc   32760\n",
                  "mqm        soft    nproc   32760\n"
                ]]},
                "mode"  : "000644",
                "owner" : "root",
                "group" : "root"
              }
            },
            "commands" : {
              "01_usermod_mqm" : {
                "command" : "usermod -s /bin/bash mqm",
                "ignoreErrors" : "false"
              },
              "02_chown_home_mqm" : {
                "command" : "chown -R mqm:mqm /home/mqm",
                "ignoreErrors" : "false"
              },
              "03_mkdir_opt_mqm" : {
                "command" : "mkdir -p /opt/mqm",
                "ignoreErrors" : "false"
              },
              "04_chown_opt_mqm" : {
                "command" : "chown -R mqm:mqm /opt/mqm",
                "ignoreErrors" : "false"
              },
              "05_mkdir_var_mqm" : {
                "command" : "mkdir -p /var/mqm",
                "ignoreErrors" : "false"
              },
              "06_chown_var_mqm" : {
                "command" : "chown -R mqm:mqm /var/mqm",
                "ignoreErrors" : "false"
              },
              "07_mkdir_mqha" : {
                "command" : "mkdir -p /MQHA",
                "ignoreErrors" : "false"
              },
              "08_chown_mqha" : {
                "command" : "chown -R mqm:mqm /MQHA",
                "ignoreErrors" : "false"
              }
            }
          },
          "ConfigureMQHAFileSystem" : {
            "packages" : {
              "yum" : {
                "nfs-utils" : []
              }
            },
            "files" : {
              "/root/bin/mountmqhafilesystem" : {
                "content" : { "Fn::Join" : [ "", [
                  "#!/bin/bash\n",
                  "zone=$(curl -s -m 60 http://169.254.169.254/latest/meta-data/placement/availability-zone)\n",
                  "region=${zone::-1}\n",
                  "filesystem=", { "Ref" : "FileSystem" }, "\n",
                  "echo \"$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] Create /MQHA mount point\"\n",
                  "mkdir -p /MQHA\n",
                  "echo \"$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] Wait for FileSystem DNS name to resolve\"\n",
                  "attempt=0\n",
                  "attempts=30\n",
                  "delay=5\n",
                  "while ((attempt++ <= attempts)); do\n",
                  "    if getent hosts $filesystem.efs.$region.amazonaws.com &> /dev/null; then\n",
                  "        break\n",
                  "    else\n",
                  "        echo \"$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] FileSystem MountTarget not yet available, pausing $delay seconds...\"\n",
                  "        sleep $delay\n",
                  "    fi\n",
                  "done\n",
                  "echo \"$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] Add FileSystem MountPoint to /etc/fstab\"\n",
                  "sed -i -e \"/$filesystem/d\" -e \"$ a$filesystem.efs.$region.amazonaws.com:/ /MQHA nfs nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2\" /etc/fstab\n",
                  "echo \"$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] Mounting /MQHA\"\n",
                  "mount /MQHA\n",
                  "chown -R mqm:mqm /MQHA\n"
                ]]},
                "mode"  : "000700",
                "owner" : "root",
                "group" : "root"
              }
            },
            "commands" : {
              "01_attachvolume" : {
                "command" : "/root/bin/mountmqhafilesystem",
                "ignoreErrors" : "false"
              }
            }
          },
          "ConfigureMQHAFileSystemMonitoring" : {
            "files" : {
              "/root/bin/putfilesystemmetrics" : {
                "content" : { "Fn::Join" : [ "", [
                  "#!/bin/bash\n",
                  "\n",
                  "INPUT=\"$(cat)\"\n",
                  "CW_JSON_OPEN='{ \"Namespace\" : \"EFS\", \"MetricData\" : [ '\n",
                  "CW_JSON_CLOSE=' ] }'\n",
                  "CW_JSON_METRIC=''\n",
                  "METRIC_COUNTER=0\n",
                  "\n",
                  "for COL in 1 2 3 4 5 6; do\n",
                  "\n",
                  " COUNTER=0\n",
                  " METRIC_FIELD=$COL\n",
                  " DATA_FIELD=$(($COL+($COL-1)))\n",
                  "\n",
                  " while read line; do\n",
                  "   if [[ COUNTER -gt 0 ]]; then\n",
                  "\n",
                  "     LINE=`echo $line | tr -s ' ' `\n",
                  "     AWS_COMMAND=\"aws cloudwatch put-metric-data --region ", { "Ref" : "AWS::Region" }, "\"\n",
                  "     MOD=$(( $COUNTER % 2))\n",
                  "\n",
                  "     if [ $MOD -eq 1 ]; then\n",
                  "       METRIC_NAME=`echo $LINE | cut -d ' ' -f $METRIC_FIELD`\n",
                  "     else\n",
                  "       METRIC_VALUE=`echo $LINE | cut -d ' ' -f $DATA_FIELD`\n",
                  "     fi\n",
                  "\n",
                  "     if [[ -n \"$METRIC_NAME\" && -n \"$METRIC_VALUE\" ]]; then\n",
                  "       INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)\n",
                  "       CW_JSON_METRIC=\"$CW_JSON_METRIC { \\\"MetricName\\\" : \\\"$METRIC_NAME\\\", \\\"Dimensions\\\" : [{\\\"Name\\\" : \\\"InstanceId\\\", \\\"Value\\\" : \\\"$INSTANCE_ID\\\"} ], \\\"Value\\\" : $METRIC_VALUE },\"\n",
                  "       unset METRIC_NAME\n",
                  "       unset METRIC_VALUE\n",
                  "\n",
                  "       METRIC_COUNTER=$((METRIC_COUNTER+1))\n",
                  "       if [ $METRIC_COUNTER -eq 20 ]; then\n",
                  "         # 20 is max metric collection size, so we have to submit here\n",
                  "         aws cloudwatch put-metric-data --region ", { "Ref" : "AWS::Region" }, " --cli-input-json \"`echo $CW_JSON_OPEN ${CW_JSON_METRIC%?} $CW_JSON_CLOSE`\"\n",
                  "\n",
                  "         # reset\n",
                  "         METRIC_COUNTER=0\n",
                  "         CW_JSON_METRIC=''\n",
                  "       fi\n",
                  "     fi  \n",
                  "\n",
                  "\n",
                  "\n",
                  "     COUNTER=$((COUNTER+1))\n",
                  "   fi\n",
                  "\n",
                  "   if [[ \"$line\" == \"Client nfs v4:\" ]]; then\n",
                  "     # the next line is the good stuff \n",
                  "     COUNTER=$((COUNTER+1))\n",
                  "   fi\n",
                  " done <<< \"$INPUT\"\n",
                  "done\n",
                  "\n",
                  "# submit whatever is left\n",
                  "aws cloudwatch put-metric-data --region ", { "Ref" : "AWS::Region" }, " --cli-input-json \"`echo $CW_JSON_OPEN ${CW_JSON_METRIC%?} $CW_JSON_CLOSE`\""
                ]]},
                "mode" : "000755",
                "owner" : "root",
                "group" : "root"
              },
              "/root/crontab" : {
                "content" : { "Fn::Join" : [ "", [
                  "* * * * * /usr/sbin/nfsstat | /root/bin/putfilesystemmetrics\n"
                ]]},
                "owner" : "root",
                "group" : "root"
              }
            }
          },
          "ConfigureCFN" : {
            "files" : {
              "/etc/cfn/cfn-hup.conf" : {
                "content" : { "Fn::Join" : [ "", [
                  "[main]\n",
                  "stack=", { "Ref" : "AWS::StackId" }, "\n",
                  "region=", { "Ref" : "AWS::Region" }, "\n"
                ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
                "content" : { "Fn::Join" : [ "", [
                  "[cfn-auto-reloader-hook]\n",
                  "triggers=post.update\n",
                  "path=Resources.QueueInstanceB.Metadata.AWS::CloudFormation::Init\n",
                  "action=/opt/aws/bin/cfn-init --verbose",
                  " --configsets All",
                  " --stack ", { "Ref" : "AWS::StackName" },
                  " --resource QueueInstanceB",
                  " --region ", { "Ref" : "AWS::Region" }, "\n"
                ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              }
            },
            "services" : {
              "sysvinit" : {
                "cfn-hup" : {
                  "enabled" : "true",
                  "ensureRunning" : "true",
                  "files" : [
                    "/etc/cfn/cfn-hup.conf",
                    "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                  ]
                }
              }
            }
          },
          "InstallSSMAgent" : {
            "packages" : {
              "rpm" : {
                "amazon-ssm-agent" : [ "https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm" ]
              }
            }
          },
          "DownloadWebSphereMQ" : {
            "sources" : {
              "/var/tmp" : { "Fn::Sub" : "https://s3-${AWS::Region}.amazonaws.com/${ProductsBucket}/${ProductWebSphereMQFolder}/${ProductWebSphereMQObject}" }
            }
          },
          "ConfigureWebSphereMQ" : {
            "sources" : {
              "/etc" : { "Fn::Sub" : "https://s3-${AWS::Region}.amazonaws.com/${ConfigurationsBucket}/${ConfigurationWebSphereMQFolder}/${ConfigurationWebSphereMQObject}" }
            }
          },
          "InstallLogs" : {
            "packages" : {
              "yum" : {
                "awslogs" : []
              }
            }
          },
          "BuildLogs" : {
            "files" : {
              "/etc/awslogs/awscli.conf" : {
                "content" : { "Fn::Join" : [ "", [
                  "[plugins]\n",
                  "cwlogs = cwlogs\n",
                  "[default]\n",
                  "region = us-east-1\n"
                ]]},
                "mode"  : "000644",
                "owner" : "root",
                "group" : "root"
              },
              "/etc/awslogs/awslogs.conf" : {
                "content" : { "Fn::Join" : [ "", [
                  "[general]\n",
                  "state_file = /var/lib/awslogs/agent-state\n",
                  "[/var/log/messages]\n",
                  "datetime_format = %b %d %H:%M:%S\n",
                  "file = /var/log/messages\n",
                  "buffer_duration = 5000\n",
                  "log_stream_name = {instance_id}\n",
                  "initial_position = start_of_file\n",
                  "log_group_name = /var/log/messages\n"
                ]]},
                "mode"  : "000644",
                "owner" : "root",
                "group" : "root"
              },
              "/root/bin/buildawslogs" : {
                "content" : { "Fn::Join" : [ "", [
                  "#!/bin/bash\n",
                  "zone=$(curl -s -m 60 http://169.254.169.254/latest/meta-data/placement/availability-zone)\n",
                  "region=${zone::-1}\n",
                  "cd /var/tmp\n",
                  "curl -O https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py\n",
                  "python awslogs-agent-setup.py --non-interactive --configfile /etc/awslogs/awslogs.conf --region ", { "Ref" : "AWS::Region" }, "\n",
                  "# Create symlinks to make this work like rpm\n",
                  "ln -s /var/awslogs /var/lib/awslogs\n",
                  "mv /var/awslogs/etc/aws.conf /var/awslogs/etc/aws.conf.bak\n",
                  "ln -s /etc/awslogs/awscli.conf /var/awslogs/etc/aws.conf\n",
                  "mv /var/awslogs/etc/awslogs.conf /var/awslogs/etc/awslogs.conf.bak\n",
                  "ln -s /etc/awslogs/awslogs.conf /var/awslogs/etc/awslogs.conf\n"
                ]]},
                "mode"  : "000700",
                "owner" : "root",
                "group" : "root"
              }
            },
            "commands" : {
              "01_buildawslogs" : {
                "command" : "/root/bin/buildawslogs"
              }
            }
          },
          "ConfigureLogs" : {
            "files" : {
              "/etc/awslogs/awscli.conf" : {
                "content" : { "Fn::Join" : [ "", [
                  "[default]\n",
                  "region = ", { "Ref" : "AWS::Region" }, "\n",
                  "[plugins]\n",
                  "cwlogs = cwlogs\n"
                ]]},
                "mode"  : "000644",
                "owner" : "root",
                "group" : "root"
              },
              "/etc/awslogs/awslogs.conf" : {
                "content" : { "Fn::Join" : [ "", [
                  "[general]\n",
                  "state_file = /var/lib/awslogs/agent-state\n",
                  "[/var/log/messages]\n",
                  "datetime_format = %b %d %H:%M:%S\n",
                  "file = /var/log/messages\n",
                  "log_stream_name = {instance_id}/var/log/messages\n",
                  "log_group_name = ", { "Fn::If" : [ "ConfigureLogs", { "Ref" : "LogGroup" }, { "Ref" : "AWS::NoValue" }]}, "\n",
                  "[/var/log/secure]\n",
                  "datetime_format = %b %d %H:%M:%S\n",
                  "file = /var/log/secure\n",
                  "log_stream_name = {instance_id}/var/log/secure\n",
                  "log_group_name = ", { "Fn::If" : [ "ConfigureLogs", { "Ref" : "LogGroup" }, { "Ref" : "AWS::NoValue" }]}, "\n",
                  "[/var/log/cron]\n",
                  "datetime_format = %b %d %H:%M:%S\n",
                  "file = /var/log/cron\n",
                  "log_stream_name = {instance_id}/var/log/cron\n",
                  "log_group_name = ", { "Fn::If" : [ "ConfigureLogs", { "Ref" : "LogGroup" }, { "Ref" : "AWS::NoValue" }]}, "\n",
                  "[/var/log/cloud-init.log]\n",
                  "datetime_format = %b %d %H:%M:%S\n",
                  "file = /var/log/cloud-init.log\n",
                  "log_stream_name = {instance_id}/var/log/cloud-init.log\n",
                  "log_group_name = ", { "Fn::If" : [ "ConfigureLogs", { "Ref" : "LogGroup" }, { "Ref" : "AWS::NoValue" }]}, "\n",
                  "[/var/log/cfn-init.log]\n",
                  "datetime_format = %Y-%m-%d %H:%M:%S\n",
                  "file = /var/log/cfn-init.log\n",
                  "log_stream_name = {instance_id}/var/log/cfn-init.log\n",
                  "log_group_name = ", { "Fn::If" : [ "ConfigureLogs", { "Ref" : "LogGroup" }, { "Ref" : "AWS::NoValue" }]}, "\n",
                  "[/var/log/cfn-hup.log]\n",
                  "datetime_format = %Y-%m-%d %H:%M:%S\n",
                  "file = /var/log/cfn-hup.log\n",
                  "log_stream_name = {instance_id}/var/log/cfn-hup.log\n",
                  "log_group_name = ", { "Fn::If" : [ "ConfigureLogs", { "Ref" : "LogGroup" }, { "Ref" : "AWS::NoValue" }]}, "\n",
                  "[/var/log/cfn-init-cmd.log]\n",
                  "datetime_format = %Y-%m-%d %H:%M:%S\n",
                  "file = /var/log/cfn-init-cmd.log\n",
                  "log_stream_name = {instance_id}/var/log/cfn-init-cmd.log\n",
                  "log_group_name = ", { "Fn::If" : [ "ConfigureLogs", { "Ref" : "LogGroup" }, { "Ref" : "AWS::NoValue" }]}, "\n",
                  "[/var/log/cloud-init-output.log]\n",
                  "file = /var/log/cloud-init-output.log\n",
                  "log_stream_name = {instance_id}/var/log/cloud-init-output.log\n",
                  "log_group_name = ", { "Fn::If" : [ "ConfigureLogs", { "Ref" : "LogGroup" }, { "Ref" : "AWS::NoValue" }]}, "\n",
                  "[/var/log/dmesg]\n",
                  "file = /var/log/dmesg\n",
                  "log_stream_name = {instance_id}/var/log/dmesg\n",
                  "log_group_name = ", { "Fn::If" : [ "ConfigureLogs", { "Ref" : "LogGroup" }, { "Ref" : "AWS::NoValue" }]}, "\n",
                  "[/var/log/httpd/access_log]\n",
                  "file = /var/log/httpd/access_log\n",
                  "log_stream_name = {instance_id}/var/log/httpd/access_log\n",
                  "log_group_name = ", { "Fn::If" : [ "ConfigureLogs", { "Ref" : "LogGroup" }, { "Ref" : "AWS::NoValue" }]}, "\n",
                  "[/var/log/httpd/error_log]\n",
                  "file = /var/log/httpd/error_log\n",
                  "log_stream_name = {instance_id}/var/log/httpd/error_log\n",
                  "log_group_name = ", { "Fn::If" : [ "ConfigureLogs", { "Ref" : "LogGroup" }, { "Ref" : "AWS::NoValue" }]}, "\n"
                ]]},
                "mode"  : "000644",
                "owner" : "root",
                "group" : "root"
              }
            },
            "services" : {
              "sysvinit" : {
                "awslogs" : {
                  "enabled" : "true",
                  "ensureRunning" : "true",
                  "packages" : { "yum" : [ "awslogs" ]},
                  "files" : [
                    "/etc/awslogs/awslogs.conf",
                    "/etc/awslogs/awscli.conf"
                  ]
                }
              }
            }
          }
        }
      },
      "Properties" : {
        "ImageId" : { "Fn::If" : [ "ConfigureAMZN", { "Fn::GetAtt" : [ "GetAmazonLinuxImageId", "ImageId" ]},
                                                    { "Fn::GetAtt" : [ "GetRHELImageId", "ImageId" ]}]},
        "InstanceType" : { "Fn::FindInMap" : [ "InstanceTypeMap", "Queue", { "Ref" : "EnvironmentSize" }]},
        "IamInstanceProfile" : { "Ref" : "InstanceProfile" },
        "KeyName" : { "Fn::If" : [ "ConfigureKey", { "Ref" : "KeyName" }, { "Ref" : "AWS::NoValue" }]},
        "NetworkInterfaces" : [{
          "Description"              : { "Fn::Join" : [ "-", [ { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }}, { "Ref" : "ApplicationName" }, "NetworkInterfaceB", "eth0" ]]},
          "DeviceIndex"              : "0",
          "SubnetId"                 : { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-QueueSubnetB" }},
          "PrivateIpAddress"         : { "Fn::If" : [ "ConfigureStaticAddress", { "Fn::GetAtt" : [ "AddressCalculatorB", "Address4" ]}, { "Ref" : "AWS::NoValue" }]},
          "GroupSet"                 : [{ "Ref" :  "InstanceSecurityGroup" }],
          "AssociatePublicIpAddress" : "false",
          "DeleteOnTermination"      : "true"
        }],
        "BlockDeviceMappings" : [{
          "DeviceName" : { "Fn::If" : [ "ConfigureAMZN", "/dev/xvda", "/dev/sda1" ]},
          "Ebs" : {
            "VolumeSize" : "32"
          }
        }],
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }}, { "Ref" : "ApplicationName" }, "QueueInstanceB" ]]}},
          { "Fn::If" : [ "ConfigureSchedule", { "Key" : "Schedule", "Value" : { "Ref" : "Schedule" }}, { "Ref" : "AWS::NoValue" }]}
        ],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : [ "", [
          "#!/bin/bash -xe\n",
          { "Fn::If" : [ "ConfigureRHEL", { "Fn::Join" : [ "", [
            "# Add to RHEL what Amazon Linux includes\n",
            "# Install EPEL\n",
            "yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm\n",
            "# Install Python Pip and Python Daemon\n",
            "yum install -y python-pip python-daemon\n",
            "pip install --upgrade pip\n",
            "# Install AWS CLI\n",
            "pip install awscli\n",
            "# Install AWS CLI CloudWatch Logs Plugin\n",
            "pip install awscli-cwlogs\n",
            "# Download CFN Bootstrap\n",
            "cd /opt\n",
            "curl -O https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
            "tar -xvpf aws-cfn-bootstrap-latest.tar.gz\n",
            "rm -f aws-cfn-bootstrap-latest.tar.gz\n",
            "# Build and Install CFN Bootstrap\n",
            "cd aws-cfn-bootstrap-*\n",
            "python setup.py build\n",
            "python setup.py install\n",
            "cd /opt\n",
            "rm -Rf aws-cfn-bootstrap-*\n",
            "# Create CFN Bootstrap symlinks\n",
            "ln -s /usr/init/redhat/cfn-hup /etc/init.d/cfn-hup\n",
            "chmod 775 /usr/init/redhat/cfn-hup\n",
            "mkdir -p /opt/aws/bin\n",
            "ln -s /usr/bin/cfn-hup /opt/aws/bin/cfn-hup\n",
            "ln -s /usr/bin/cfn-init /opt/aws/bin/cfn-init\n",
            "ln -s /usr/bin/cfn-signal /opt/aws/bin/cfn-signal\n",
            "ln -s /usr/bin/cfn-elect-cmd-leader /opt/aws/bin/cfn-elect-cmd-leader\n",
            "ln -s /usr/bin/cfn-get-metadata /opt/aws/bin/cfn-get-metadata\n",
            "ln -s /usr/bin/cfn-send-cmd-event /opt/aws/bin/cfn-send-cmd-event\n",
            "ln -s /usr/bin/cfn-send-cmd-result /opt/aws/bin/cfn-send-cmd-result\n"
          ]]},
            "yum update -y aws-cfn-bootstrap\n"
          ]},
          "\n",
          "# Install the files and packages from the metadata\n",
          "/opt/aws/bin/cfn-init --verbose",
          " --configsets All",
          " --stack ", { "Ref" : "AWS::StackName" },
          " --resource QueueInstanceB",
          " --region ", { "Ref" : "AWS::Region" }, "\n",
          "\n",
          "# Signal the status from cfn-init\n",
          "/opt/aws/bin/cfn-signal --exit-code $?",
          " --stack ", { "Ref" : "AWS::StackName" },
          " --resource QueueInstanceB",
          " --region ", { "Ref" : "AWS::Region" }, "\n"
        ]]}}
      },
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT10M"
        }
      }
    }
  },

  "Outputs" : {
    "QueueInstanceA" : {
      "Description" : "The QueueInstanceA",
      "Value" : { "Ref" : "QueueInstanceA" }
    },

    "QueueHostNameA" : {
      "Description" : "The QueueHostNameA",
      "Value" : { "Fn::Join" : [ "", [ { "Fn::GetAtt" : [ "GetHostName", "HostName" ]}, "01a.", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCDomain" }}]]}
    },

    "QueueInstanceB" : {
      "Description" : "The QueueInstanceB",
      "Value" : { "Ref" : "QueueInstanceB" }
    },

    "QueueHostNameB" : {
      "Description" : "The QueueHostNameB",
      "Value" : { "Fn::Join" : [ "", [ { "Fn::GetAtt" : [ "GetHostName", "HostName" ]}, "01b.", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCDomain" }}]]}
    }
  }
}
