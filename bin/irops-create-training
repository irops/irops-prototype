#!/bin/bash
#
# Here's a list of the commands which need to be run to create the Training MultiEnvironment (eu-west-1 / Ireland)
# - Training is a MultiEnvironment which consists of a complete set of Environments used for
#   training new AWS Solution Architects and Administrators on a top-to-bottom build of a
#   new MultiEnvironment.
# - Training should usually not be left running. Create it to confirm all scripts work, then delete.
#
# We can break down the creation of a region into this order:
#  1. Initialize Environment Variables
#
#  2. Create SNS Topics and Subscriptions
#      2.1 Create StandardTopics Stack
#      2.2 Create StandardSubscriptions Stack
#      2.3 Create CustomSubscriptions Stack
#
#  3. Create S3 Buckets
#      3.1 Create StandardBuckets Stack
#
#  4. Create Lambda Functions
#      4.1 Create StandardAMIFunctions Stack
#      4.2 Create StandardCIDRFunctions Stack
#      4.3 Create StandardScheduleFunctions Stack
#      4.4 Create CustomIdentifierFunctions Stack
#
#  5. Create Hosted Zones
#      5.1. Create Production-HostedZone Stack (Public DNS Zone)
#      5.2. Create Staging-HostedZone Stack (Public DNS Zone)
#      5.3. Create Testing-HostedZone Stack (Public DNS Zone)
#      5.4. Create Development-HostedZone Stack (Public DNS Zone)
#      5.5. Create Core-HostedZone Stack (Public DNS Zone)
#      5.6. Create Build-HostedZone Stack (Public DNS Zone)
#
#  6. Create VPCs
#      6.1. Create Production-VPC Stack
#      6.2. Create Staging-VPC Stack
#      6.3. Create Testing-VPC Stack
#      6.4. Create Development-VPC Stack
#      6.5. Create Core-VPC Stack
#      6.6. Create Build-VPC Stack
#
#  7. Create NetworkACLs
#      7.1. Create Production-NetworkAcls Stack
#      7.2. Create Staging-NetworkAcls Stack
#      7.3. Create Testing-NetworkAcls Stack
#      7.4. Create Development-NetworkAcls Stack
#      7.5. Create Core-NetworkAcls Stack
#      7.6. Create Build-NetworkAcls Stack
#
#  8. Create CustomerGateways
#      8.1. Create CharlotteCustomerGateway Stack
#      8.2. Create SantaBarbaraCustomerGateway Stack
#
#  9. Create VPNConnections
#      9.1. Create Production-CharlotteVPNConnection Stack
#      9.2. Create Production-SantaBarbaraVPNConnection Stack
#      9.3. Create Staging-CharlotteVPNConnection Stack
#      9.4. Create Staging-SantaBarbaraVPNConnection Stack
#      9.5. Create Testing-CharlotteVPNConnection Stack
#      9.6. Create Testing-SantaBarbaraVPNConnection Stack
#      9.7. Create Development-CharlotteVPNConnection Stack
#      9.8. Create Development-SantaBarbaraVPNConnection Stack
#      9.9. Create Core-CharlotteVPNConnection Stack
#      9.10. Create Core-SantaBarbaraVPNConnection Stack
#      9.11. Create Build-CharlotteVPNConnection Stack
#      9.12. Create Build-SantaBarbaraVPNConnection Stack
#
# 10. Create VPCPeeringConnections
#     10.1. Create Core-VPCPeeringConnections Stack
#     10.2. Create Production-StagingVPCPeeringConnection Stack
#     10.3. Create Staging-TestingVPCPeeringConnection Stack
#     10.4. Create Testing-DevelopmentVPCPeeringConnection Stack
#
# 11. Create OpenVPNAS Instances
#     11.1. Create Production-OpenVPNAS Stack
#     11.2. Create Staging-OpenVPNAS Stack
#     11.3. Create Testing-OpenVPNAS Stack
#     11.4. Create Development-OpenVPNAS Stack
#     11.5. Create Build-OpenVPNAS Stack
#     11.6. Create Core-OpenVPNAS Stack
#
# 12. Create Bastions
#     12.1. Create Production-LinuxBastions Stack
#     12.2. Create Production-WindowsBastions Stack (future)
#     12.3. Create Staging-LinuxBastions Stack
#     12.4. Create Staging-WindowsBastions Stack (future)
#     12.5. Create Testing-LinuxBastions Stack
#     12.6. Create Testing-WindowsBastions Stack (future)
#     12.7. Create Development-LinuxBastions Stack
#     12.8. Create Development-WindowsBastions Stack (future)
#     12.9. Create Build-LinuxBastions Stack
#     12.10. Create Build-WindowsBastions Stack (future)
#     12.11. Create Core-LinuxBastions Stack
#     12.12. Create Core-WindowsBastions Stack (future)
#
# 13. Create Example Applications
#     13.1. Create Production-LinuxWebServer Stack
#     13.2. Create Production-WindowsWebServer Stack
#     13.3. Create Staging-LinuxWebServer Stack
#     13.4. Create Staging-WindowsWebServer Stack
#     13.5. Create Testing-LinuxWebServer Stack
#     13.6. Create Testing-WindowsWebServer Stack
#     13.7. Create Development-LinuxWebServer Stack
#     13.8. Create Development-WindowsWebServer Stack
#

run() {
    echo
    echo -n "Run: \"${1##*/bin/}\"? [Y/n/q]"
    read choice
    case "$choice" in
      "" | "y" | "Y" | "yes" | "Yes")
        eval $1;;
      "n" | "N" | "no" | "No")
        ;;
       *) echo "cancelled"
          exit 2;;
    esac
}

#  1. Initalize Environment Variables
#     - This will initialze the environment variables to the Training-Production Environment
#     - We will be explicit on certain options below, even when the value does not need to be set due to defaults

bindir=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
applicationbindir=${bindir%/*}/application/bin
billingbindir=${bindir%/*}/billing/bin
commonbindir=${bindir%/*}/common/bin
corebindir=${bindir%/*}/core/bin
environmentbindir=${bindir%/*}/environment/bin
examplebindir=${bindir%/*}/example/bin
identitybindir=${bindir%/*}/identity/bin
utilitybindir=${bindir%/*}/utility/bin

source $bindir/irops-define-training-production


#  2. Create SNS Topics and Subscriptions
#      2.1 Create StandardTopics Stack
#      2.2 Create StandardSubscriptions Stack
#      2.3 Create CustomSubscriptions Stack

run "$corebindir/core-create-standardtopics-stack -E Core"
run "$corebindir/core-create-standardsubscriptions-stack -E Core"
run "$corebindir/core-create-customsubscriptions-stack -E Core"


#  3. Create S3 Buckets
#      3.1 Create StandardBuckets Stack

run "$corebindir/core-create-standardbuckets-stack -E Core"


#  4. Create Lambda Functions
#      4.1 Create StandardAMIFunctions Stack
#      4.2 Create StandardCIDRFunctions Stack
#      4.3 Create StandardScheduleFunctions Stack
#      4.4 Create CustomIdentifierFunctions Stack

run "$corebindir/core-create-standardamifunctions-stack -E Core"
run "$corebindir/core-create-standardcidrfunctions-stack -E Core"
run "$corebindir/core-create-standardschedulefunctions-stack -E Core"
run "$corebindir/core-create-customidentifierfunctions-stack -E Core"


#  5. Create Hosted Zones
#      5.1. Create Production-HostedZone Stack (Public DNS Zone)
#      5.2. Create Staging-HostedZone Stack (Public DNS Zone)
#      5.3. Create Testing-HostedZone Stack (Public DNS Zone)
#      5.4. Create Development-HostedZone Stack (Public DNS Zone)
#      5.5. Create Core-HostedZone Stack (Public DNS Zone)
#      5.6. Create Build-HostedZone Stack (Public DNS Zone)

run "$commonbindir/common-create-hostedzone-stack -E Production -D eu-west-1.tvl.iropshub.com"
run "$commonbindir/common-create-hostedzone-stack -E Staging -D s.eu-west-1.tvl.iropshub.com"
run "$commonbindir/common-create-hostedzone-stack -E Testing -D t.eu-west-1.tvl.iropshub.com"
run "$commonbindir/common-create-hostedzone-stack -E Development -D d.eu-west-1.tvl.iropshub.com"
run "$commonbindir/common-create-hostedzone-stack -E Core -D c.eu-west-1.tvl.iropshub.com"
run "$commonbindir/common-create-hostedzone-stack -E Build -D b.eu-west-1.tvl.iropshub.com"

echo
echo "Note: Currently, you must manually create the NS records which are needed in each"
echo "      parent DNS Zone to delegate to the sub-domain Zone. This should be done now."
echo


#  6. Create VPCs
#      6.1. Create Production-VPC Stack
#      6.2. Create Staging-VPC Stack
#      6.3. Create Testing-VPC Stack
#      6.4. Create Development-VPC Stack
#      6.5. Create Core-VPC Stack
#      6.6. Create Build-VPC Stack

run "$environmentbindir/environment-create-vpc-stack -E Production -N 172.21.128.0/21"
run "$environmentbindir/environment-create-vpc-stack -E Staging -N 172.21.136.0/21"
run "$environmentbindir/environment-create-vpc-stack -E Testing -N 172.21.144.0/21"
run "$environmentbindir/environment-create-vpc-stack -E Development -N 172.21.152.0/21"
run "$corebindir/core-create-vpc-stack -E Core -N 172.21.184.0/22"
run "$corebindir/build-create-vpc-stack -E Build -N 172.21.188.0/23"


#  7. Create NetworkACLs
#      7.1. Create Production-NetworkAcls Stack
#      7.2. Create Staging-NetworkAcls Stack
#      7.3. Create Testing-NetworkAcls Stack
#      7.4. Create Development-NetworkAcls Stack
#      7.5. Create Core-NetworkAcls Stack
#      7.6. Create Build-NetworkAcls Stack

run "$environmentbindir/environment-create-networkacls-stack -E Production"
run "$environmentbindir/environment-create-networkacls-stack -E Staging"
run "$environmentbindir/environment-create-networkacls-stack -E Testing"
run "$environmentbindir/environment-create-networkacls-stack -E Development"
run "$corebindir/core-create-networkacls-stack -E Core"
run "$corebindir/build-create-networkacls-stack -E Build"


#  8. Create CustomerGateways
#      8.1. Create CharlotteCustomerGateway Stack
#      8.2. Create SantaBarbaraCustomerGateway Stack

#run "$commonbindir/common-create-customergateway-stack -E Core -G Charlotte -i 204.26.253.5"
run "$commonbindir/common-create-customergateway-stack -E Core -G SantaBarbara -i 72.215.187.179"


#  9. Create VPNConnections
#      9.1. Create Production-CharlotteVPNConnection Stack
#      9.2. Create Production-SantaBarbaraVPNConnection Stack
#      9.3. Create Staging-CharlotteVPNConnection Stack
#      9.4. Create Staging-SantaBarbaraVPNConnection Stack
#      9.5. Create Testing-CharlotteVPNConnection Stack
#      9.6. Create Testing-SantaBarbaraVPNConnection Stack
#      9.7. Create Development-CharlotteVPNConnection Stack
#      9.8. Create Development-SantaBarbaraVPNConnection Stack
#      9.9. Create Core-CharlotteVPNConnection Stack
#      9.10. Create Core-SantaBarbaraVPNConnection Stack
#      9.11. Create Build-CharlotteVPNConnection Stack
#      9.12. Create Build-SantaBarbaraVPNConnection Stack

#run "$commonbindir/common-create-vpnconnection-stack -E Production -G Charlotte -N 204.26.128.0/17"
run "$commonbindir/common-create-vpnconnection-stack -E Production -G SantaBarbara -N 10.0.0.0/16"
#run "$commonbindir/common-create-vpnconnection-stack -E Staging -G Charlotte -N 204.26.128.0/17"
run "$commonbindir/common-create-vpnconnection-stack -E Staging -G SantaBarbara -N 10.0.0.0/16"
#run "$commonbindir/common-create-vpnconnection-stack -E Testing -G Charlotte -N 204.26.128.0/17"
run "$commonbindir/common-create-vpnconnection-stack -E Testing -G SantaBarbara -N 10.0.0.0/16"
#run "$commonbindir/common-create-vpnconnection-stack -E Development -G Charlotte -N 204.26.128.0/17"
run "$commonbindir/common-create-vpnconnection-stack -E Development -G SantaBarbara -N 10.0.0.0/16"
#run "$commonbindir/common-create-vpnconnection-stack -E Core -G Charlotte -N 204.26.128.0/17"
run "$commonbindir/common-create-vpnconnection-stack -E Core -G SantaBarbara -N 10.0.0.0/16"
#run "$commonbindir/common-create-vpnconnection-stack -E Build -G Charlotte -N 204.26.128.0/17"
run "$commonbindir/common-create-vpnconnection-stack -E Build -G SantaBarbara -N 10.0.0.0/16"


# 10. Create VPCPeeringConnections
#     10.1. Create Core-VPCPeeringConnections Stack
#     10.2. Create Production-StagingVPCPeeringConnection Stack
#     10.3. Create Staging-TestingVPCPeeringConnection Stack
#     10.4. Create Testing-DevelopmentVPCPeeringConnection Stack

run "$corebindir/core-create-vpcpeeringconnections-stack"
run "$environmentbindir/environment-create-vpcpeeringconnection-stack -E Production -P Staging"
run "$environmentbindir/environment-create-vpcpeeringconnection-stack -E Staging -P Testing"
run "$environmentbindir/environment-create-vpcpeeringconnection-stack -E Testing -P Development"


# 11. Create OpenVPNAS Instances
#     11.1. Create Production-OpenVPNAS Stack
#     11.2. Create Staging-OpenVPNAS Stack
#     11.3. Create Testing-OpenVPNAS Stack
#     11.4. Create Development-OpenVPNAS Stack
#     11.5. Create Core-OpenVPNAS Stack
#     11.6. Create Build-OpenVPNAS Stack

run "$utilitybindir/utility-create-openvpnas-stack -E Production -U OpenVPNAS -Z micro"
run "$utilitybindir/utility-create-openvpnas-stack -E Staging -U OpenVPNAS -Z micro"
run "$utilitybindir/utility-create-openvpnas-stack -E Testing -U OpenVPNAS -Z micro"
run "$utilitybindir/utility-create-openvpnas-stack -E Development -U OpenVPNAS -Z micro"
run "$utilitybindir/utility-create-openvpnas-stack -E Core -U OpenVPNAS -Z micro"
run "$utilitybindir/utility-create-openvpnas-stack -E Build -U OpenVPNAS -Z micro"


# 12. Create Bastions
#     12.1. Create Production-LinuxBastions Stack
#     12.2. Create Production-WindowsBastions Stack (future)
#     12.3. Create Staging-LinuxBastions Stack
#     12.4. Create Staging-WindowsBastions Stack (future)
#     12.5. Create Testing-LinuxBastions Stack
#     12.6. Create Testing-WindowsBastions Stack (future)
#     12.7. Create Development-LinuxBastions Stack
#     12.8. Create Development-WindowsBastions Stack (future)
#     12.9. Create Core-LinuxBastions Stack
#     12.10. Create Core-WindowsBastions Stack (future)
#     12.11. Create Build-LinuxBastions Stack
#     12.12. Create Build-WindowsBastions Stack (future)

run "$utilitybindir/utility-create-linuxbastions-stack -E Production -U LinuxBastions -Z standby"
#run "$utilitybindir/utility-create-windowsbastions-stack -E Production -U WindowsBastions"
run "$utilitybindir/utility-create-linuxbastions-stack -E Staging -U LinuxBastions -Z standby"
#run "$utilitybindir/utility-create-windowsbastions-stack -E Staging -U WindowsBastions"
run "$utilitybindir/utility-create-linuxbastions-stack -E Testing -U LinuxBastions -Z standby"
#run "$utilitybindir/utility-create-windowsbastions-stack -E Testing -U WindowsBastions"
run "$utilitybindir/utility-create-linuxbastions-stack -E Development -U LinuxBastions -Z standby"
#run "$utilitybindir/utility-create-windowsbastions-stack -E Development -U WindowsBastions"
run "$utilitybindir/utility-create-linuxbastions-stack -E Core -U LinuxBastions -Z standby"
#run "$utilitybindir/utility-create-windowsbastions-stack -E Core -U WindowsBastions"
run "$utilitybindir/utility-create-linuxbastions-stack -E Build -U LinuxBastions -Z standby"
#run "$utilitybindir/utility-create-windowsbastions-stack -E Build -U WindowsBastions"


# 13. Create Example Applications
#     13.1. Create Production-LinuxWebServer Stack
#     13.2. Create Production-WindowsWebServer Stack
#     13.3. Create Staging-LinuxWebServer Stack
#     13.4. Create Staging-WindowsWebServer Stack
#     13.5. Create Testing-LinuxWebServer Stack
#     13.6. Create Testing-WindowsWebServer Stack
#     13.7. Create Development-LinuxWebServer Stack
#     13.8. Create Development-WindowsWebServer Stack

run "$examplebindir/example-create-linuxwebserver-stack -E Production -V 1.0.0 -Z small"
run "$examplebindir/example-create-windowswebserver-stack -E Production -Z small"
run "$examplebindir/example-create-linuxwebserver-stack -E Staging -V 2.0.0 -Z small"
run "$examplebindir/example-create-windowswebserver-stack -E Staging -Z small"
run "$examplebindir/example-create-linuxwebserver-stack -E Testing -V 3.0.0 -Z small"
run "$examplebindir/example-create-windowswebserver-stack -E Testing -Z small"
run "$examplebindir/example-create-linuxwebserver-stack -E Development -V 4.0.0 -Z small"
run "$examplebindir/example-create-windowswebserver-stack -E Development -Z small"
