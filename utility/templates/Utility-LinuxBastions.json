{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Utility-LinuxBastions Template: This adds Linux Bastions to a VPC. These Bastions are wrapped in an AutoScalingGroup, so if they fail, they are re-created automatically. Optionally, static public and private IP addresses can be requested, and optionally registered in public and private DNS. Optionally, logs can be uploaded to CloudWatch Logs, with an Alarm to monitor invalid users. Optionally, users who are members of the BastionAdministrators and BastionUsers IAM groups can be created on this server, with any SSH keys they have imported setup for remote access.",

  "Metadata" : {
    "AWS::CloudFormation::Interface" : {
      "ParameterGroups" : [
        {
          "Label" : { "default" : "Stack Dependencies" },
          "Parameters" : [
            "VPCStackName",
            "StandardCIDRFunctionsStackName",
            "StandardAMIFunctionsStackName",
            "StandardBucketsStackName",
            "StandardTopicsStackName"
          ]
        },
        {
          "Label" : { "default" : "Resource Dependencies" },
          "Parameters" : [
            "KeyName"
          ]
        },
        {
          "Label" : { "default" : "System Configuration" },
          "Parameters" : [
            "CompanyName",
            "SystemName"
          ]
        },
        {
          "Label" : { "default" : "Environment Configuration" },
          "Parameters" : [
            "EnvironmentType",
            "EnvironmentZones",
            "OSName"
          ]
        },
        {
          "Label" : { "default" : "Utility Dependencies Configuration" },
          "Parameters" : [
            "ConfigurationFolder",
            "ConfigurationObject"
          ]
        },
        {
          "Label" : { "default" : "Utility Configuration" },
          "Parameters" : [
            "UtilityName",
            "UtilityDomain",
            "UseStaticPublicAddress",
            "UseStaticPrivateAddress",
            "UseLocalUsers",
            "LogRetention",
            "OnSchedule",
            "OffSchedule"
          ]
        },
        {
          "Label" : { "default" : "Security Configuration" },
          "Parameters" : [
            "UserNetworks"
          ]
        }
      ],

      "ParameterLabels" : {
        "VPCStackName" : { "default" : "VPC Stack Name" },
        "StandardCIDRFunctionsStackName" : { "default" : "StandardCIDRFunctions Stack Name" },
        "StandardAMIFunctionsStackName" : { "default" : "StandardAMIFunctions Stack Name" },
        "StandardBucketsStackName" : { "default" : "StandardBuckets Stack Name" },
        "StandardTopicsStackName" : { "default" : "StandardTopics Stack Name" },
        "KeyName" : { "default" : "Key Name" },
        "CompanyName" : { "default" : "Company Name" },
        "SystemName" : { "default" : "System Name" },
        "EnvironmentType" : { "default" : "Environment Type" },
        "EnvironmentZones" : { "default" : "Environment Zones" },
        "OSName" : { "default" : "Operating System Name" },
        "ConfigurationFolder" : { "default" : "Configuration Folder" },
        "ConfigurationObject" : { "default" : "Configuration Object" },
        "UtilityName" : { "default" : "Utility Name" },
        "UtilityDomain" : { "default" : "Utility Domain" },
        "UseStaticPublicAddress" : { "default" : "Use Static Public Address" },
        "UseStaticPrivateAddress" : { "default" : "Use Static Private Address" },
        "UseLocalUsers" : { "default" : "Use Local Users" },
        "LogRetention" : { "default" : "Log Retention" },
        "OnSchedule" : { "default" : "On Schedule" },
        "OffSchedule" : { "default" : "Off Schedule" },
        "UserNetworks" : { "default" : "User Networks" }
      }
    }
  },

  "Parameters" : {
    "VPCStackName" : {
      "Description" : "Name of the CloudFormation Stack containing the VPC",
      "Type" : "String",
      "MinLength" : 8,
      "MaxLength" : 64,
      "Default" : "Production-VPC",
      "AllowedPattern" : "^[A-Z][-a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters and dashes."
    },

    "StandardCIDRFunctionsStackName" : {
      "Description" : "Name of the CloudFormation Stack containing the Standard CIDR Functions",
      "Type" : "String",
      "MaxLength" : 64,
      "Default" : "StandardCIDRFunctions",
      "AllowedPattern" : "(^$|^[A-Z][-a-zA-Z0-9]*$)",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters and dashes."
    },

    "StandardAMIFunctionsStackName" : {
      "Description" : "Name of the CloudFormation Stack containing the Standard AMI Functions",
      "Type" : "String",
      "MaxLength" : 64,
      "Default" : "StandardAMIFunctions",
      "AllowedPattern" : "(^$|^[A-Z][-a-zA-Z0-9]*$)",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters and dashes."
    },

    "StandardBucketsStackName" : {
      "Description" : "Name of the CloudFormation Stack containing Standard Buckets",
      "Type" : "String",
      "MinLength" : 2,
      "MaxLength" : 64,
      "Default" : "StandardBuckets",
      "AllowedPattern" : "^[A-Z][-a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters and dashes."
    },

    "StandardTopicsStackName" : {
      "Description" : "Name of the CloudFormation Stack containing Standard Topics",
      "Type" : "String",
      "MinLength" : 2,
      "MaxLength" : 64,
      "Default" : "StandardTopics",
      "AllowedPattern" : "^[A-Z][-a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters and dashes."
    },

    "KeyName" : {
      "Description" : "Name of an existing KeyPair to enable SSH access to the Instances",
      "Type" : "AWS::EC2::KeyPair::KeyName",
      "MaxLength" : 32,
      "Default" : "example",
      "AllowedPattern" : "(^$|^[_a-zA-Z0-9]*$)",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    },

    "CompanyName" : {
      "Description" : "Name of the Company associated with the Stack",
      "Type" : "String",
      "MinLength" : 2,
      "MaxLength" : 32,
      "Default" : "Travel",
      "AllowedPattern" : "^[A-Z][a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters."
    },

    "SystemName" : {
      "Description" : "Name of the System associated with the Stack",
      "Type" : "String",
      "MinLength" : 2,
      "MaxLength" : 32,
      "Default" : "IROPS",
      "AllowedPattern" : "^[A-Z][a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters."
    },

    "EnvironmentType" : {
      "Description" : "Type of the Environment to build. Used to select size-related options in Mappings",
      "Type" : "String",
      "Default" : "micro",
      "AllowedValues" : [ "standby", "micro", "small", "medium", "large", "xlarge" ],
      "ConstraintDescription" : "must be standby, micro, small, medium, large or xlarge."
    },

    "EnvironmentZones" : {
      "Description" : "Number of Availability Zones to build",
      "Type" : "String",
      "Default" : "1",
      "AllowedValues" : [ "1", "2" ],
      "ConstraintDescription" : "must be 1 or 2."
    },

    "OSName" : {
      "Description" : "The Operating System to use for Instances",
      "Type" : "String",
      "Default" : "Amazon Linux",
      "AllowedValues" : [ "Amazon Linux", "Amazon Linux 2017.03.0" ],
      "ConstraintDescription" : "must be \"Amazon Linux\" (latest) or \"Amazon Linux 2017.03.0\"."
    },

    "ConfigurationFolder" : {
      "Description" : "Folder within the S3 Configurations bucket containing Configurations deployed by this Template",
      "Type" : "String",
      "MinLength" : 2,
      "MaxLength" : 32,
      "Default" : "LinuxBastions",
      "AllowedPattern" : "^[A-Z][a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters."
    },

    "ConfigurationObject" : {
      "Description" : "Object within the S3 bucket and folder containing the configuration",
      "Type" : "String",
      "MaxLength" : 64,
      "Default" : "",
      "AllowedPattern" : "(^$|^[-_.a-zA-Z0-9]*$)",
      "ConstraintDescription" : "must be a valid filename, not containing slashes."
    },

    "UtilityName" : {
      "Description" : "Name of the Utility associated with the Stack",
      "Type" : "String",
      "MinLength" : 2,
      "MaxLength" : 32,
      "Default" : "LinuxBastions",
      "AllowedPattern" : "^[A-Z][a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters."
    },

    "UtilityDomain" : {
      "Description" : "DNS Name of the Utility associated with the Stack",
      "Type" : "String",
      "MaxLength" : 16,
      "Default" : "",
      "AllowedPattern" : "(^$|^[a-z][-a-z0-9]*$)",
      "ConstraintDescription" : "must begin with a lower case letter and contain only lower case letters, numbers and dashes."
    },

    "UseStaticPublicAddress" : {
      "Description" : "Create and associate a separate Static Public Address",
      "Type" : "String",
      "Default" : "true",
      "AllowedValues" : [ "true", "false" ],
      "ConstraintDescription" : "must be either true or false."
    },

    "UseStaticPrivateAddress" : {
      "Description" : "Create and attach a separate Static Private Address",
      "Type" : "String",
      "Default" : "true",
      "AllowedValues" : [ "true", "false" ],
      "ConstraintDescription" : "must be either true or false."
    },

    "UseLocalUsers" : {
      "Description" : "Synchronize Members of BastionAdministrators and BastionUsers IAM Groups (with SSH Keys) to Local Unix Users",
      "Type" : "String",
      "Default" : "true",
      "AllowedValues" : [ "true", "false" ],
      "ConstraintDescription" : "must be either true or false."
    },

    "LogRetention" : {
      "Description" : "Number of days to retain CloudWatch Log Events (0 disables use of CloudWatch Logs)",
      "Type" : "Number",
      "Default" : 14,
      "AllowedValues" : [ 0, 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653 ],
      "ConstraintDescription" : "must be: 0 (disabled), 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827 or 3653."
    },

    "OnSchedule" : {
      "Description" : "On Schedule in constrained Cron format (UTC)",
      "Type" : "String",
      "Default" : "0 11 * * 1-5",
      "AllowedPattern" : "(^$|^0 ([5-9]|1[0-6]) \\* \\* 1-5$)",
      "ConstraintDescription" : "must follow constrained cron syntax: \"0 H * * 1-5\", where H = 5-16."
    },

    "OffSchedule" : {
      "Description" : "Off Schedule in constrained Cron format (UTC)",
      "Type" : "String",
      "Default" : "0 4 * * *",
      "AllowedPattern" : "(^$|^0 [0-7] \\* \\* \\*$)",
      "ConstraintDescription" : "must follow constrained cron syntax: \"0 H * * *\", where H = 0-7."
    },

    "UserNetworks" : {
      "Description" : "Networks that can access the Utility",
      "Type" : "String",
      "Default" : "0.0.0.0/0,NONE,NONE,NONE,NONE,NONE,NONE,NONE",
      "ConstraintDescription" : "must be a comma-separated list of 8 values, each an IP CIDR range of the form x.x.x.x/x or the word NONE."
    }
  },

  "Mappings" : {
    "InstanceTypeMap" : {
      "Bastion" : { "standby" : "t2.nano", "micro" : "t2.nano", "small" : "t2.small", "medium" : "t2.medium", "large" : "t2.large", "xlarge" : "t2.xlarge" }
    }
  },

  "Conditions" : {
    "ConfigureGlobalS3" : { "Fn::Equals" : [{ "Ref" : "AWS::Region" }, "us-east-1" ]},
    "ConfigureKey" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Ref" : "KeyName" }, "" ] }]},
    "ConfigureStandby" : { "Fn::Equals" : [{ "Ref" : "EnvironmentType" }, "standby" ]},
    "ConfigureMultiZone" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Ref" : "EnvironmentZones" }, "1" ]}]},
    "InstallConfiguration" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Ref" : "ConfigurationObject" }, "" ]}]},
    "ConfigureStaticPublicAddress" : { "Fn::Equals" : [{ "Ref" : "UseStaticPublicAddress" }, "true" ]},
    "ConfigureStaticPublicAddress&MultiZone" : { "Fn::And" : [{ "Condition" : "ConfigureStaticPublicAddress" }, { "Condition" : "ConfigureMultiZone" }]},
    "ConfigureStaticPrivateAddress" : { "Fn::Equals" : [{ "Ref" : "UseStaticPrivateAddress" }, "true" ]},
    "ConfigureStaticPrivateAddress&MultiZone" : { "Fn::And" : [{ "Condition" : "ConfigureStaticPrivateAddress" }, { "Condition" : "ConfigureMultiZone" }]},
    "ConfigureDomainName" : { "Fn::And" : [{ "Fn::Not" : [{ "Fn::Equals" : [{ "Ref" : "UtilityDomain" }, "" ]}]}, { "Condition" : "ConfigureStaticPublicAddress" }]},
    "ConfigureDomainName&MultiZone" : { "Fn::And" : [{ "Condition" : "ConfigureDomainName" }, { "Condition" : "ConfigureMultiZone" }]},
    "ConfigureUsers" : { "Fn::Equals" : [{ "Ref" : "UseLocalUsers" }, "true" ]},
    "ConfigureLogs" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Ref" : "LogRetention" }, "0" ]}]},
    "ConfigureOnSchedule" : { "Fn::And" : [{ "Fn::Not" : [{ "Fn::Equals" : [{ "Ref" : "OnSchedule" }, "" ]}]}, { "Fn::Not" : [{ "Condition" : "ConfigureStandby" }]}]},
    "ConfigureOffSchedule" : { "Fn::And" : [{ "Fn::Not" : [{ "Fn::Equals" : [{ "Ref" : "OffSchedule" }, "" ]}]}, { "Fn::Not" : [{ "Condition" : "ConfigureStandby" }]}]},
    "ConfigureUserNetwork0" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Fn::Select" : [ "0", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}, "NONE" ]}]},
    "ConfigureUserNetwork1" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Fn::Select" : [ "1", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}, "NONE" ]}]},
    "ConfigureUserNetwork2" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Fn::Select" : [ "2", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}, "NONE" ]}]},
    "ConfigureUserNetwork3" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Fn::Select" : [ "3", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}, "NONE" ]}]},
    "ConfigureUserNetwork4" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Fn::Select" : [ "4", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}, "NONE" ]}]},
    "ConfigureUserNetwork5" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Fn::Select" : [ "5", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}, "NONE" ]}]},
    "ConfigureUserNetwork6" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Fn::Select" : [ "6", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}, "NONE" ]}]},
    "ConfigureUserNetwork7" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Fn::Select" : [ "7", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}, "NONE" ]}]}
  },

  "Resources" : {
    "Role" : {
      "Type" : "AWS::IAM::Role",
      "Properties" : {
        "Path" : "/",
        "AssumeRolePolicyDocument" : {
          "Version" : "2012-10-17",
          "Statement" : [{
            "Effect" : "Allow",
            "Principal" : { "Service" : [ "ec2.amazonaws.com" ]},
            "Action" : [ "sts:AssumeRole" ]
          }]
        },
        "ManagedPolicyArns" : [ "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM" ]
      }
    },

    "DownloadConfigurationFromS3Policy" : {
      "Type" : "AWS::IAM::Policy",
      "Properties" : {
        "PolicyName" : "DownloadConfigurationFromS3Policy",
        "PolicyDocument" : {
          "Version" : "2012-10-17",
          "Statement" : [{
            "Effect" : "Allow",
            "Action" : [
              "s3:GetObject"
            ],
            "Resource" : { "Fn::Join" : [ "", [ "arn:aws:s3:::",  { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ConfigurationsBucket" }}, "/", { "Ref" : "ConfigurationFolder" }, "/*" ]]}
          }]
        },
        "Roles" : [{ "Ref" : "Role" }]
      },
      "Condition" : "InstallConfiguration"
    },

    "StaticPublicAddressPolicy" : {
      "Type" : "AWS::IAM::Policy",
      "Properties" : {
        "PolicyName" : "StaticPublicAddressPolicy",
        "PolicyDocument" : {
          "Version" : "2012-10-17",
          "Statement" : [{
            "Effect" : "Allow",
            "Action" : [
              "ec2:AssociateAddress",
              "ec2:DisassociateAddress"
            ],
            "Resource" : "*"
          }]
        },
        "Roles" : [{ "Ref" : "Role" }]
      },
      "Condition" : "ConfigureStaticPublicAddress"
    },

    "StaticPrivateAddressPolicy" : {
      "Type" : "AWS::IAM::Policy",
      "Properties" : {
        "PolicyName" : "StaticPrivateAddressPolicy",
        "PolicyDocument" : {
          "Version" : "2012-10-17",
          "Statement" : [{
            "Effect" : "Allow",
            "Action" : [
              "ec2:AttachNetworkInterface",
              "ec2:DetachNetworkInterface"
            ],
            "Resource" : "*"
          }]
        },
        "Roles" : [{ "Ref" : "Role" }]
      },
      "Condition" : "ConfigureStaticPrivateAddress"
    },

    "LocalUsersPolicy" : {
      "Type" : "AWS::IAM::Policy",
      "Properties" : {
        "PolicyName" : "LocalUsersPolicy",
        "PolicyDocument" : {
          "Version" : "2012-10-17",
          "Statement" : [{
            "Effect" : "Allow",
            "Action" : [
              "iam:GetGroup"
            ],
            "Resource" : [
              { "Fn::Sub" : "arn:aws:iam::${AWS::AccountId}:group/BastionAdministrators" },
              { "Fn::Sub" : "arn:aws:iam::${AWS::AccountId}:group/BastionUsers" }
            ]
          },
          {
            "Effect" : "Allow",
            "Action" : [
              "iam:ListSSHPublicKeys",
              "iam:GetSSHPublicKey"
            ],
            "Resource" : { "Fn::Sub" : "arn:aws:iam::${AWS::AccountId}:user/*" }
          }]
        },
        "Roles" : [{ "Ref" : "Role" }]
      },
      "Condition" : "ConfigureUsers"
    },

    "LogMonitoringPolicy" : {
      "Type" : "AWS::IAM::Policy",
      "Properties" : {
        "PolicyName" : "LogMonitoringPolicy",
        "PolicyDocument" : {
          "Version" : "2012-10-17",
          "Statement" : [{
            "Effect" : "Allow",
            "Action" : [
              "logs:CreateLogGroup",
              "logs:CreateLogStream",
              "logs:PutLogEvents",
              "logs:DescribeLogStreams"
            ],
            "Resource" : [
              "arn:aws:logs:*:*:*"
            ]
          }]
        },
        "Roles" : [{ "Ref" : "Role" }]
      },
      "Condition" : "ConfigureLogs"
    },

    "LogGroup" : {
      "Type" : "AWS::Logs::LogGroup",
      "Properties" : {
        "RetentionInDays" : { "Ref" : "LogRetention" }
      },
      "Condition" : "ConfigureLogs"
    },

    "ValidUserMetricFilter" : {
      "Type" : "AWS::Logs::MetricFilter",
      "Properties" : {
        "LogGroupName" : { "Ref" : "LogGroup" },
        "FilterPattern" : "[month, day, time, host, program=sshd*, message=Accepted publickey, ...]",
        "MetricTransformations" : [{
          "MetricNamespace" : { "Fn::Join" : [ "", [ { "Ref" : "SystemName" }, "/", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }}, "-", { "Ref" : "UtilityName" }]]},
          "MetricName" : "ValidUsersCount",
          "MetricValue" : "1"
        }]
      },
      "Condition" : "ConfigureLogs"
    },

    "InvalidUserMetricFilter" : {
      "Type" : "AWS::Logs::MetricFilter",
      "Properties" : {
        "LogGroupName" : { "Ref" : "LogGroup" },
        "FilterPattern" : "[month, day, time, host, program=sshd*, message=Invalid user, ...]",
        "MetricTransformations" : [{
          "MetricNamespace" : { "Fn::Join" : [ "", [ { "Ref" : "SystemName" }, "/", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }}, "-", { "Ref" : "UtilityName" }]]},
          "MetricName" : "InvalidUsersCount",
          "MetricValue" : "1"
        }]
      },
      "Condition" : "ConfigureLogs"
    },

    "InvalidUsersAlarm" : {
      "Type" : "AWS::CloudWatch::Alarm",
      "Properties" : {
        "AlarmDescription" : "The number of Invalid Logins is greater than 5 over 1 minute",
        "AlarmActions" : [
          { "Fn::ImportValue" : { "Fn::Sub" : "${StandardTopicsStackName}-AlarmsTopic" }}
        ],
        "Namespace" : { "Fn::Join" : [ "", [ { "Ref" : "SystemName" }, "/", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }}, "-", { "Ref" : "UtilityName" }]]},
        "MetricName" : "InvalidUsersCount",
        "Statistic" : "Sum",
        "Period" : "60",
        "EvaluationPeriods" : "1",
        "Threshold" : "5",
        "ComparisonOperator" : "GreaterThanThreshold"
      },
      "Condition" : "ConfigureLogs"
    },

    "SecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : { "Fn::Join" : [ "-", [ { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }}, { "Ref" : "UtilityName" }, "SecurityGroup" ]]},
        "VpcId" : { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPC" }},
        "SecurityGroupIngress" : [
          { "IpProtocol" : "icmp", "FromPort" :    "0", "ToPort" :  "0", "CidrIp" : { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCNetwork" }}},
          { "IpProtocol" : "icmp", "FromPort" :    "3", "ToPort" :  "3", "CidrIp" : { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCNetwork" }}},
          { "IpProtocol" : "icmp", "FromPort" :    "8", "ToPort" :  "8", "CidrIp" : { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCNetwork" }}},
          { "IpProtocol" : "icmp", "FromPort" :   "11", "ToPort" : "11", "CidrIp" : { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCNetwork" }}},
          { "Fn::If" : [ "ConfigureUserNetwork0", { "IpProtocol" : "icmp", "FromPort" :  "0", "ToPort" :  "0", "CidrIp" : { "Fn::Select" : [ "0", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}},  { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork0", { "IpProtocol" : "icmp", "FromPort" :  "3", "ToPort" :  "3", "CidrIp" : { "Fn::Select" : [ "0", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}},  { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork0", { "IpProtocol" : "icmp", "FromPort" :  "8", "ToPort" :  "8", "CidrIp" : { "Fn::Select" : [ "0", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}},  { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork0", { "IpProtocol" : "icmp", "FromPort" : "11", "ToPort" : "11", "CidrIp" : { "Fn::Select" : [ "0", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}},  { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork0", { "IpProtocol" : "tcp",  "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Fn::Select" : [ "0", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}},  { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork1", { "IpProtocol" : "icmp", "FromPort" :  "0", "ToPort" :  "0", "CidrIp" : { "Fn::Select" : [ "1", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}},  { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork1", { "IpProtocol" : "icmp", "FromPort" :  "3", "ToPort" :  "3", "CidrIp" : { "Fn::Select" : [ "1", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}},  { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork1", { "IpProtocol" : "icmp", "FromPort" :  "8", "ToPort" :  "8", "CidrIp" : { "Fn::Select" : [ "1", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}},  { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork1", { "IpProtocol" : "icmp", "FromPort" : "11", "ToPort" : "11", "CidrIp" : { "Fn::Select" : [ "1", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}},  { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork1", { "IpProtocol" : "tcp",  "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Fn::Select" : [ "1", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}},  { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork2", { "IpProtocol" : "icmp", "FromPort" :  "0", "ToPort" :  "0", "CidrIp" : { "Fn::Select" : [ "2", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}},  { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork2", { "IpProtocol" : "icmp", "FromPort" :  "3", "ToPort" :  "3", "CidrIp" : { "Fn::Select" : [ "2", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}},  { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork2", { "IpProtocol" : "icmp", "FromPort" :  "8", "ToPort" :  "8", "CidrIp" : { "Fn::Select" : [ "2", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}},  { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork2", { "IpProtocol" : "icmp", "FromPort" : "11", "ToPort" : "11", "CidrIp" : { "Fn::Select" : [ "2", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}},  { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork2", { "IpProtocol" : "tcp",  "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Fn::Select" : [ "2", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}},  { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork3", { "IpProtocol" : "icmp", "FromPort" :  "0", "ToPort" :  "0", "CidrIp" : { "Fn::Select" : [ "3", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}},  { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork3", { "IpProtocol" : "icmp", "FromPort" :  "3", "ToPort" :  "3", "CidrIp" : { "Fn::Select" : [ "3", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}},  { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork3", { "IpProtocol" : "icmp", "FromPort" :  "8", "ToPort" :  "8", "CidrIp" : { "Fn::Select" : [ "3", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}},  { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork3", { "IpProtocol" : "icmp", "FromPort" : "11", "ToPort" : "11", "CidrIp" : { "Fn::Select" : [ "3", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}},  { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork3", { "IpProtocol" : "tcp",  "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Fn::Select" : [ "3", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}},  { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork4", { "IpProtocol" : "icmp", "FromPort" :  "0", "ToPort" :  "0", "CidrIp" : { "Fn::Select" : [ "4", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}},  { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork4", { "IpProtocol" : "icmp", "FromPort" :  "3", "ToPort" :  "3", "CidrIp" : { "Fn::Select" : [ "4", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}},  { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork4", { "IpProtocol" : "icmp", "FromPort" :  "8", "ToPort" :  "8", "CidrIp" : { "Fn::Select" : [ "4", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}},  { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork4", { "IpProtocol" : "icmp", "FromPort" : "11", "ToPort" : "11", "CidrIp" : { "Fn::Select" : [ "4", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}},  { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork4", { "IpProtocol" : "tcp",  "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Fn::Select" : [ "4", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}},  { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork5", { "IpProtocol" : "icmp", "FromPort" :  "0", "ToPort" :  "0", "CidrIp" : { "Fn::Select" : [ "5", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}},  { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork5", { "IpProtocol" : "icmp", "FromPort" :  "3", "ToPort" :  "3", "CidrIp" : { "Fn::Select" : [ "5", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}},  { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork5", { "IpProtocol" : "icmp", "FromPort" :  "8", "ToPort" :  "8", "CidrIp" : { "Fn::Select" : [ "5", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}},  { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork5", { "IpProtocol" : "icmp", "FromPort" : "11", "ToPort" : "11", "CidrIp" : { "Fn::Select" : [ "5", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}},  { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork5", { "IpProtocol" : "tcp",  "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Fn::Select" : [ "5", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}},  { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork6", { "IpProtocol" : "icmp", "FromPort" :  "0", "ToPort" :  "0", "CidrIp" : { "Fn::Select" : [ "6", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}},  { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork6", { "IpProtocol" : "icmp", "FromPort" :  "3", "ToPort" :  "3", "CidrIp" : { "Fn::Select" : [ "6", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}},  { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork6", { "IpProtocol" : "icmp", "FromPort" :  "8", "ToPort" :  "8", "CidrIp" : { "Fn::Select" : [ "6", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}},  { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork6", { "IpProtocol" : "icmp", "FromPort" : "11", "ToPort" : "11", "CidrIp" : { "Fn::Select" : [ "6", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}},  { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork6", { "IpProtocol" : "tcp",  "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Fn::Select" : [ "6", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}},  { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork7", { "IpProtocol" : "icmp", "FromPort" :  "0", "ToPort" :  "0", "CidrIp" : { "Fn::Select" : [ "7", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}},  { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork7", { "IpProtocol" : "icmp", "FromPort" :  "3", "ToPort" :  "3", "CidrIp" : { "Fn::Select" : [ "7", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}},  { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork7", { "IpProtocol" : "icmp", "FromPort" :  "8", "ToPort" :  "8", "CidrIp" : { "Fn::Select" : [ "7", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}},  { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork7", { "IpProtocol" : "icmp", "FromPort" : "11", "ToPort" : "11", "CidrIp" : { "Fn::Select" : [ "7", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}},  { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork7", { "IpProtocol" : "tcp",  "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Fn::Select" : [ "7", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}},  { "Ref" : "AWS::NoValue" }]}
        ],
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }}, { "Ref" : "UtilityName" }, "SecurityGroup" ]]}}
        ]
      }
    },

    "EIPA" : {
      "Type" : "AWS::EC2::EIP",
      "Properties" : {
        "Domain" : "vpc"
      },
      "Condition" : "ConfigureStaticPublicAddress"
    },

    "EIPB" : {
      "Type" : "AWS::EC2::EIP",
      "Properties" : {
        "Domain" : "vpc"
      },
      "Condition" : "ConfigureStaticPublicAddress&MultiZone"
    },

    "GetAmazonLinuxImageId" : {
      "Type" : "Custom::GetAmazonLinuxImageId",
      "Properties" : {
        "ServiceToken" : { "Fn::ImportValue" : { "Fn::Sub" : "${StandardAMIFunctionsStackName}-GetAmazonLinuxImageIdFunctionArn" }},
        "Region" : { "Ref" : "AWS::Region" },
        "OSName" : { "Ref" : "OSName" }
      }
    },

    "AddressCalculatorA" : {
      "Type" : "Custom::AddressCalculator",
      "Properties" : {
        "ServiceToken" : { "Fn::ImportValue" : { "Fn::Sub" : "${StandardCIDRFunctionsStackName}-AddressCalculatorFunctionArn" }},
        "SubnetId" : { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-Public1SubnetA" }}
      },
      "Condition" : "ConfigureStaticPrivateAddress"
    },

    "AddressCalculatorB" : {
      "Type" : "Custom::AddressCalculator",
      "Properties" : {
        "ServiceToken" : { "Fn::ImportValue" : { "Fn::Sub" : "${StandardCIDRFunctionsStackName}-AddressCalculatorFunctionArn" }},
        "SubnetId" : { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-Public1SubnetB" }}
      },
      "Condition" : "ConfigureStaticPrivateAddress&MultiZone"
    },

    "PrivateNetworkInterfaceA" : {
      "Type" : "AWS::EC2::NetworkInterface",
      "Properties" : {
        "Description" : { "Fn::Join" : [ "-", [ { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }}, { "Ref" : "UtilityName" }, "PrivateNetworkInterfaceA" ]]},
        "PrivateIpAddress" : { "Fn::GetAtt" : [ "AddressCalculatorA", "Address4" ]},
        "GroupSet" : [{ "Ref" : "SecurityGroup" }],
        "SubnetId" : { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-Public1SubnetA" }},
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }}, { "Ref" : "UtilityName" }, "PrivateNetworkInterfaceA" ]]}}
        ]
      },
      "Condition" : "ConfigureStaticPrivateAddress"
    },

    "PrivateNetworkInterfaceB" : {
      "Type" : "AWS::EC2::NetworkInterface",
      "Properties" : {
        "Description" : { "Fn::Join" : [ "-", [ { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }}, { "Ref" : "UtilityName" }, "PrivateNetworkInterfaceB" ]]},
        "PrivateIpAddress" : { "Fn::GetAtt" : [ "AddressCalculatorB", "Address4" ]},
        "GroupSet" : [{ "Ref" : "SecurityGroup" }],
        "SubnetId" : { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-Public1SubnetB" }},
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }}, { "Ref" : "UtilityName" }, "PrivateNetworkInterfaceB" ]]}}
        ]
      },
      "Condition" : "ConfigureStaticPrivateAddress&MultiZone"
    },

    "InstanceProfile" : {
      "Type" : "AWS::IAM::InstanceProfile",
      "Properties" : {
        "Path" : "/",
        "Roles" : [{ "Ref" : "Role" }]
      }
    },

    "LaunchConfiguration" : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Metadata" : {
        "AWS::CloudFormation::Authentication" : {
          "S3Credentials" : {
            "type" : "S3",
            "roleName" : { "Ref" : "Role" },
            "buckets" : [
              { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ConfigurationsBucket" }}
            ]
          }
        },
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "All" : [
              "UpdateOS",
              "ConfigureOSUpdates",
              "InstallSSMAgent",
              { "Fn::If" : [ "ConfigureLogs", "ConfigureLogs", { "Ref" : "AWS::NoValue" }]},
              "ConfigureCFN",
              "ConfigureHostname",
              "ConfigureOS",
              { "Fn::If" : [ "ConfigureStaticPublicAddress", "ConfigureStaticPublicAddress", { "Ref" : "AWS::NoValue" }]},
              { "Fn::If" : [ "ConfigureStaticPrivateAddress", "ConfigureStaticPrivateAddress", { "Ref" : "AWS::NoValue" }]},
              { "Fn::If" : [ "ConfigureUsers", "ConfigureUsers", { "Ref" : "AWS::NoValue" }]},
              { "Fn::If" : [ "InstallConfiguration", "InstallConfiguration", { "Ref" : "AWS::NoValue" }]}
            ]
          },
          "UpdateOS" : {
            "commands" : {
              "01_yum_update" : {
                "command" : "yum update -y",
                "ignoreErrors" : "false"
              }
            }
          },
          "ConfigureOSUpdates" : {
            "packages" : {
              "yum" : {
                "yum-cron" : []
              }
            },
            "files" : {
              "/etc/yum/yum-cron.conf" : {
                "content" : { "Fn::Join" : [ "\n", [
                  "[commands]",
                  "update_cmd = security",
                  "update_messages = yes",
                  "download_updates = yes",
                  "apply_updates = yes",
                  "random_sleep = 10"
                ]]},
                "mode"  : "000644",
                "owner" : "root",
                "group" : "root"
              }
            }
          },
          "InstallSSMAgent" : {
            "packages" : {
              "rpm" : {
                "amazon-ssm-agent" : [ "https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm" ]
              }
            }
          },
          "ConfigureLogs" : {
            "packages" : {
              "yum" : {
                "awslogs" : []
              }
            },
            "files" : {
              "/etc/awslogs/awscli.conf" : {
                "content" : { "Fn::Join" : [ "\n", [
                  "[default]",
                  { "Fn::Sub" : "region = ${AWS::Region}" },
                  "[plugins]",
                  "cwlogs = cwlogs"
                ]]},
                "mode"  : "000644",
                "owner" : "root",
                "group" : "root"
              },
              "/etc/awslogs/awslogs.conf" : {
                "content" : { "Fn::Join" : [ "\n", [
                  "[general]",
                  "state_file = /var/lib/awslogs/agent-state",
                  "[/var/log/messages]",
                  "datetime_format = %b %d %H:%M:%S",
                  "file = /var/log/messages",
                  "log_stream_name = {instance_id}/var/log/messages",
                  { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "log_group_name = ${LogGroup}" }, { "Ref" : "AWS::NoValue" }]},
                  "[/var/log/secure]",
                  "datetime_format = %b %d %H:%M:%S",
                  "file = /var/log/secure",
                  "log_stream_name = {instance_id}/var/log/secure",
                  { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "log_group_name = ${LogGroup}" }, { "Ref" : "AWS::NoValue" }]},
                  "[/var/log/cron]",
                  "datetime_format = %b %d %H:%M:%S",
                  "file = /var/log/cron",
                  "log_stream_name = {instance_id}/var/log/cron",
                  { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "log_group_name = ${LogGroup}" }, { "Ref" : "AWS::NoValue" }]},
                  "[/var/log/cloud-init.log]",
                  "datetime_format = %b %d %H:%M:%S",
                  "file = /var/log/cloud-init.log",
                  "log_stream_name = {instance_id}/var/log/cloud-init.log",
                  { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "log_group_name = ${LogGroup}" }, { "Ref" : "AWS::NoValue" }]},
                  "[/var/log/cfn-init.log]",
                  "datetime_format = %Y-%m-%d %H:%M:%S",
                  "file = /var/log/cfn-init.log",
                  "log_stream_name = {instance_id}/var/log/cfn-init.log",
                  { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "log_group_name = ${LogGroup}" }, { "Ref" : "AWS::NoValue" }]},
                  "[/var/log/cfn-hup.log]",
                  "datetime_format = %Y-%m-%d %H:%M:%S",
                  "file = /var/log/cfn-hup.log",
                  "log_stream_name = {instance_id}/var/log/cfn-hup.log",
                  { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "log_group_name = ${LogGroup}" }, { "Ref" : "AWS::NoValue" }]},
                  "[/var/log/cfn-init-cmd.log]",
                  "datetime_format = %Y-%m-%d %H:%M:%S",
                  "file = /var/log/cfn-init-cmd.log",
                  "log_stream_name = {instance_id}/var/log/cfn-init-cmd.log",
                  { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "log_group_name = ${LogGroup}" }, { "Ref" : "AWS::NoValue" }]},
                  "[/var/log/cloud-init-output.log]",
                  "file = /var/log/cloud-init-output.log",
                  "log_stream_name = {instance_id}/var/log/cloud-init-output.log",
                  { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "log_group_name = ${LogGroup}" }, { "Ref" : "AWS::NoValue" }]},
                  "[/var/log/dmesg]",
                  "file = /var/log/dmesg",
                  "log_stream_name = {instance_id}/var/log/dmesg",
                  { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "log_group_name = ${LogGroup}" }, { "Ref" : "AWS::NoValue" }]}
                ]]},
                "mode"  : "000644",
                "owner" : "root",
                "group" : "root"
              }
            },
            "services" : {
              "sysvinit" : {
                "awslogs" : {
                  "enabled" : "true",
                  "ensureRunning" : "true",
                  "packages" : { "yum" : [ "awslogs" ]},
                  "files" : [
                    "/etc/awslogs/awslogs.conf",
                    "/etc/awslogs/awscli.conf"
                  ]
                }
              }
            }
          },
          "ConfigureCFN" : {
            "files" : {
              "/etc/cfn/cfn-hup.conf" : {
                "content" : { "Fn::Join" : [ "\n", [
                  "[main]",
                  { "Fn::Sub" : "stack=${AWS::StackId}" },
                  { "Fn::Sub" : "region=${AWS::Region}" }
                ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
                "content" : { "Fn::Join" : [ "\n", [
                  "[cfn-auto-reloader-hook]",
                  "triggers=post.update",
                  "path=Resources.LaunchConfiguration.Metadata.AWS::CloudFormation::Init",
                  { "Fn::Sub" : "action=/opt/aws/bin/cfn-init --verbose --configsets All --stack ${AWS::StackName} --resource LaunchConfiguration --region ${AWS::Region}" }
                ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              }
            },
            "services" : {
              "sysvinit" : {
                "cfn-hup" : {
                  "enabled" : "true",
                  "ensureRunning" : "true",
                  "files" : [
                    "/etc/cfn/cfn-hup.conf",
                    "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                  ]
                }
              }
            }
          },
          "ConfigureHostname" : {
            "files" : {
              "/root/bin/sethostname" : {
                "content" : { "Fn::Join" : [ "\n", [
                  "#!/bin/bash",
                  "zone=$(curl -s -m 60 http://169.254.169.254/latest/meta-data/placement/availability-zone)",
                  "region=${zone::-1}",
                  "case $zone in",
                  { "Fn::Join" : [ "", [ "  ", { "Fn::Select" : [ "0", { "Fn::GetAZs" : "" }]}, ") hostname=", { "Ref" : "UtilityDomain" }, { "Fn::If" : [ "ConfigureMultiZone", "a.", "."]}, { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCDomain" }}, ";;" ]]},
                  { "Fn::Join" : [ "", [ "  ", { "Fn::Select" : [ "1", { "Fn::GetAZs" : "" }]}, ") hostname=", { "Ref" : "UtilityDomain" }, "b.", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCDomain" }}, ";;" ]]},
                  "esac",
                  "address=$(curl -s -m 60 http://169.254.169.254/latest/meta-data/local-ipv4)",
                  "sed -i -e \"/^$address/d\" -e \"$ a$address $hostname\" /etc/hosts",
                  "hostname $hostname"
                ]]},
                "mode"  : "000700",
                "owner" : "root",
                "group" : "root"
              }
            },
            "commands" : {
              "01_sethostname" : {
                "command" : "/root/bin/sethostname",
                "ignoreErrors" : "false"
              }
            }
          },
          "ConfigureOS" : {
            "packages" : {
              "yum" : {
                "git" : []
              }
            },
            "files" : {
              "/etc/profile.d/local.sh" : {
                "content" : { "Fn::Join" : [ "\n", [
                  "alias lsa='ls -lAF'",
                  "alias ip4='ip addr | grep \" inet \"'"
                ]]},
                "mode"  : "000644",
                "owner" : "root",
                "group" : "root"
              }
            }
          },
          "ConfigureStaticPublicAddress" : {
            "files" : {
              "/root/bin/associateaddress" : {
                "content" : { "Fn::Join" : [ "\n", [
                  "#!/bin/bash",
                  "zone=$(curl -s -m 60 http://169.254.169.254/latest/meta-data/placement/availability-zone)",
                  "region=${zone::-1}",
                  "instance=$(curl -s -m 60 http://169.254.169.254/latest/meta-data/instance-id)",
                  "case $zone in",
                  { "Fn::Join" : [ "", [ "  ", { "Fn::Select" : [ "0", { "Fn::GetAZs" : "" }]}, ") eipalloc=", { "Fn::If" : [ "ConfigureStaticPublicAddress", { "Fn::GetAtt" : [ "EIPA", "AllocationId" ]}, { "Ref" : "AWS::NoValue" }]}, ";;" ]]},
                  { "Fn::Join" : [ "", [ "  ", { "Fn::Select" : [ "1", { "Fn::GetAZs" : "" }]}, ") eipalloc=", { "Fn::If" : [ "ConfigureStaticPublicAddress&MultiZone", { "Fn::GetAtt" : [ "EIPB", "AllocationId" ]}, { "Ref" : "AWS::NoValue" }]}, ";;" ]]},
                  "esac",
                  "aws ec2 associate-address --instance-id $instance --allocation-id $eipalloc --region $region --output text"
                ]]},
                "mode"  : "000700",
                "owner" : "root",
                "group" : "root"
              }
            },
            "commands" : {
              "01_associateaddress" : {
                "command" : "/root/bin/associateaddress",
                "ignoreErrors" : "false"
              }
            }
          },
          "ConfigureStaticPrivateAddress" : {
            "files" : {
              "/root/bin/attachnetworkinterface" : {
                "content" : { "Fn::Join" : [ "\n", [
                  "#!/bin/bash",
                  "zone=$(curl -s -m 60 http://169.254.169.254/latest/meta-data/placement/availability-zone)",
                  "region=${zone::-1}",
                  "instance=$(curl -s -m 60 http://169.254.169.254/latest/meta-data/instance-id)",
                  "case $zone in",
                  { "Fn::Join" : [ "", [ "  ", { "Fn::Select" : [ "0", { "Fn::GetAZs" : "" }]}, ") eni=", { "Fn::If" : [ "ConfigureStaticPrivateAddress", { "Ref" : "PrivateNetworkInterfaceA" }, { "Ref" : "AWS::NoValue" }]}, ";;" ]]},
                  { "Fn::Join" : [ "", [ "  ", { "Fn::Select" : [ "1", { "Fn::GetAZs" : "" }]}, ") eni=", { "Fn::If" : [ "ConfigureStaticPrivateAddress&MultiZone", { "Ref" : "PrivateNetworkInterfaceB" }, { "Ref" : "AWS::NoValue" }]}, ";;" ]]},
                  "esac",
                  "aws ec2 attach-network-interface --instance-id $instance --network-interface-id $eni --device-index 1 --region $region --output text"
                ]]},
                "mode"  : "000700",
                "owner" : "root",
                "group" : "root"
              }
            },
            "commands" : {
              "01_attachnetworkinterface" : {
                "command" : "/root/bin/attachnetworkinterface",
                "ignoreErrors" : "false"
              }
            }
          },
          "ConfigureUsers" : {
            "files" : {
              "/root/bin/createusers" : {
                "content" : { "Fn::Join" : [ "\n", [
                  "#!/bin/bash",
                  "zone=$(curl -s -m 60 http://169.254.169.254/latest/meta-data/placement/availability-zone)",
                  "region=${zone::-1}",
                  "echo",
                  "echo $(date +\"%Y-%m-%d %H:%M:%S,%3N\") [DEBUG] Obtaining members of BastionAdministrators IAM Group:",
                  "administrators=$(aws iam get-group --group-name BastionAdministrators --query 'Users[].UserName' --region $region --output text)",
                  "echo $(date +\"%Y-%m-%d %H:%M:%S,%3N\") [DEBUG] Adding local administrators based on membership in BastionAdministrators IAM Group:",
                  "for administrator in $administrators; do",
                  "    echo -n \"$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] - $administrator\"",
                  "    keys=$(aws iam list-ssh-public-keys --user-name $administrator --query 'SSHPublicKeys[].SSHPublicKeyId' --region $region --output text)",
                  "    if [ ! \"$keys\" = \"\" ]; then",
                  "        if [ -d /home/$administrator ]; then",
                  "            /usr/sbin/useradd -M $administrator",
                  "        else",
                  "            /usr/sbin/useradd $administrator",
                  "        fi",
                  "        echo \"$administrator ALL=(ALL) NOPASSWD:ALL\" > /etc/sudoers.d/$administrator",
                  "        chmod 0400 /etc/sudoers.d/$administrator",
                  "        mkdir -p /home/$administrator/.ssh",
                  "        chmod 0700 /home/$administrator/.ssh",
                  "        rm -f /home/$administrator/.ssh/authorized_keys",
                  "        for key in $keys; do",
                  "            echo -n \" - $key\"",
                  "            echo $(aws iam get-ssh-public-key --user-name $administrator --ssh-public-key-id $key --encoding SSH --query 'SSHPublicKey.SSHPublicKeyBody' --region $region --output text) >> /home/$administrator/.ssh/authorized_keys",
                  "        done",
                  "        chmod 0600 /home/$administrator/.ssh/authorized_keys",
                  "        rm -f /home/$administrator/.ssh/config",
                  "        echo \"Host *\" >> /home/$administrator/.ssh/config",
                  "        echo \"  ForwardAgent yes\" >> /home/$administrator/.ssh/config",
                  "        echo \"  User ec2-user\" >> /home/$administrator/.ssh/config",
                  "        chmod 0600 /home/$administrator/.ssh/config",
                  "        chown -R $administrator:$administrator /home/$administrator/.ssh",
                  "        echo",
                  "    else",
                  "        echo \" - skipped (no SSH Key)\"",
                  "    fi",
                  "done",
                  "",
                  "echo $(date +\"%Y-%m-%d %H:%M:%S,%3N\") [DEBUG] Obtaining members of BastionUsers IAM Group:",
                  "users=$(aws iam get-group --group-name BastionUsers --query 'Users[].UserName' --region $region --output text)",
                  "echo $(date +\"%Y-%m-%d %H:%M:%S,%3N\") [DEBUG] Adding local users based on membership in BastionUsers IAM Group:",
                  "for user in $users; do",
                  "    echo -n \"$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] - $user\"",
                  "    if ! id $user &> /dev/null; then",
                  "        keys=$(aws iam list-ssh-public-keys --user-name $user --query 'SSHPublicKeys[].SSHPublicKeyId' --region $region --output text)",
                  "        if [ ! \"$keys\" = \"\" ]; then",
                  "            if [ -d /home/$user ]; then",
                  "                /usr/sbin/useradd -M $user",
                  "            else",
                  "                /usr/sbin/useradd $user",
                  "            fi",
                  "            mkdir -p /home/$user/.ssh",
                  "            chmod 0700 /home/$user/.ssh",
                  "            rm -f /home/$user/.ssh/authorized_keys",
                  "            for key in $keys; do",
                  "                echo -n \" - $key\"",
                  "                echo $(aws iam get-ssh-public-key --user-name $user --ssh-public-key-id $key --encoding SSH --query 'SSHPublicKey.SSHPublicKeyBody' --region $region --output text) >> /home/$user/.ssh/authorized_keys",
                  "            done",
                  "            chmod 0600 /home/$user/.ssh/authorized_keys",
                  "            rm -f /home/$user/.ssh/config",
                  "            echo \"Host *\" >> /home/$user/.ssh/config",
                  "            echo \"  ForwardAgent yes\" >> /home/$user/.ssh/config",
                  "            echo \"  User ec2-user\" >> /home/$user/.ssh/config",
                  "            chmod 0600 /home/$user/.ssh/config",
                  "            chown -R $user:$user /home/$user/.ssh",
                  "            echo",
                  "        else",
                  "            echo \" - skipped (no SSH Key)\"",
                  "        fi",
                  "    else",
                  "        echo \" - skipped (user created as administrator)\"",
                  "    fi",
                  "done"
              ]]},
                "mode"  : "000700",
                "owner" : "root",
                "group" : "root"
              }
            },
            "commands" : {
              "01_createusers" : {
                "command" : "/root/bin/createusers",
                "ignoreErrors" : "false"
              }
            }
          },
          "InstallConfiguration" : {
            "files" : {
              "/var/tmp/hosts" : {
                "source" :  { "Fn::Join" : [ "", [ "https://", { "Fn::If" : [ "ConfigureGlobalS3", "s3", { "Fn::Sub" : "s3-${AWS::Region}" }]}, ".amazonaws.com/", { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ConfigurationsBucket" }}, "/", { "Ref" : "ConfigurationFolder" }, "/", { "Ref" : "ConfigurationObject" }]]},
                "mode"  : "000600",
                "owner" : "root",
                "group" : "root"
              }
            },
            "commands" : {
              "01_appendhosts" : {
                "command" : "cat /var/tmp/hosts >> /etc/hosts",
                "ignoreErrors" : "false"
              }
            }
          }
        }
      },
      "Properties" : {
        "ImageId" : { "Fn::GetAtt" : [ "GetAmazonLinuxImageId", "ImageId" ]},
        "InstanceType" : { "Fn::FindInMap" : [ "InstanceTypeMap", "Bastion", { "Ref" : "EnvironmentType" }]},
        "IamInstanceProfile" : { "Ref" : "InstanceProfile" },
        "KeyName" : { "Fn::If" : [ "ConfigureKey", { "Ref" : "KeyName" }, { "Ref" : "AWS::NoValue" }]},
        "SecurityGroups" : [{ "Ref" : "SecurityGroup" }],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : [ "\n", [
          "#!/bin/bash -xe",
          "yum update -y aws-cfn-bootstrap",
          "",
          { "Fn::Sub" : "/opt/aws/bin/cfn-init --verbose --configsets All --stack ${AWS::StackName} --resource LaunchConfiguration --region ${AWS::Region}" },
          { "Fn::Sub" : "/opt/aws/bin/cfn-signal --exit-code $? --stack ${AWS::StackName} --resource AutoScalingGroup --region ${AWS::Region}" }
        ]]}}
      }
    },

    "AutoScalingGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "LaunchConfigurationName" : { "Ref" : "LaunchConfiguration" },
        "VPCZoneIdentifier" : [
          { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-Public1SubnetA" }},
          { "Fn::If" : [ "ConfigureMultiZone", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-Public1SubnetB" }}, { "Ref" : "AWS::NoValue" }]}
        ],
        "MinSize" : { "Fn::If" : [ "ConfigureStandby", "0", { "Fn::If" : [ "ConfigureMultiZone", "2", "1" ]}]},
        "MaxSize" : { "Fn::If" : [ "ConfigureStandby", "0", { "Fn::If" : [ "ConfigureMultiZone", "2", "1" ]}]},
        "DesiredCapacity" : { "Fn::If" : [ "ConfigureStandby", "0", { "Fn::If" : [ "ConfigureMultiZone", "2", "1" ]}]},
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }}, { "Ref" : "UtilityName" }, "Instance" ]]}, "PropagateAtLaunch" : "true" }
        ]
      },
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Count" : { "Fn::If" : [ "ConfigureStandby", "0", { "Fn::If" : [ "ConfigureMultiZone", "2", "1" ]}]},
          "Timeout" : "PT10M"
        }
      },
      "UpdatePolicy" : {
        "AutoScalingRollingUpdate" : {
          "MinInstancesInService" : "1",
          "MaxBatchSize" : "1",
          "PauseTime" : "PT10M",
          "WaitOnResourceSignals" : "true"
        }
      }
    },

    "OnScheduledAction" : {
      "Type" : "AWS::AutoScaling::ScheduledAction",
      "Properties" : {
        "AutoScalingGroupName" : { "Ref" : "AutoScalingGroup" },
        "MinSize" : { "Fn::If" : [ "ConfigureStandby", "0", { "Fn::If" : [ "ConfigureMultiZone", "2", "1" ]}]},
        "MaxSize" : { "Fn::If" : [ "ConfigureStandby", "0", { "Fn::If" : [ "ConfigureMultiZone", "2", "1" ]}]},
        "DesiredCapacity" : { "Fn::If" : [ "ConfigureStandby", "0", { "Fn::If" : [ "ConfigureMultiZone", "2", "1" ]}]},
        "Recurrence" : { "Ref" : "OnSchedule" }
      },
      "Condition" : "ConfigureOnSchedule"
    },

    "OffScheduledAction" : {
      "Type" : "AWS::AutoScaling::ScheduledAction",
      "Properties" : {
        "AutoScalingGroupName" : { "Ref" : "AutoScalingGroup" },
        "MinSize" : 0,
        "MaxSize" : 0,
        "DesiredCapacity" : 0,
        "Recurrence" : { "Ref" : "OffSchedule" }
      },
      "Condition" : "ConfigureOffSchedule"
    },

    "PublicRecordSet" : {
      "Type" : "AWS::Route53::RecordSet",
      "Properties" : {
        "HostedZoneId" : { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-PublicHostedZone" }},
        "Comment" : { "Fn::Join" : [ "", [ "DNS name for ", { "Ref" : "UtilityName" }, " Instance" ]]},
        "Name" : { "Fn::Join" : [ "", [ { "Ref" : "UtilityDomain" }, ".", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCDomain" }}, "." ]]},
        "Type" : "A",
        "TTL" : "900",
        "ResourceRecords" : [{ "Ref" : "EIPA" }]
      },
      "Condition" : "ConfigureDomainName"
    },

    "PublicRecordSetA" : {
      "Type" : "AWS::Route53::RecordSet",
      "Properties" : {
        "HostedZoneId" : { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-PublicHostedZone" }},
        "Comment" : { "Fn::Join" : [ "", [ "DNS name for ", { "Ref" : "UtilityName" }, " Instance in ", { "Fn::Select" : [ "0", { "Fn::GetAZs" : "" }]}]]},
        "Name" : { "Fn::Join" : [ "", [ { "Ref" : "UtilityDomain" }, "a.", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCDomain" }}, "." ]]},
        "Type" : "A",
        "TTL" : "900",
        "ResourceRecords" : [{ "Ref" : "EIPA" }]
      },
      "Condition" : "ConfigureDomainName&MultiZone"
    },

    "PublicRecordSetB" : {
      "Type" : "AWS::Route53::RecordSet",
      "Properties" : {
        "HostedZoneId" : { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-PublicHostedZone" }},
        "Comment" : { "Fn::Join" : [ "", [ "DNS name for ", { "Ref" : "UtilityName" }, " Instance in ", { "Fn::Select" : [ "1", { "Fn::GetAZs" : "" }]}]]},
        "Name" : { "Fn::Join" : [ "", [ { "Ref" : "UtilityDomain" }, "b.", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCDomain" }}, "." ]]},
        "Type" : "A",
        "TTL" : "900",
        "ResourceRecords" : [{ "Ref" : "EIPB" }]
      },
      "Condition" : "ConfigureDomainName&MultiZone"
    }
  },

  "Outputs" : {
    "SecurityGroup" : {
      "Description" : "The SecurityGroup",
      "Value" : { "Ref" : "SecurityGroup" },
      "Export" : { "Name" : { "Fn::Sub" : "${AWS::StackName}-SecurityGroup" }}
    },

    "EIPA" : {
      "Description" : "The Public Address of the Bastion in Availability Zone A",
      "Value" : { "Ref" : "EIPA" },
      "Export" : { "Name" : { "Fn::Sub" : "${AWS::StackName}-EIPA" }},
      "Condition" : "ConfigureStaticPublicAddress"
    },

    "EIPB" : {
      "Description" : "The Public Address of the Bastion in Availability Zone B",
      "Value" : { "Ref" : "EIPB" },
      "Export" : { "Name" : { "Fn::Sub" : "${AWS::StackName}-EIPB" }},
      "Condition" : "ConfigureStaticPublicAddress&MultiZone"
    },

    "PublicHostname" : {
      "Description" : "The Public Hostname of the Bastion",
      "Value" : { "Fn::Join" : [ "", [ { "Ref" : "UtilityDomain" }, ".", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCDomain" }}]]},
      "Export" : { "Name" : { "Fn::Sub" : "${AWS::StackName}-PublicHostname" }},
      "Condition" : "ConfigureDomainName"
    },

    "PublicHostnameA" : {
      "Description" : "The Public Hostname of the Bastion in Availability Zone A",
      "Value" : { "Fn::Join" : [ "", [ { "Ref" : "UtilityDomain" }, "a.", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCDomain" }}]]},
      "Export" : { "Name" : { "Fn::Sub" : "${AWS::StackName}-PublicHostnameA" }},
      "Condition" : "ConfigureDomainName&MultiZone"
    },

    "PublicHostnameB" : {
      "Description" : "The Public Hostname of the Bastion in Availability Zone B",
      "Value" : { "Fn::Join" : [ "", [ { "Ref" : "UtilityDomain" }, "b.", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCDomain" }}]]},
      "Export" : { "Name" : { "Fn::Sub" : "${AWS::StackName}-PublicHostnameB" }},
      "Condition" : "ConfigureDomainName&MultiZone"
    }
  }
}
