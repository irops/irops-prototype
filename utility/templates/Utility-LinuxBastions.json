{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Utility-LinuxBastions Template: This adds Linux Bastions to a VPC. These Bastions are wrapped in an AutoScalingGroup, so if they fail, they are re-created automatically. Optionally, static public and private IP addresses can be requested, and optionally registered in public and private DNS. Optionally, logs can be uploaded to CloudWatch Logs, with an Alarm to monitor invalid users. Optionally, users who are members of the BastionUsers IAM group can be created on this server, with any SSH keys they have imported setup for remote access.",

  "Metadata" : {
    "AWS::CloudFormation::Interface" : {
      "ParameterGroups" : [
        {
          "Label" : { "default" : "Stack Dependencies" },
          "Parameters" : [
            "VPCStackName",
            "StandardTopicsStackName"
          ]
        },
        {
          "Label" : { "default" : "Resource Dependencies" },
          "Parameters" : [
            "KeyName"
          ]
        },
        {
          "Label" : { "default" : "System Configuration" },
          "Parameters" : [
            "CompanyName",
            "SystemName"
          ]
        },
        {
          "Label" : { "default" : "Environment Configuration" },
          "Parameters" : [
            "EnvironmentSize"
          ]
        },
        {
          "Label" : { "default" : "Utility Configuration" },
          "Parameters" : [
            "UtilityName",
            "UtilityDomain",
            "UseMultiZone",
            "UseStaticPublicAddress",
            "UseStaticPrivateAddress",
            "UseLogMonitoring",
            "LogRetention",
            "UseLocalUsers",
            "StartTime",
            "StopTime"
          ]
        },
        {
          "Label" : { "default" : "Security Configuration" },
          "Parameters" : [
            "PublicNetwork",
            "PublicNetwork1",
            "PublicNetwork2",
            "PublicNetwork3",
            "PrivateNetwork",
            "PrivateNetwork1",
            "PrivateNetwork2",
            "PrivateNetwork3"
          ]
        }
      ],

      "ParameterLabels" : {
        "VPCStackName" : { "default" : "VPC Stack Name" },
        "StandardTopicsStackName" : { "default" : "StandardTopics Stack Name" },
        "KeyName" : { "default" : "Key Name" },
        "CompanyName" : { "default" : "Company Name" },
        "SystemName" : { "default" : "System Name" },
        "EnvironmentSize" : { "default" : "Environment Size" },
        "UtilityName" : { "default" : "Utility Name" },
        "UtilityDomain" : { "default" : "Utility Domain" },
        "UseMultiZone" : { "default" : "Use Multi-Zone" },
        "UseStaticPublicAddress" : { "default" : "Use Static Public Address" },
        "UseStaticPrivateAddress" : { "default" : "Use Static Private Address" },
        "UseLogMonitoring" : { "default" : "Use Log Monitoring" },
        "LogRetention" : { "default" : "Log Retention" },
        "UseLocalUsers" : { "default" : "Use Local Users" },
        "UseSchedule" : { "default" : "Use Schedule" },
        "StartTime" : { "default" : "Start Time" },
        "StopTime" : { "default" : "Stop Time" },
        "PublicNetwork" : { "default" : "Public Network" },
        "PublicNetwork1" : { "default" : "Additional Public Network 1" },
        "PublicNetwork2" : { "default" : "Additional Public Network 2" },
        "PublicNetwork3" : { "default" : "Additional Public Network 3" },
        "PrivateNetwork" : { "default" : "Private Network" },
        "PrivateNetwork1" : { "default" : "Additional Private Network 1" },
        "PrivateNetwork2" : { "default" : "Additional Private Network 2" },
        "PrivateNetwork3" : { "default" : "Additional Private Network 3" }
      }
    }
  },

  "Parameters" : {
    "VPCStackName" : {
      "Description" : "Name of the CloudFormation Stack containing the VPC.",
      "Type" : "String",
      "MinLength" : 8,
      "MaxLength" : 64,
      "Default" : "Production-VPC",
      "AllowedPattern" : "^[A-Z][-a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters and dashes."
    },

    "StandardTopicsStackName" : {
      "Description" : "Name of the CloudFormation Stack containing Standard Topics.",
      "Type" : "String",
      "MinLength" : 2,
      "MaxLength" : 64,
      "Default" : "StandardTopics",
      "AllowedPattern" : "^[A-Z][-a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters and dashes."
    },

    "KeyName" : {
      "Description" : "Name of an existing KeyPair to enable SSH access to the Instances",
      "Type" : "AWS::EC2::KeyPair::KeyName",
      "MaxLength" : 32,
      "Default" : "example",
      "AllowedPattern" : "(^$|^[_a-zA-Z0-9]*$)",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    },

    "CompanyName" : {
      "Description" : "Name of the Company associated with the Stack",
      "Type" : "String",
      "MinLength" : 2,
      "MaxLength" : 32,
      "Default" : "Demo",
      "AllowedPattern" : "^[A-Z][a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters."
    },

    "SystemName" : {
      "Description" : "Name of the System associated with the Stack",
      "Type" : "String",
      "MinLength" : 2,
      "MaxLength" : 32,
      "Default" : "IROPS",
      "AllowedPattern" : "^[A-Z][a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters."
    },

    "EnvironmentSize" : {
      "Description" : "Size of the Environment to build. Used to select size-related options in Mappings",
      "Type" : "String",
      "Default" : "micro",
      "AllowedValues" : [ "micro", "small", "medium", "large", "xlarge" ],
      "ConstraintDescription" : "must be micro, small, medium, large or xlarge."
    },

    "UtilityName" : {
      "Description" : "Name of the Utility associated with the Stack",
      "Type" : "String",
      "MinLength" : 2,
      "MaxLength" : 32,
      "Default" : "LinuxBastions",
      "AllowedPattern" : "^[A-Z][a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters."
    },

    "UtilityDomain" : {
      "Description" : "DNS Name of the Utility associated with the Stack",
      "Type" : "String",
      "MaxLength" : 16,
      "AllowedPattern" : "(^$|^[a-z][-a-z0-9]*$)",
      "ConstraintDescription" : "must begin with a lower case letter and contain only lower case letters, numbers and dashes."
    },

    "UseMultiZone" : {
      "Description" : "Create Bastions in multiple Availability Zones",
      "Type" : "String",
      "Default" : "true",
      "AllowedValues" : [ "true", "false" ],
      "ConstraintDescription" : "must be either true or false."
    },

    "UseStaticPublicAddress" : {
      "Description" : "Create and associate a separate Static Public Address",
      "Type" : "String",
      "Default" : "true",
      "AllowedValues" : [ "true", "false" ],
      "ConstraintDescription" : "must be either true or false."
    },

    "UseStaticPrivateAddress" : {
      "Description" : "Create and attach a separate Static Private Address",
      "Type" : "String",
      "Default" : "true",
      "AllowedValues" : [ "true", "false" ],
      "ConstraintDescription" : "must be either true or false."
    },

    "UseLogMonitoring" : {
      "Description" : "Send Logs to CloudWatch Logs",
      "Type" : "String",
      "Default" : "true",
      "AllowedValues" : [ "true", "false" ],
      "ConstraintDescription" : "must be either true or false."
    },

    "LogRetention" : {
      "Description" : "Number of days to retain log events",
      "Type" : "Number",
      "Default" : 14,
      "AllowedValues" : [ 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653 ],
      "ConstraintDescription" : "must be: 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827 or 3653."
    },

    "UseLocalUsers" : {
      "Description" : "Synchronize Members of BastionUsers IAM Group (with SSH Keys) to Local Unix Users",
      "Type" : "String",
      "Default" : "true",
      "AllowedValues" : [ "true", "false" ],
      "ConstraintDescription" : "must be either true or false."
    },

    "UseSchedule" : {
      "Description" : "Use a Schedule to start and stop the Bastions",
      "Type" : "String",
      "Default" : "true",
      "AllowedValues" : [ "true", "false" ],
      "ConstraintDescription" : "must be either true or false."
    },

    "StartTime" : {
      "Description" : "Hour in UTC to Start Bastions",
      "Type" : "Number",
      "Default" : 11,
      "AllowedValues" : [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 ,16, 17, 18, 19, 20, 21, 22, 23 ],
      "ConstraintDescription" : "must be: 0 - 23."
    },

    "StopTime" : {
      "Description" : "Hour in UTC to Stop Bastions",
      "Type" : "Number",
      "Default" : 4,
      "AllowedValues" : [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 ,16, 17, 18, 19, 20, 21, 22, 23 ],
      "ConstraintDescription" : "must be: 0 - 23."
    },

    "PublicNetwork" : {
      "Description" : "Public network that can access the Utility",
      "Type" : "String",
      "Default" : "0.0.0.0/0",
      "AllowedPattern" : "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$",
      "ConstraintDescription" : "must be a valid IP CIDR range of the form x.x.x.x/x."
    },

    "PublicNetwork1" : {
      "Description" : "Additional public network that can access the Utility",
      "Type" : "String",
      "Default" : "",
      "AllowedPattern" : "(^$|^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$)",
      "ConstraintDescription" : "must be a valid IP CIDR range of the form x.x.x.x/x."
    },

    "PublicNetwork2" : {
      "Description" : "Additional public network that can access the Utility",
      "Type" : "String",
      "Default" : "",
      "AllowedPattern" : "(^$|^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$)",
      "ConstraintDescription" : "must be a valid IP CIDR range of the form x.x.x.x/x."
    },

    "PublicNetwork3" : {
      "Description" : "Additional public network that can access the Utility",
      "Type" : "String",
      "Default" : "",
      "AllowedPattern" : "(^$|^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$)",
      "ConstraintDescription" : "must be a valid IP CIDR range of the form x.x.x.x/x."
    },

    "PrivateNetwork" : {
      "Description" : "Private network that can access the Utility",
      "Type" : "String",
      "Default" : "10.0.0.0/16",
      "AllowedPattern" : "(^$|^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$)",
      "ConstraintDescription" : "must be a valid IP CIDR range of the form 10.x.x.x/x."
    },

    "PrivateNetwork1" : {
      "Description" : "Additional private network that can access the Utility",
      "Type" : "String",
      "Default" : "",
      "AllowedPattern" : "(^$|^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$)",
      "ConstraintDescription" : "must be a valid IP CIDR range of the form 10.x.x.x/x."
    },

    "PrivateNetwork2" : {
      "Description" : "Additional private network that can access the Utility",
      "Type" : "String",
      "Default" : "",
      "AllowedPattern" : "(^$|^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$)",
      "ConstraintDescription" : "must be a valid IP CIDR range of the form 10.x.x.x/x."
    },

    "PrivateNetwork3" : {
      "Description" : "Additional private network that can access the Utility",
      "Type" : "String",
      "Default" : "",
      "AllowedPattern" : "(^$|^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$)",
      "ConstraintDescription" : "must be a valid IP CIDR range of the form 10.x.x.x/x."
    }
  },

  "Mappings" : {
    "ImageIdMap" : {
      "us-east-1"      : { "AMI" : "ami-9be6f38c" },
      "us-east-2"      : { "AMI" : "ami-38cd975d" },
      "us-west-1"      : { "AMI" : "ami-b73d6cd7" },
      "us-west-2"      : { "AMI" : "ami-1e299d7e" },
      "ca-central-1"   : { "AMI" : "ami-eb20928f" },
      "sa-east-1"      : { "AMI" : "ami-bb40d8d7" },
      "eu-west-1"      : { "AMI" : "ami-c51e3eb6" },
      "eu-west-2"      : { "AMI" : "ami-bfe0eadb" },
      "eu-central-1"   : { "AMI" : "ami-211ada4e" },
      "ap-northeast-1" : { "AMI" : "ami-9f0c67f8" },
      "ap-northeast-2" : { "AMI" : "ami-94bb6dfa" },
      "ap-southeast-1" : { "AMI" : "ami-4dd6782e" },
      "ap-southeast-2" : { "AMI" : "ami-28cff44b" },
      "ap-south-1"     : { "AMI" : "ami-9fc7b0f0" }
    },

    "InstanceTypeMap" : {
      "Bastion" : { "micro" : "t2.nano", "small" : "t2.small", "medium" : "t2.medium", "large" : "t2.large", "xlarge" : "t2.xlarge" }
    },

    "HostMap" : {
      "Bastion" : { "ZoneA" :  "0.8", "ZoneB" :  "64.8", "ZoneC" : "128.8", "ZoneD" : "192.8" }
    }
  },

  "Conditions" : {
    "ConfigureKey" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Ref" : "KeyName" }, "" ] }]},
    "ConfigureMultiZone" : { "Fn::Equals" : [{ "Ref" : "UseMultiZone" }, "true" ]},
    "ConfigureStaticPublicAddress" : { "Fn::Equals" : [{ "Ref" : "UseStaticPublicAddress" }, "true" ]},
    "ConfigureStaticPrivateAddress" : { "Fn::Equals" : [{ "Ref" : "UseStaticPrivateAddress" }, "true" ]},
    "ConfigureLogs" : { "Fn::Equals" : [{ "Ref" : "UseLogMonitoring" }, "true" ]},
    "ConfigureUsers" : { "Fn::Equals" : [{ "Ref" : "UseLocalUsers" }, "true" ]},
    "ConfigureSchedule" : { "Fn::Equals" : [{ "Ref" : "UseSchedule" }, "true" ]},
    "ConfigurePublicDNS" : { "Fn::And" : [{ "Fn::Not" : [{ "Fn::Equals" : [{ "Ref" : "UtilityDomain" }, "" ]}]}, { "Condition" : "ConfigureStaticPublicAddress" }]},
    "ConfigurePublicDNS&MultiZone" : { "Fn::And" : [{ "Condition" : "ConfigurePublicDNS" }, { "Condition" : "ConfigureMultiZone" }]},
    "ConfigurePrivateDNS" : { "Fn::And" : [{ "Fn::Not" : [{ "Fn::Equals" : [{ "Ref" : "UtilityDomain" }, "" ]}]}, { "Condition" : "ConfigureStaticPrivateAddress" }]},
    "ConfigurePrivateDNS&MultiZone" : { "Fn::And" : [{ "Condition" : "ConfigurePrivateDNS" }, { "Condition" : "ConfigureMultiZone" }]},
    "ConfigureStaticPublicAddress&MultiZone" : { "Fn::And" : [{ "Condition" : "ConfigureStaticPublicAddress" }, { "Condition" : "ConfigureMultiZone" }]},
    "ConfigureStaticPrivateAddress&MultiZone" : { "Fn::And" : [{ "Condition" : "ConfigureStaticPrivateAddress" }, { "Condition" : "ConfigureMultiZone" }]},
    "ConfigurePublicNetwork1" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Ref" : "PublicNetwork1" }, "" ]}]},
    "ConfigurePublicNetwork2" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Ref" : "PublicNetwork2" }, "" ]}]},
    "ConfigurePublicNetwork3" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Ref" : "PublicNetwork3" }, "" ]}]},
    "ConfigurePrivateNetwork" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Ref" : "PrivateNetwork" }, "" ]}]},
    "ConfigurePrivateNetwork1" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Ref" : "PrivateNetwork1" }, "" ]}]},
    "ConfigurePrivateNetwork2" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Ref" : "PrivateNetwork2" }, "" ]}]},
    "ConfigurePrivateNetwork3" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Ref" : "PrivateNetwork3" }, "" ]}]}
  },

  "Resources" : {
    "Role" : {
      "Type" : "AWS::IAM::Role",
      "Properties" : {
        "AssumeRolePolicyDocument" : {
          "Version" : "2012-10-17",
          "Statement" : [{
            "Effect" : "Allow",
            "Principal" : { "Service" : [ "ec2.amazonaws.com" ]},
            "Action" : [ "sts:AssumeRole" ]
          }]
        },
        "Path" : "/"
      }
    },

    "StaticPublicAddressPolicy" : {
      "Type" : "AWS::IAM::Policy",
      "Properties" : {
        "PolicyName" : "StaticPublicAddressPolicy",
        "PolicyDocument" : {
          "Version" : "2012-10-17",
          "Statement" : [{
            "Effect" : "Allow",
            "Action" : [
              "ec2:AssociateAddress",
              "ec2:DisassociateAddress"
            ],
            "Resource" : "*"
          }]
        },
        "Roles" : [{ "Ref" : "Role" }]
      },
      "Condition" : "ConfigureStaticPublicAddress"
    },

    "StaticPrivateAddressPolicy" : {
      "Type" : "AWS::IAM::Policy",
      "Properties" : {
        "PolicyName" : "StaticPrivateAddressPolicy",
        "PolicyDocument" : {
          "Version" : "2012-10-17",
          "Statement" : [{
            "Effect" : "Allow",
            "Action" : [
              "ec2:AttachNetworkInterface",
              "ec2:DetachNetworkInterface"
            ],
            "Resource" : "*"
          }]
        },
        "Roles" : [{ "Ref" : "Role" }]
      },
      "Condition" : "ConfigureStaticPrivateAddress"
    },

    "LogMonitoringPolicy" : {
      "Type" : "AWS::IAM::Policy",
      "Properties" : {
        "PolicyName" : "LogMonitoringPolicy",
        "PolicyDocument" : {
          "Version" : "2012-10-17",
          "Statement" : [{
            "Effect" : "Allow",
            "Action" : [
              "logs:CreateLogGroup",
              "logs:CreateLogStream",
              "logs:PutLogEvents",
              "logs:DescribeLogStreams"
            ],
            "Resource" : [
              "arn:aws:logs:*:*:*"
            ]
          }]
        },
        "Roles" : [{ "Ref" : "Role" }]
      },
      "Condition" : "ConfigureLogs"
    },

    "LocalUsersPolicy" : {
      "Type" : "AWS::IAM::Policy",
      "Properties" : {
        "PolicyName" : "LocalUsersPolicy",
        "PolicyDocument" : {
          "Version" : "2012-10-17",
          "Statement" : [{
            "Effect" : "Allow",
            "Action" : [
              "iam:GetGroup"
            ],
            "Resource" : { "Fn::Sub" : "arn:aws:iam::${AWS::AccountId}:group/BastionUsers" }
          },
          {
            "Effect" : "Allow",
            "Action" : [
              "iam:ListSSHPublicKeys",
              "iam:GetSSHPublicKey"
            ],
            "Resource" : { "Fn::Sub" : "arn:aws:iam::${AWS::AccountId}:user/*" }
          }]
        },
        "Roles" : [{ "Ref" : "Role" }]
      },
      "Condition" : "ConfigureUsers"
    },

    "InstanceProfile" : {
      "Type" : "AWS::IAM::InstanceProfile",
      "Properties" : {
        "Path" : "/",
        "Roles" : [{ "Ref" : "Role" }]
      }
    },

    "LogGroup" : {
      "Type" : "AWS::Logs::LogGroup",
      "Properties" : {
        "RetentionInDays" : { "Ref" : "LogRetention" }
      },
      "Condition" : "ConfigureLogs"
    },

    "ValidUserMetricFilter" : {
      "Type" : "AWS::Logs::MetricFilter",
      "Properties" : {
        "LogGroupName" : { "Ref" : "LogGroup" },
        "FilterPattern" : "[month, day, time, host, program=sshd*, message=Accepted publickey, ...]",
        "MetricTransformations" : [{
          "MetricNamespace" : { "Fn::Join" : [ "", [ { "Ref" : "SystemName" }, "/", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }}, "-", { "Ref" : "UtilityName" }]]},
          "MetricName" : "ValidUsersCount",
          "MetricValue" : "1"
        }]
      },
      "Condition" : "ConfigureLogs"
    },

    "InvalidUserMetricFilter" : {
      "Type" : "AWS::Logs::MetricFilter",
      "Properties" : {
        "LogGroupName" : { "Ref" : "LogGroup" },
        "FilterPattern" : "[month, day, time, host, program=sshd*, message=Invalid user, ...]",
        "MetricTransformations" : [{
          "MetricNamespace" : { "Fn::Join" : [ "", [ { "Ref" : "SystemName" }, "/", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }}, "-", { "Ref" : "UtilityName" }]]},
          "MetricName" : "InvalidUsersCount",
          "MetricValue" : "1"
        }]
      },
      "Condition" : "ConfigureLogs"
    },

    "InvalidUsersAlarm" : {
      "Type" : "AWS::CloudWatch::Alarm",
      "Properties" : {
        "AlarmDescription" : "The number of Invalid Logins is greater than 5 over 1 minute",
        "AlarmActions" : [
          { "Fn::ImportValue" : { "Fn::Sub" : "${StandardTopicsStackName}-AlarmsTopic" }}
        ],
        "Namespace" : { "Fn::Join" : [ "", [ { "Ref" : "SystemName" }, "/", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }}, "-", { "Ref" : "UtilityName" }]]},
        "MetricName" : "InvalidUsersCount",
        "Statistic" : "Sum",
        "Period" : "60",
        "EvaluationPeriods" : "1",
        "Threshold" : "5",
        "ComparisonOperator" : "GreaterThanThreshold"
      },
      "Condition" : "ConfigureLogs"
    },

    "SecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : { "Fn::Join" : [ "", [ { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }}, "-", { "Ref" : "UtilityName" }, "SecurityGroup" ]]},
        "VpcId" : { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPC" }},
        "SecurityGroupIngress" : [
          { "IpProtocol" : "icmp", "FromPort" : "-1", "ToPort" : "-1", "CidrIp" : { "Ref" : "PublicNetwork" }},
          { "IpProtocol" : "tcp",  "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "PublicNetwork" }},
          { "Fn::If" : [ "ConfigurePublicNetwork1", { "IpProtocol" : "icmp", "FromPort" : "-1", "ToPort" : "-1", "CidrIp" : { "Ref" : "PublicNetwork1" }}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigurePublicNetwork1", { "IpProtocol" : "tcp",  "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "PublicNetwork1" }}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigurePublicNetwork2", { "IpProtocol" : "icmp", "FromPort" : "-1", "ToPort" : "-1", "CidrIp" : { "Ref" : "PublicNetwork2" }}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigurePublicNetwork2", { "IpProtocol" : "tcp",  "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "PublicNetwork2" }}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigurePublicNetwork3", { "IpProtocol" : "icmp", "FromPort" : "-1", "ToPort" : "-1", "CidrIp" : { "Ref" : "PublicNetwork3" }}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigurePublicNetwork3", { "IpProtocol" : "tcp",  "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "PublicNetwork3" }}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigurePrivateNetwork", { "IpProtocol" : "icmp", "FromPort" : "-1", "ToPort" : "-1", "CidrIp" : { "Ref" : "PrivateNetwork" }}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigurePrivateNetwork", { "IpProtocol" : "tcp",  "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "PrivateNetwork" }}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigurePrivateNetwork1", { "IpProtocol" : "icmp", "FromPort" : "-1", "ToPort" : "-1", "CidrIp" : { "Ref" : "PrivateNetwork1" }}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigurePrivateNetwork1", { "IpProtocol" : "tcp",  "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "PrivateNetwork1" }}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigurePrivateNetwork2", { "IpProtocol" : "icmp", "FromPort" : "-1", "ToPort" : "-1", "CidrIp" : { "Ref" : "PrivateNetwork2" }}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigurePrivateNetwork2", { "IpProtocol" : "tcp",  "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "PrivateNetwork2" }}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigurePrivateNetwork3", { "IpProtocol" : "icmp", "FromPort" : "-1", "ToPort" : "-1", "CidrIp" : { "Ref" : "PrivateNetwork3" }}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigurePrivateNetwork3", { "IpProtocol" : "tcp",  "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "PrivateNetwork3" }}, { "Ref" : "AWS::NoValue" }]}
        ],
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "", [ { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }}, "-", { "Ref" : "UtilityName" }, "SecurityGroup" ]]}}
        ]
      }
    },

    "EIPA" : {
      "Type" : "AWS::EC2::EIP",
      "Properties" : {
        "Domain" : "vpc"
      },
      "Condition" : "ConfigureStaticPublicAddress"
    },

    "EIPB" : {
      "Type" : "AWS::EC2::EIP",
      "Properties" : {
        "Domain" : "vpc"
      },
      "Condition" : "ConfigureStaticPublicAddress&MultiZone"
    },

    "PrivateNetworkInterfaceA" : {
      "Type" : "AWS::EC2::NetworkInterface",
      "Properties" : {
        "Description" : { "Fn::Join" : [ "", [ { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }}, "-", { "Ref" : "UtilityName" }, "PrivateNetworkInterfaceA" ]]},
        "PrivateIpAddress" : { "Fn::Join" : [ ".", [
                               { "Fn::Select" : [ "0", { "Fn::Split" : [ ".", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCNetwork" }}]}]},
                               { "Fn::Select" : [ "1", { "Fn::Split" : [ ".", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCNetwork" }}]}]},
                               { "Fn::FindInMap" : [ "HostMap", "Bastion", "ZoneA" ]}]]},
        "GroupSet" : [{ "Ref" : "SecurityGroup" }],
        "SubnetId" : { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-PublicSubnetA" }},
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "", [ { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }}, "-", { "Ref" : "UtilityName" }, "PrivateNetworkInterfaceA" ]]}}
        ]
      },
      "Condition" : "ConfigureStaticPrivateAddress"
    },

    "PrivateNetworkInterfaceB" : {
      "Type" : "AWS::EC2::NetworkInterface",
      "Properties" : {
        "Description" : { "Fn::Join" : [ "", [ { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }}, "-", { "Ref" : "UtilityName" }, "PublicNetworkInterfaceB" ]]},
        "PrivateIpAddress" : { "Fn::Join" : [ ".", [
                               { "Fn::Select" : [ "0", { "Fn::Split" : [ ".", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCNetwork" }}]}]},
                               { "Fn::Select" : [ "1", { "Fn::Split" : [ ".", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCNetwork" }}]}]},
                               { "Fn::FindInMap" : [ "HostMap", "Bastion", "ZoneB" ]}]]},
        "GroupSet" : [{ "Ref" : "SecurityGroup" }],
        "SubnetId" : { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-PublicSubnetB" }},
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "", [ { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }}, "-", { "Ref" : "UtilityName" }, "PublicNetworkInterfaceB" ]]}}
        ]
      },
      "Condition" : "ConfigureStaticPrivateAddress&MultiZone"
    },

    "LaunchConfiguration" : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "All" : [
              "UpgradeOS",
              "ConfigureOS",
              "ConfigureCFN",
              { "Fn::If" : [ "ConfigureStaticPublicAddress", "ConfigureStaticPublicAddress", { "Ref": "AWS::NoValue" }]},
              { "Fn::If" : [ "ConfigureStaticPrivateAddress", "ConfigureStaticPrivateAddress", { "Ref": "AWS::NoValue" }]},
              { "Fn::If" : [ "ConfigureLogs", "ConfigureLogs", { "Ref": "AWS::NoValue" }]},
              { "Fn::If" : [ "ConfigureUsers", "ConfigureUsers", { "Ref": "AWS::NoValue" }]}
            ]
          },
          "UpgradeOS" : {
            "commands" : {
              "01_yum_update" : {
                "command" : "yum update -y",
                "ignoreErrors" : "false"
              }
            }
          },
          "ConfigureOS" : {
            "packages" : {
              "yum" : {
                "yum-cron" : [],
                "git" : []
              }
            },
            "files" : {
              "/etc/yum/yum-cron.conf" : {
                "content" : { "Fn::Join" : [ "", [
                  "[commands]\n",
                  "update_cmd = security\n",
                  "update_messages = yes\n",
                  "download_updates = yes\n",
                  "apply_updates = yes\n",
                  "random_sleep = 10\n"
                ]]},
                "mode"  : "000644",
                "owner" : "root",
                "group" : "root"
              },
              "/etc/profile.d/local.sh" : {
                "content" : { "Fn::Join" : [ "", [
                  "alias lsa='ls -lAF'\n"
                ]]},
                "mode"  : "000644",
                "owner" : "root",
                "group" : "root"
              }
            },
          },
          "ConfigureCFN" : {
            "files" : {
              "/etc/cfn/cfn-hup.conf" : {
                "content" : { "Fn::Join" : [ "", [
                  "[main]\n",
                  "stack=", { "Ref" : "AWS::StackId" }, "\n",
                  "region=", { "Ref" : "AWS::Region" }, "\n"
                ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
                "content" : { "Fn::Join" : [ "", [
                  "[cfn-auto-reloader-hook]\n",
                  "triggers=post.update\n",
                  "path=Resources.LaunchConfiguration.Metadata.AWS::CloudFormation::Init\n",
                  "action=/opt/aws/bin/cfn-init --verbose",
                  " --configsets ", { "Fn::If" : [ "ConfigureLogs", { "Fn::If" : [ "ConfigureUsers", "LogsAndUsers", "Logs" ]}, { "Fn::If" : [ "ConfigureUsers", "Users", "Baseline" ]}]},
                  " --stack ", { "Ref" : "AWS::StackName" },
                  " --resource LaunchConfiguration",
                  " --region ", { "Ref" : "AWS::Region" }, "\n"
                ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              }
            },
            "services" : {
              "sysvinit" : {
                "cfn-hup" : {
                  "enabled" : "true",
                  "ensureRunning" : "true",
                  "files" : [
                    "/etc/cfn/cfn-hup.conf",
                    "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                  ]
                }
              }
            }
          },
          "ConfigureStaticPublicAddress" : {
            "files" : {
              "/root/bin/associateaddress" : {
                "content" : { "Fn::Join" : [ "", [
                  "#!/bin/bash\n",
                  "zone=$(curl -s -m 60 http://169.254.169.254/latest/meta-data/placement/availability-zone)\n",
                  "region=${zone::-1}\n",
                  "instance=$(curl -s -m 60 http://169.254.169.254/latest/meta-data/instance-id)\n",
                  "case $zone in\n",
                  "  ", { "Fn::Select" : [ "0", { "Fn::GetAZs" : "" }]}, ") eipalloc=", { "Fn::If" : [ "ConfigureStaticPublicAddress", { "Fn::GetAtt" : [ "EIPA", "AllocationId" ]}, { "Ref" : "AWS::NoValue" }]}, ";;\n",
                  "  ", { "Fn::Select" : [ "1", { "Fn::GetAZs" : "" }]}, ") eipalloc=", { "Fn::If" : [ "ConfigureStaticPublicAddress&MultiZone", { "Fn::GetAtt" : [ "EIPB", "AllocationId" ]}, { "Ref" : "AWS::NoValue" }]}, ";;\n",
                  "esac\n",
                  "aws ec2 associate-address --instance-id $instance --allocation-id $eipalloc --region $region --output text\n"
                ]]},
                "mode"  : "000700",
                "owner" : "root",
                "group" : "root"
              }
            },
            "commands" : {
              "01_associateaddress" : {
                "command" : "/root/bin/associateaddress",
                "ignoreErrors" : "false"
              }
            }
          },
          "ConfigureStaticPrivateAddress" : {
            "files" : {
              "/root/bin/attachnetworkinterface" : {
                "content" : { "Fn::Join" : [ "", [
                  "#!/bin/bash\n",
                  "zone=$(curl -s -m 60 http://169.254.169.254/latest/meta-data/placement/availability-zone)\n",
                  "region=${zone::-1}\n",
                  "instance=$(curl -s -m 60 http://169.254.169.254/latest/meta-data/instance-id)\n",
                  "case $zone in\n",
                  "  ", { "Fn::Select" : [ "0", { "Fn::GetAZs" : "" }]}, ") eni=", { "Fn::If" : [ "ConfigureStaticPrivateAddress", { "Ref" : "PrivateNetworkInterfaceA" }, { "Ref" : "AWS::NoValue" }]}, ";;\n",
                  "  ", { "Fn::Select" : [ "1", { "Fn::GetAZs" : "" }]}, ") eni=", { "Fn::If" : [ "ConfigureStaticPrivateAddress&MultiZone", { "Ref" : "PrivateNetworkInterfaceB" }, { "Ref" : "AWS::NoValue" }]}, ";;\n",
                  "esac\n",
                  "aws ec2 attach-network-interface --instance-id $instance --network-interface-id $eni --device-index 1 --region $region --output text\n"
                ]]},
                "mode"  : "000700",
                "owner" : "root",
                "group" : "root"
              }
            },
            "commands" : {
              "01_attachnetworkinterface" : {
                "command" : "/root/bin/attachnetworkinterface",
                "ignoreErrors" : "false"
              }
            }
          },
          "ConfigureLogs" : {
            "packages" : {
              "yum" : {
                "awslogs" : []
              }
            },
            "files" : {
              "/etc/awslogs/awscli.conf" : {
                "content" : { "Fn::Join" : [ "", [
                  "[default]\n",
                  "region = ", { "Ref" : "AWS::Region" }, "\n",
                  "[plugins]\n",
                  "cwlogs = cwlogs\n"
                ]]},
                "mode"  : "000644",
                "owner" : "root",
                "group" : "root"
              },
              "/etc/awslogs/awslogs.conf" : {
                "content" : { "Fn::Join" : [ "", [
                  "[general]\n",
                  "state_file = /var/lib/awslogs/agent-state\n",
                  "[/var/log/messages]\n",
                  "datetime_format = %b %d %H:%M:%S\n",
                  "file = /var/log/messages\n",
                  "log_stream_name = {instance_id}/var/log/messages\n",
                  "log_group_name = ", { "Fn::If" : [ "ConfigureLogs", { "Ref" : "LogGroup" }, { "Ref" : "AWS::NoValue" }]}, "\n",
                  "[/var/log/secure]\n",
                  "datetime_format = %b %d %H:%M:%S\n",
                  "file = /var/log/secure\n",
                  "log_stream_name = {instance_id}/var/log/secure\n",
                  "log_group_name = ", { "Fn::If" : [ "ConfigureLogs", { "Ref" : "LogGroup" }, { "Ref" : "AWS::NoValue" }]}, "\n",
                  "[/var/log/cron]\n",
                  "datetime_format = %b %d %H:%M:%S\n",
                  "file = /var/log/cron\n",
                  "log_stream_name = {instance_id}/var/log/cron\n",
                  "log_group_name = ", { "Fn::If" : [ "ConfigureLogs", { "Ref" : "LogGroup" }, { "Ref" : "AWS::NoValue" }]}, "\n",
                  "[/var/log/cloud-init.log]\n",
                  "datetime_format = %b %d %H:%M:%S\n",
                  "file = /var/log/cloud-init.log\n",
                  "log_stream_name = {instance_id}/var/log/cloud-init.log\n",
                  "log_group_name = ", { "Fn::If" : [ "ConfigureLogs", { "Ref" : "LogGroup" }, { "Ref" : "AWS::NoValue" }]}, "\n",
                  "[/var/log/cfn-init.log]\n",
                  "datetime_format = %Y-%m-%d %H:%M:%S\n",
                  "file = /var/log/cfn-init.log\n",
                  "log_stream_name = {instance_id}/var/log/cfn-init.log\n",
                  "log_group_name = ", { "Fn::If" : [ "ConfigureLogs", { "Ref" : "LogGroup" }, { "Ref" : "AWS::NoValue" }]}, "\n",
                  "[/var/log/cfn-hup.log]\n",
                  "datetime_format = %Y-%m-%d %H:%M:%S\n",
                  "file = /var/log/cfn-hup.log\n",
                  "log_stream_name = {instance_id}/var/log/cfn-hup.log\n",
                  "log_group_name = ", { "Fn::If" : [ "ConfigureLogs", { "Ref" : "LogGroup" }, { "Ref" : "AWS::NoValue" }]}, "\n",
                  "[/var/log/cfn-init-cmd.log]\n",
                  "datetime_format = %Y-%m-%d %H:%M:%S\n",
                  "file = /var/log/cfn-init-cmd.log\n",
                  "log_stream_name = {instance_id}/var/log/cfn-init-cmd.log\n",
                  "log_group_name = ", { "Fn::If" : [ "ConfigureLogs", { "Ref" : "LogGroup" }, { "Ref" : "AWS::NoValue" }]}, "\n",
                  "[/var/log/cloud-init-output.log]\n",
                  "file = /var/log/cloud-init-output.log\n",
                  "log_stream_name = {instance_id}/var/log/cloud-init-output.log\n",
                  "log_group_name = ", { "Fn::If" : [ "ConfigureLogs", { "Ref" : "LogGroup" }, { "Ref" : "AWS::NoValue" }]}, "\n",
                  "[/var/log/dmesg]\n",
                  "file = /var/log/dmesg\n",
                  "log_stream_name = {instance_id}/var/log/dmesg\n",
                  "log_group_name = ", { "Fn::If" : [ "ConfigureLogs", { "Ref" : "LogGroup" }, { "Ref" : "AWS::NoValue" }]}, "\n"
                ]]},
                "mode"  : "000644",
                "owner" : "root",
                "group" : "root"
              }
            },
            "services" : {
              "sysvinit" : {
                "awslogs" : {
                  "enabled" : "true",
                  "ensureRunning" : "true",
                  "packages" : { "yum" : [ "awslogs" ]},
                  "files" : [
                    "/etc/awslogs/awslogs.conf",
                    "/etc/awslogs/awscli.conf"
                  ]
                }
              }
            }
          },
          "ConfigureUsers" : {
            "files" : {
              "/root/bin/createusers" : {
                "content" : { "Fn::Join" : [ "", [
                  "#!/bin/bash\n",
                  "zone=$(curl -s -m 60 http://169.254.169.254/latest/meta-data/placement/availability-zone)\n",
                  "region=${zone::-1}\n",
                  "bastion_users=$(aws iam get-group --group-name BastionUsers --query 'Users[].UserName' --region $region --output text)\n",
                  "echo\n",
                  "echo $(date +\"%Y-%m-%d %H:%M:%S,%3N\") [DEBUG] Adding local users based on membership in BastionUsers IAM Group:\n",
                  "for user in $bastion_users; do\n",
                  "    echo -n \"$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] - $user\"\n",
                  "    keys=$(aws iam list-ssh-public-keys --user-name $user --query 'SSHPublicKeys[].SSHPublicKeyId' --region $region --output text)\n",
                  "    if [ ! \"$keys\" = \"\" ]; then\n",
                  "        if [ -d /home/$user ]; then\n",
                  "            /usr/sbin/useradd -M $user\n",
                  "        else\n",
                  "            /usr/sbin/useradd $user\n",
                  "        fi\n",
                  "        mkdir -p /home/$user/.ssh\n",
                  "        rm -f /home/$user/.ssh/authorized_keys\n",
                  "        touch /home/$user/.ssh/authorized_keys\n",
                  "        chown -R $user:$user /home/$user/.ssh\n",
                  "        chmod 0700 /home/$user/.ssh\n",
                  "        chmod 0600 /home/$user/.ssh/authorized_keys\n",
                  "        for key in $keys; do\n",
                  "            echo -n \" - $key\"\n",
                  "            echo $(aws iam get-ssh-public-key --user-name $user --ssh-public-key-id $key --encoding SSH --query 'SSHPublicKey.SSHPublicKeyBody' --region $region --output text) >> /home/$user/.ssh/authorized_keys\n",
                  "        done\n",
                  "        echo\n",
                  "    else\n",
                  "        echo \" - skipped (no SSH Key)\"\n",
                  "    fi\n",
                  "done\n"
              ]]},
                "mode"  : "000700",
                "owner" : "root",
                "group" : "root"
              }
            },
            "commands" : {
              "01_createusers" : {
                "command" : "/root/bin/createusers",
                "ignoreErrors" : "false"
              }
            }
          }
        }
      },
      "Properties" : {
        "ImageId" : { "Fn::FindInMap" : [ "ImageIdMap", { "Ref" : "AWS::Region" } , "AMI" ]},
        "InstanceType" : { "Fn::FindInMap" : [ "InstanceTypeMap", "Bastion", { "Ref" : "EnvironmentSize" }]},
        "IamInstanceProfile" : { "Ref" : "InstanceProfile" },
        "KeyName" : { "Fn::If" : [ "ConfigureKey", { "Ref" : "KeyName" }, { "Ref" : "AWS::NoValue" }]},
        "SecurityGroups" : [{ "Ref" : "SecurityGroup" }],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : [ "", [
          "#!/bin/bash -xe\n",
          "yum update -y aws-cfn-bootstrap\n",
          "\n",
          "# Install the files and packages from the metadata\n",
          "/opt/aws/bin/cfn-init --verbose",
          " --configsets All",
          " --stack ", { "Ref" : "AWS::StackName" },
          " --resource LaunchConfiguration",
          " --region ", { "Ref" : "AWS::Region" }, "\n",
          "\n",
          "# Signal the status from cfn-init\n",
          "/opt/aws/bin/cfn-signal --exit-code $?",
          " --stack ", { "Ref" : "AWS::StackName" },
          " --resource AutoScalingGroup",
          " --region ", { "Ref" : "AWS::Region" }, "\n"
        ]]}}
      }
    },

    "AutoScalingGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "LaunchConfigurationName" : { "Ref" : "LaunchConfiguration" },
        "VPCZoneIdentifier" : [
          { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-PublicSubnetA" }},
          { "Fn::If" : [ "ConfigureMultiZone", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-PublicSubnetB" }}, { "Ref" : "AWS::NoValue" }]}
        ],
        "MinSize" : { "Fn::If" : [ "ConfigureMultiZone", "2", "1" ]},
        "MaxSize" : { "Fn::If" : [ "ConfigureMultiZone", "2", "1" ]},
        "DesiredCapacity" : { "Fn::If" : [ "ConfigureMultiZone", "2", "1" ]},
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "", [ { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }}, "-", { "Ref" : "UtilityName" }, "Instance" ]]}, "PropagateAtLaunch" : "true" }
        ]
      },
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Count" : { "Fn::If" : [ "ConfigureMultiZone", "2", "1" ]},
          "Timeout" : "PT10M"
        }
      },
      "UpdatePolicy" : {
        "AutoScalingRollingUpdate" : {
          "MinInstancesInService" : "1",
          "MaxBatchSize" : "1",
          "PauseTime" : "PT10M",
          "WaitOnResourceSignals" : "true"
        }
      }
    },

    "OnScheduledAction" : {
      "Type" : "AWS::AutoScaling::ScheduledAction",
      "Properties" : {
        "AutoScalingGroupName" : { "Ref" : "AutoScalingGroup" },
        "MinSize" : 1,
        "MaxSize" : 1,
        "DesiredCapacity" : 1,
        "Recurrence" : { "Fn::Sub" : "0 ${StartTime} * * *" }
      },
      "Condition" : "ConfigureSchedule"
    },

    "OffScheduledAction" : {
      "Type" : "AWS::AutoScaling::ScheduledAction",
      "Properties" : {
        "AutoScalingGroupName" : { "Ref" : "AutoScalingGroup" },
        "MinSize" : 0,
        "MaxSize" : 0,
        "DesiredCapacity" : 0,
        "Recurrence" : { "Fn::Sub" : "0 ${StopTime} * * *" }
      },
      "Condition" : "ConfigureSchedule"
    },

    "PublicRecordSetA" : {
      "Type" : "AWS::Route53::RecordSet",
      "Properties" : {
        "HostedZoneId" : { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-PublicHostedZone" }},
        "Comment" : { "Fn::Join" : [ "", [ "DNS name for ", { "Ref" : "UtilityName" }, " Instance in ", { "Fn::Select" : [ "0", { "Fn::GetAZs" : "" }]}]]},
        "Name" : { "Fn::Join" : [ "", [ { "Ref" : "UtilityDomain" }, "a.", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCDomain" }}, "." ]]},
        "Type" : "A",
        "TTL" : "900",
        "ResourceRecords" : [{ "Ref" : "EIPA" }]
      },
      "Condition" : "ConfigurePublicDNS"
    },

    "PublicRecordSetB" : {
      "Type" : "AWS::Route53::RecordSet",
      "Properties" : {
        "HostedZoneId" : { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-PublicHostedZone" }},
        "Comment" : { "Fn::Join" : [ "", [ "DNS name for ", { "Ref" : "UtilityName" }, " Instance in ", { "Fn::Select" : [ "1", { "Fn::GetAZs" : "" }]}]]},
        "Name" : { "Fn::Join" : [ "", [ { "Ref" : "UtilityDomain" }, "b.", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCDomain" }}, "." ]]},
        "Type" : "A",
        "TTL" : "900",
        "ResourceRecords" : [{ "Ref" : "EIPB" }]
      },
      "Condition" : "ConfigurePublicDNS&MultiZone"
    },

    "PrivateRecordSetA" : {
      "Type" : "AWS::Route53::RecordSet",
      "Properties" : {
        "HostedZoneId" : { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-PrivateHostedZone" }},
        "Comment" : { "Fn::Join" : [ "", [ "DNS name for ", { "Ref" : "UtilityName" }, " Instance in ", { "Fn::Select" : [ "0", { "Fn::GetAZs" : "" }]}]]},
        "Name" : { "Fn::Join" : [ "", [ { "Ref" : "UtilityDomain" }, "a.", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCDomain" }}, "." ]]},
        "Type" : "A",
        "TTL" : "900",
        "ResourceRecords" : [{ "Fn::GetAtt" : [ "PrivateNetworkInterfaceA", "PrimaryPrivateIpAddress" ]}]
      },
      "Condition" : "ConfigurePrivateDNS"
    },

    "PrivateRecordSetB" : {
      "Type" : "AWS::Route53::RecordSet",
      "Properties" : {
        "HostedZoneId" : { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-PrivateHostedZone" }},
        "Comment" : { "Fn::Join" : [ "", [ "DNS name for ", { "Ref" : "UtilityName" }, " Instance in ", { "Fn::Select" : [ "1", { "Fn::GetAZs" : "" }]}]]},
        "Name" : { "Fn::Join" : [ "", [ { "Ref" : "UtilityDomain" }, "b.", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCDomain" }}, "." ]]},
        "Type" : "A",
        "TTL" : "900",
        "ResourceRecords" : [{ "Fn::GetAtt" : [ "PrivateNetworkInterfaceB", "PrimaryPrivateIpAddress" ]}]
      },
      "Condition" : "ConfigurePrivateDNS&MultiZone"
    }
  },

  "Outputs" : {
    "SecurityGroup" : {
      "Description" : "The SecurityGroup",
      "Value" : { "Ref" : "SecurityGroup" },
      "Export" : { "Name" : { "Fn::Sub" : "${AWS::StackName}-SecurityGroup" }}
    },

    "EIPA" : {
      "Description" : "The Public Address of the Bastion in Availability Zone A",
      "Value" : { "Ref" : "EIPA" },
      "Export" : { "Name" : { "Fn::Sub" : "${AWS::StackName}-EIPA" }},
      "Condition" : "ConfigureStaticPublicAddress"
    },

    "PublicHostnameA" : {
      "Description" : "The Public Hostname of the Bastion in Availability Zone A",
      "Value" : { "Fn::Join" : [ "", [ { "Ref" : "UtilityDomain" }, "a.", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCDomain" }}]]},
      "Export" : { "Name" : { "Fn::Sub" : "${AWS::StackName}-PublicHostnameA" }},
      "Condition" : "ConfigurePublicDNS"
    },

    "PrivateHostnameA" : {
      "Description" : "The Private Hostname of the Bastion in Availability Zone A",
      "Value" : { "Fn::Join" : [ "", [ { "Ref" : "UtilityDomain" }, "a.", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCDomain" }}]]},
      "Export" : { "Name" : { "Fn::Sub" : "${AWS::StackName}-PrivateHostnameA" }},
      "Condition" : "ConfigurePrivateDNS"
    },

    "EIPB" : {
      "Description" : "The Public Address of the Bastion in Availability Zone B",
      "Value" : { "Ref" : "EIPB" },
      "Export" : { "Name" : { "Fn::Sub" : "${AWS::StackName}-EIPB" }},
      "Condition" : "ConfigureStaticPublicAddress&MultiZone"
    },

    "PublicHostnameB" : {
      "Description" : "The Public Hostname of the Bastion in Availability Zone B",
      "Value" : { "Fn::Join" : [ "", [ { "Ref" : "UtilityDomain" }, "b.", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCDomain" }}]]},
      "Export" : { "Name" : { "Fn::Sub" : "${AWS::StackName}-PublicHostnameB" }},
      "Condition" : "ConfigurePublicDNS&MultiZone"
    },

    "PrivateHostnameB" : {
      "Description" : "The Private Hostname of the Bastion in Availability Zone B",
      "Value" : { "Fn::Join" : [ "", [ { "Ref" : "UtilityDomain" }, "b.", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCDomain" }}]]},
      "Export" : { "Name" : { "Fn::Sub" : "${AWS::StackName}-PrivateHostnameB" }},
      "Condition" : "ConfigurePrivateDNS&MultiZone"
    }
  }
}
