{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Utility-ActiveDirectory Template: This creates 2 Active Directory Domain Controllers to a VPC. The default Domain Administrator password will be the one retrieved from the instance. For adding members to the domain, ensure that they are launched into the ActiveDirectory-DomainMemberSecurityGroup created by this template.",

  "Metadata" : {
    "AWS::CloudFormation::Interface" : {
      "ParameterGroups" : [
        {
          "Label" : { "default" : "Stack Dependencies" },
          "Parameters" : [
            "VPCStackName",
            "CustomIdentifierFunctionsStackName",
            "StandardCIDRFunctionsStackName",
            "StandardAMIFunctionsStackName",
            "StandardBucketsStackName",
            "StandardTopicsStackName"
          ]
        },
        {
          "Label" : { "default" : "Resource Dependencies" },
          "Parameters" : [
            "KeyName"
          ]
        },
        {
          "Label" : { "default" : "System Configuration" },
          "Parameters" : [
            "CompanyName",
            "SystemName"
          ]
        },
        {
          "Label" : { "default" : "Environment Configuration" },
          "Parameters" : [
            "EnvironmentType",
            "EnvironmentZones",
            "OSName",
            "OSDate"
          ]
        },
        {
          "Label" : { "default" : "Utility Dependencies Configuration" },
          "Parameters" : [
            "SharedScriptFolder",
            "ScriptFolder",
            "SharedConfigurationFolder",
            "ConfigurationFolder"
          ]
        },
        {
          "Label" : { "default" : "Utility Configuration" },
          "Parameters" : [
            "UtilityName",
            "RestoreModePassword",
            "UseStaticAddress",
            "LogRetention"
          ]
        },
        {
          "Label" : { "default" : "Security Configuration" },
          "Parameters" : [
            "AdministratorNetworks",
            "DomainAdminUser",
            "DomainAdminPassword"
          ]
        }
      ],

      "ParameterLabels" : {
        "VPCStackName" : { "default" : "VPC Stack Name" },
        "CustomIdentifierFunctionsStackName" : { "default" : "CustomIdentifierFunctions Stack Name" },
        "StandardCIDRFunctionsStackName" : { "default" : "StandardCIDRFunctions Stack Name" },
        "StandardAMIFunctionsStackName" : { "default" : "StandardAMIFunctions Stack Name" },
        "StandardBucketsStackName" : { "default" : "StandardBuckets Stack Name" },
        "StandardTopicsStackName" : { "default" : "StandardTopics Stack Name" },
        "KeyName" : { "default" : "Key Name" },
        "CompanyName" : { "default" : "Company Name" },
        "SystemName" : { "default" : "System Name" },
        "EnvironmentType" : { "default" : "Environment Type" },
        "EnvironmentZones" : { "default" : "Environment Zones" },
        "OSName" : { "default" : "Operating System Name" },
        "OSDate" : { "default" : "Operating System Date" },
        "SharedScriptFolder" : { "default" : "Shared Script Folder" },
        "ScriptFolder" : { "default" : "Script Folder" },
        "SharedConfigurationFolder" : { "default" : "Shared Configuration Folder" },
        "ConfigurationFolder" : { "default" : "Configuration Folder" },
        "UtilityName" : { "default" : "Utility Name" },
        "RestoreModePassword" : { "default" : "Restore Mode Password" },
        "UseStaticAddress" : { "default" : "Use Static Address" },
        "LogRetention" : { "default" : "Log Retention" },
        "AdministratorNetworks" : { "default" : "Administrator Networks" },
        "DomainAdminUser" : { "default" : "DomainAdmin User" },
        "DomainAdminPassword" : { "default" : "DomainAdmin Password" }
      }
    }
  },

  "Parameters" : {
    "VPCStackName" : {
      "Description" : "Name of the CloudFormation Stack containing the VPC",
      "Type" : "String",
      "MinLength" : 8,
      "MaxLength" : 64,
      "Default" : "Production-VPC",
      "AllowedPattern" : "^[A-Z][-a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters and dashes."
    },

    "CustomIdentifierFunctionsStackName" : {
      "Description" : "Name of the CloudFormation Stack containing the Custom Identifier Functions",
      "Type" : "String",
      "MaxLength" : 64,
      "Default" : "CustomIdentifierFunctions",
      "AllowedPattern" : "(^$|^[A-Z][-a-zA-Z0-9]*$)",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters and dashes."
    },

    "StandardCIDRFunctionsStackName" : {
      "Description" : "Name of the CloudFormation Stack containing the Standard CIDR Functions",
      "Type" : "String",
      "MaxLength" : 64,
      "Default" : "StandardCIDRFunctions",
      "AllowedPattern" : "(^$|^[A-Z][-a-zA-Z0-9]*$)",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters and dashes."
    },

    "StandardAMIFunctionsStackName" : {
      "Description" : "Name of the CloudFormation Stack containing the Standard AMI Functions",
      "Type" : "String",
      "MaxLength" : 64,
      "Default" : "StandardAMIFunctions",
      "AllowedPattern" : "(^$|^[A-Z][-a-zA-Z0-9]*$)",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters and dashes."
    },

    "StandardBucketsStackName" : {
      "Description" : "Name of the CloudFormation Stack containing Standard Buckets",
      "Type" : "String",
      "MinLength" : 2,
      "MaxLength" : 64,
      "Default" : "StandardBuckets",
      "AllowedPattern" : "^[A-Z][-a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters and dashes."
    },

    "StandardTopicsStackName" : {
      "Description" : "Name of the CloudFormation Stack containing Standard Topics",
      "Type" : "String",
      "MinLength" : 2,
      "MaxLength" : 64,
      "Default" : "StandardTopics",
      "AllowedPattern" : "^[A-Z][-a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters and dashes."
    },

    "KeyName" : {
      "Description" : "Name of an existing KeyPair to enable SSH access to the Instances",
      "Type" : "AWS::EC2::KeyPair::KeyName",
      "MaxLength" : 32,
      "Default" : "administrator",
      "AllowedPattern" : "(^$|^[_a-zA-Z0-9]*$)",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    },

    "CompanyName" : {
      "Description" : "Name of the Company associated with the Stack",
      "Type" : "String",
      "MinLength" : 2,
      "MaxLength" : 32,
      "Default" : "Travel",
      "AllowedPattern" : "^[A-Z][a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters."
    },

    "SystemName" : {
      "Description" : "Name of the System associated with the Stack",
      "Type" : "String",
      "MinLength" : 2,
      "MaxLength" : 32,
      "Default" : "IROPS",
      "AllowedPattern" : "^[A-Z][a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters."
    },

    "EnvironmentType" : {
      "Description" : "Type of the Environment to build. Used to select size-related options in Mappings",
      "Type" : "String",
      "Default" : "small",
      "AllowedValues" : [ "small", "medium", "large", "xlarge" ],
      "ConstraintDescription" : "must be small, medium, large or xlarge."
    },

    "EnvironmentZones" : {
      "Description" : "Number of Availability Zones to build",
      "Type" : "String",
      "Default" : "2",
      "AllowedValues" : [ "1", "2" ],
      "ConstraintDescription" : "must be 1 or 2."
    },

    "OSName" : {
      "Description" : "The Operating System to use for Instances",
      "Type" : "String",
      "Default" : "Windows Server 2012 R2",
      "AllowedValues" : [ "Windows Server 2012 R2", "Windows Server 2016" ],
      "ConstraintDescription" : "must be \"Windows Server 2012 R2\" or \"Windows Server 2016\"."
    },

    "OSDate" : {
      "Description" : "Optional Operating System Date, specify to select a specific publication date for the Image",
      "Type" : "String",
      "Default" : "20170510",
      "AllowedPattern" : "(^$|^20(1[7-9]|[2-9][0-9])(0[1-9]|1[0-2])(0[1-9]|[1-2][0-9]|3[0-1])$)",
      "ConstraintDescription" : "Must be a valid date in YYYYMMDD format."
    },

    "SharedScriptFolder" : {
      "Description" : "Folder within the S3 Scripts bucket containing Shared Scripts deployed by this Template",
      "Type" : "String",
      "MinLength" : 2,
      "MaxLength" : 32,
      "Default" : "Windows",
      "AllowedPattern" : "^[A-Z][a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters."
    },

    "ScriptFolder" : {
      "Description" : "Folder within the S3 Scripts bucket containing Scripts deployed by this Template",
      "Type" : "String",
      "MinLength" : 2,
      "MaxLength" : 32,
      "Default" : "ActiveDirectory",
      "AllowedPattern" : "^[A-Z][a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters."
    },

    "SharedConfigurationFolder" : {
      "Description" : "Folder within the S3 Configurations bucket containing Shared Configurations deployed by this Template",
      "Type" : "String",
      "MinLength" : 2,
      "MaxLength" : 32,
      "Default" : "Windows",
      "AllowedPattern" : "^[A-Z][a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters."
    },

    "ConfigurationFolder" : {
      "Description" : "Folder within the S3 Configurations bucket containing Configurations deployed by this Template",
      "Type" : "String",
      "MinLength" : 2,
      "MaxLength" : 32,
      "Default" : "ActiveDirectory",
      "AllowedPattern" : "^[A-Z][a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters."
    },

    "UtilityName" : {
      "Description" : "Name of the Utility associated with the Stack",
      "Type" : "String",
      "MinLength" : 2,
      "MaxLength" : 32,
      "Default" : "ActiveDirectory",
      "AllowedPattern" : "^[A-Z][a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters."
    },

    "RestoreModePassword" : {
      "Description" : "Password for a separate Administrator account when the domain controller is in Restore Mode. Must be at least 8 characters containing letters, numbers and symbols",
      "Type" : "String",
      "NoEcho" : "True",
      "MinLength" : "8",
      "MaxLength" : "32",
      "AllowedPattern" : "(?=^.{6,255}$)((?=.*\\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*",
      "ConstraintDescription" : "must be a valid password."
    },

    "UseStaticAddress" : {
      "Description" : "Assign a consistent Static Address",
      "Type" : "String",
      "Default" : "true",
      "AllowedValues" : [ "true", "false" ],
      "ConstraintDescription" : "must be either true or false."
    },

    "LogRetention" : {
      "Description" : "Number of days to retain CloudWatch Log Events (0 disables use of CloudWatch Logs)",
      "Type" : "Number",
      "Default" : 14,
      "AllowedValues" : [ 0, 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653 ],
      "ConstraintDescription" : "must be: 0 (disabled), 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827 or 3653."
    },

    "AdministratorNetworks" : {
      "Description" : "Networks that can administer the Application",
      "Type" : "String",
      "Default" : "NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE",
      "ConstraintDescription" : "must be a comma-separated list of 8 values, each an IP CIDR range of the form x.x.x.x/x or the word NONE."
    },

    "DomainAdminUser" : {
      "Description" : "User name for the account that will be added as Domain Administrator. This is separate from the default \"Administrator\" account",
      "Type" : "String",
      "MinLength" : "5",
      "MaxLength" : "25",
      "Default" : "StackAdmin",
      "AllowedPattern" : "[a-zA-Z0-9]*",
      "ConstraintDescription" : "must be alphanumeric."
    },

    "DomainAdminPassword" : {
      "Description" : "Password for the domain admin user. Must be at least 8 characters containing letters, numbers and symbols",
      "Type" : "String",
      "NoEcho" : "true",
      "MinLength" : "8",
      "MaxLength" : "32",
      "AllowedPattern" : "(?=^.{6,255}$)((?=.*\\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*",
      "ConstraintDescription" : "must be a valid password."
    }
  },

  "Mappings" : {
    "ImageIdMap" : {
      "AMI"            : { "20170412" : "Windows_Server-2012-R2_RTM-English-64Bit-Base-2017.04.12",
                           "20170510" : "Windows_Server-2012-R2_RTM-English-64Bit-Base-2017.05.10",
                           "20170614" : "Windows_Server-2012-R2_RTM-English-64Bit-Base-2017.06.14" },
      "us-east-1"      : { "20170412" : "ami-e659c7f0", "20170510" : "ami-271b6d31", "20170614" : "ami-e196b0f7" },
      "us-east-2"      : { "20170412" : "ami-b5785fd0", "20170510" : "ami-7fc4e31a", "20170614" : "ami-a4b395c1" },
      "us-west-1"      : { "20170412" : "ami-ccf2d6ac", "20170510" : "ami-59a78139", "20170614" : "ami-b4614cd4" },
      "us-west-2"      : { "20170412" : "ami-2ad04f4a", "20170510" : "ami-3189ec51", "20170614" : "ami-8d0c07f4" },
      "ca-central-1"   : { "20170412" : "ami-53c37f37", "20170510" : "ami-687ec20c", "20170614" : "ami-00e95664" },
      "eu-west-1"      : { "20170412" : "ami-58a1a73e", "20170510" : "ami-96d4daf0", "20170614" : "ami-1e5d4378" },
      "eu-central-1"   : { "20170412" : "ami-8f6fb2e0", "20170510" : "ami-f9528c96", "20170614" : "ami-ad3e9ac2" },
      "eu-west-2"      : { "20170412" : "ami-22feea46", "20170510" : "ami-07455263", "20170614" : "ami-ad5d4bc9" },
      "ap-southeast-1" : { "20170412" : "ami-a843fbcb", "20170510" : "ami-9e3bbefd", "20170614" : "ami-9ab230f9" },
      "ap-southeast-2" : { "20170412" : "ami-72525a11", "20170510" : "ami-c4262ca7", "20170614" : "ami-f3203190" },
      "ap-northeast-2" : { "20170412" : "ami-06528068", "20170510" : "ami-50e13c3e", "20170614" : "ami-d38659bd" },
      "ap-northeast-1" : { "20170412" : "ami-51c8e036", "20170510" : "ami-539aa834", "20170614" : "ami-354d4552" },
      "ap-south-1"     : { "20170412" : "ami-3d0e7c52", "20170510" : "ami-67047908", "20170614" : "ami-65b6c90a" },
      "sa-east-1"      : { "20170412" : "ami-64afc208", "20170510" : "ami-af6708c3", "20170614" : "ami-4f3f5423" }
    },

    "InstanceTypeMap" : {
      "DomainController" : { "small" : "t2.medium", "medium" : "t2.large", "large" : "m4.large", "xlarge" : "m4.xlarge" }
    }
  },

  "Conditions" : {
    "ConfigureGlobalS3" : { "Fn::Equals" : [{ "Ref" : "AWS::Region" }, "us-east-1" ]},
    "GetImageID" : { "Fn::Equals" : [{ "Ref" : "OSDate" }, "" ]},
    "ConfigureMultiZone" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Ref" : "EnvironmentZones" }, "1" ]}]},
    "ConfigureStaticAddress" : { "Fn::Equals" : [{ "Ref" : "UseStaticAddress" }, "true" ]},
    "ConfigureStaticAddress&MultiZone" : { "Fn::And" : [{ "Condition" : "ConfigureStaticAddress" }, { "Condition" : "ConfigureMultiZone" }]},
    "ConfigureLogs" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Ref" : "LogRetention" }, "0" ]}]},
    "ConfigureAdministratorNetwork0" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Fn::Select" : [ "0", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}, "NONE" ]}]},
    "ConfigureAdministratorNetwork1" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Fn::Select" : [ "1", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}, "NONE" ]}]},
    "ConfigureAdministratorNetwork2" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Fn::Select" : [ "2", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}, "NONE" ]}]},
    "ConfigureAdministratorNetwork3" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Fn::Select" : [ "3", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}, "NONE" ]}]},
    "ConfigureAdministratorNetwork4" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Fn::Select" : [ "4", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}, "NONE" ]}]},
    "ConfigureAdministratorNetwork5" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Fn::Select" : [ "5", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}, "NONE" ]}]},
    "ConfigureAdministratorNetwork6" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Fn::Select" : [ "6", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}, "NONE" ]}]},
    "ConfigureAdministratorNetwork7" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Fn::Select" : [ "7", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}, "NONE" ]}]}
  },

  "Resources" : {
    "Role" : {
      "Type" : "AWS::IAM::Role",
      "Properties" : {
        "Path" : "/",
        "AssumeRolePolicyDocument" : {
          "Version" : "2012-10-17",
          "Statement" : [{
            "Effect" : "Allow",
            "Principal" : { "Service" : [ "ec2.amazonaws.com" ]},
            "Action" : [ "sts:AssumeRole" ]
          }]
        },
        "ManagedPolicyArns" : [ "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM" ]
      }
    },

    "ConfigureSitesAndSubnetsPolicy" : {
      "Type" : "AWS::IAM::Policy",
      "Properties" : {
        "PolicyName" : "ConfigureSitesAndSubnetsPolicy",
        "PolicyDocument" : {
          "Version" : "2012-10-17",
          "Statement" : [{
            "Effect" : "Allow",
            "Action" : [
              "ec2:DescribeSubnets"
            ],
            "Resource" : "*"
          }]
        },
        "Roles" : [{ "Ref" : "Role" }]
      }
    },

    "DownloadScriptFromS3Policy" : {
      "Type" : "AWS::IAM::Policy",
      "Properties" : {
        "PolicyName" : "DownloadScriptFromS3Policy",
        "PolicyDocument" : {
          "Version" : "2012-10-17",
          "Statement" : [{
            "Effect" : "Allow",
            "Action" : [
              "s3:GetObject"
            ],
            "Resource" : [
              { "Fn::Join" : [ "", [ "arn:aws:s3:::",  { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ScriptsBucket" }}, "/", { "Ref" : "SharedScriptFolder" }, "/*" ]]},
              { "Fn::Join" : [ "", [ "arn:aws:s3:::",  { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ScriptsBucket" }}, "/", { "Ref" : "ScriptFolder" }, "/*" ]]}
            ]
          }]
        },
        "Roles" : [{ "Ref" : "Role" }]
      }
    },

    "DownloadConfigurationFromS3Policy" : {
      "Type" : "AWS::IAM::Policy",
      "Properties" : {
        "PolicyName" : "DownloadConfigurationFromS3Policy",
        "PolicyDocument" : {
          "Version" : "2012-10-17",
          "Statement" : [{
            "Effect" : "Allow",
            "Action" : [
              "s3:GetObject"
            ],
            "Resource" : [
              { "Fn::Join" : [ "", [ "arn:aws:s3:::",  { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ConfigurationsBucket" }}, "/", { "Ref" : "SharedConfigurationFolder" }, "/*" ]]},
              { "Fn::Join" : [ "", [ "arn:aws:s3:::",  { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ConfigurationsBucket" }}, "/", { "Ref" : "ConfigurationFolder" }, "/*" ]]}
            ]
          }]
        },
        "Roles" : [{ "Ref" : "Role" }]
      }
    },

    "LogMonitoringPolicy" : {
      "Type" : "AWS::IAM::Policy",
      "Properties" : {
        "PolicyName" : "LogMonitoringPolicy",
        "PolicyDocument" : {
          "Version" : "2012-10-17",
          "Statement" : [{
            "Effect" : "Allow",
            "Action" : [
              "logs:CreateLogGroup",
              "logs:CreateLogStream",
              "logs:PutLogEvents",
              "logs:DescribeLogStreams"
            ],
            "Resource" : "arn:aws:logs:*:*:*"
          }]
        },
        "Roles" : [{ "Ref" : "Role" }]
      },
      "Condition" : "ConfigureLogs"
    },

    "LogGroup" : {
      "Type" : "AWS::Logs::LogGroup",
      "Properties" : {
        "RetentionInDays" : { "Ref" : "LogRetention" }
      },
      "Condition" : "ConfigureLogs"
    },

    "DomainMemberSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : { "Fn::Join" : [ "-", [ { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }}, { "Ref" : "UtilityName" }, "DomainMemberSecurityGroup" ]]},
        "VpcId" : { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPC" }},
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }}, { "Ref" : "UtilityName" }, "DomainMemberSecurityGroup" ]]}}
        ]
      }
    },

    "DomainControllerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : { "Fn::Join" : [ "-", [ { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }}, { "Ref" : "UtilityName" }, "DomainControllerSecurityGroup" ]]},
        "VpcId" : { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPC" }},
        "SecurityGroupIngress" : [
          { "IpProtocol" : "icmp", "FromPort" :     "0", "ToPort" :     "0", "CidrIp" : "0.0.0.0/0" },
          { "IpProtocol" : "icmp", "FromPort" :     "3", "ToPort" :     "3", "CidrIp" : "0.0.0.0/0" },
          { "IpProtocol" : "icmp", "FromPort" :     "8", "ToPort" :     "8", "CidrIp" : "0.0.0.0/0" },
          { "IpProtocol" : "icmp", "FromPort" :    "11", "ToPort" :    "11", "CidrIp" : "0.0.0.0/0" },
          { "IpProtocol" : "tcp",  "FromPort" :    "53", "ToPort" :    "53", "CidrIp" : "0.0.0.0/0" },
          { "IpProtocol" : "udp",  "FromPort" :    "53", "ToPort" :    "53", "CidrIp" : "0.0.0.0/0" },
          { "Fn::If" : [ "ConfigureAdministratorNetwork0", { "IpProtocol" : "tcp",  "FromPort" :  "3389", "ToPort" :  "3389", "CidrIp" : { "Fn::Select" : [ "0", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureAdministratorNetwork1", { "IpProtocol" : "tcp",  "FromPort" :  "3389", "ToPort" :  "3389", "CidrIp" : { "Fn::Select" : [ "1", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureAdministratorNetwork2", { "IpProtocol" : "tcp",  "FromPort" :  "3389", "ToPort" :  "3389", "CidrIp" : { "Fn::Select" : [ "2", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureAdministratorNetwork3", { "IpProtocol" : "tcp",  "FromPort" :  "3389", "ToPort" :  "3389", "CidrIp" : { "Fn::Select" : [ "3", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureAdministratorNetwork4", { "IpProtocol" : "tcp",  "FromPort" :  "3389", "ToPort" :  "3389", "CidrIp" : { "Fn::Select" : [ "4", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureAdministratorNetwork5", { "IpProtocol" : "tcp",  "FromPort" :  "3389", "ToPort" :  "3389", "CidrIp" : { "Fn::Select" : [ "5", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureAdministratorNetwork6", { "IpProtocol" : "tcp",  "FromPort" :  "3389", "ToPort" :  "3389", "CidrIp" : { "Fn::Select" : [ "6", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureAdministratorNetwork7", { "IpProtocol" : "tcp",  "FromPort" :  "3389", "ToPort" :  "3389", "CidrIp" : { "Fn::Select" : [ "7", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "IpProtocol" : "tcp",  "FromPort" :    "80", "ToPort" :    "80", "SourceSecurityGroupId" : { "Ref" : "DomainMemberSecurityGroup" }},
          { "IpProtocol" : "tcp",  "FromPort" :    "88", "ToPort" :    "88", "SourceSecurityGroupId" : { "Ref" : "DomainMemberSecurityGroup" }},
          { "IpProtocol" : "udp",  "FromPort" :    "88", "ToPort" :    "88", "SourceSecurityGroupId" : { "Ref" : "DomainMemberSecurityGroup" }},
          { "IpProtocol" : "udp",  "FromPort" :   "123", "ToPort" :   "123", "SourceSecurityGroupId" : { "Ref" : "DomainMemberSecurityGroup" }},
          { "IpProtocol" : "tcp",  "FromPort" :   "135", "ToPort" :   "135", "SourceSecurityGroupId" : { "Ref" : "DomainMemberSecurityGroup" }},
          { "IpProtocol" : "udp",  "FromPort" :   "138", "ToPort" :   "138", "SourceSecurityGroupId" : { "Ref" : "DomainMemberSecurityGroup" }},
          { "IpProtocol" : "tcp",  "FromPort" :   "389", "ToPort" :   "389", "SourceSecurityGroupId" : { "Ref" : "DomainMemberSecurityGroup" }},
          { "IpProtocol" : "udp",  "FromPort" :   "389", "ToPort" :   "389", "SourceSecurityGroupId" : { "Ref" : "DomainMemberSecurityGroup" }},
          { "IpProtocol" : "tcp",  "FromPort" :   "443", "ToPort" :   "443", "SourceSecurityGroupId" : { "Ref" : "DomainMemberSecurityGroup" }},
          { "IpProtocol" : "tcp",  "FromPort" :   "445", "ToPort" :   "445", "SourceSecurityGroupId" : { "Ref" : "DomainMemberSecurityGroup" }},
          { "IpProtocol" : "udp",  "FromPort" :   "445", "ToPort" :   "445", "SourceSecurityGroupId" : { "Ref" : "DomainMemberSecurityGroup" }},
          { "IpProtocol" : "udp",  "FromPort" :   "464", "ToPort" :   "464", "SourceSecurityGroupId" : { "Ref" : "DomainMemberSecurityGroup" }},
          { "IpProtocol" : "tcp",  "FromPort" :   "464", "ToPort" :   "464", "SourceSecurityGroupId" : { "Ref" : "DomainMemberSecurityGroup" }},
          { "IpProtocol" : "tcp",  "FromPort" :   "636", "ToPort" :   "636", "SourceSecurityGroupId" : { "Ref" : "DomainMemberSecurityGroup" }},
          { "IpProtocol" : "tcp",  "FromPort" :  "3268", "ToPort" :  "3268", "SourceSecurityGroupId" : { "Ref" : "DomainMemberSecurityGroup" }},
          { "IpProtocol" : "tcp",  "FromPort" :  "3269", "ToPort" :  "3269", "SourceSecurityGroupId" : { "Ref" : "DomainMemberSecurityGroup" }},
          { "IpProtocol" : "tcp",  "FromPort" :  "9389", "ToPort" :  "9389", "SourceSecurityGroupId" : { "Ref" : "DomainMemberSecurityGroup" }},
          { "IpProtocol" : "tcp",  "FromPort" : "49152", "ToPort" : "65535", "SourceSecurityGroupId" : { "Ref" : "DomainMemberSecurityGroup" }},
          { "IpProtocol" : "udp",  "FromPort" : "49152", "ToPort" : "65535", "SourceSecurityGroupId" : { "Ref" : "DomainMemberSecurityGroup" }}
        ],
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "DomainControllerSecurityGroup" ]]}}
        ]
      }
    },

    "DomainControllerSecurityGroupIngress88u" : {
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : { "Ref" : "DomainControllerSecurityGroup" }, "IpProtocol" : "udp", "FromPort" :    "88", "ToPort" :    "88", "SourceSecurityGroupId": { "Ref": "DomainControllerSecurityGroup" }
      }
    },

    "DomainControllerSecurityGroupIngress88t" : {
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : { "Ref" : "DomainControllerSecurityGroup" }, "IpProtocol" : "tcp", "FromPort" :    "88", "ToPort" :    "88", "SourceSecurityGroupId": { "Ref": "DomainControllerSecurityGroup" }
      }
    },

    "DomainControllerSecurityGroupIngress123" : {
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : { "Ref" : "DomainControllerSecurityGroup" }, "IpProtocol" : "udp", "FromPort" :   "123", "ToPort":   "123", "SourceSecurityGroupId": { "Ref": "DomainControllerSecurityGroup" }
      }
    },

    "DomainControllerSecurityGroupIngress135" : {
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : { "Ref" : "DomainControllerSecurityGroup" }, "IpProtocol" : "tcp", "FromPort" :   "135", "ToPort" :   "135", "SourceSecurityGroupId": { "Ref": "DomainControllerSecurityGroup" }
      }
    },

    "DomainControllerSecurityGroupIngress137" : {
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : { "Ref" : "DomainControllerSecurityGroup" }, "IpProtocol" : "udp", "FromPort" :   "137", "ToPort" :   "137", "SourceSecurityGroupId": { "Ref": "DomainControllerSecurityGroup" }
      }
    },

    "DomainControllerSecurityGroupIngress138" : {
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : { "Ref" : "DomainControllerSecurityGroup" }, "IpProtocol" : "udp", "FromPort" :   "138", "ToPort" :   "138", "SourceSecurityGroupId": { "Ref": "DomainControllerSecurityGroup" }
      }
    },

    "DomainControllerSecurityGroupIngress139" : {
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : { "Ref" : "DomainControllerSecurityGroup" }, "IpProtocol" : "tcp", "FromPort" :   "139", "ToPort" :   "139", "SourceSecurityGroupId": { "Ref": "DomainControllerSecurityGroup" }
      }
    },

    "DomainControllerSecurityGroupIngress389t" : {
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : { "Ref" : "DomainControllerSecurityGroup" }, "IpProtocol" : "tcp", "FromPort" :   "389", "ToPort" :   "389", "SourceSecurityGroupId": { "Ref": "DomainControllerSecurityGroup" }
      }
    },

    "DomainControllerSecurityGroupIngress389u" : {
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : { "Ref" : "DomainControllerSecurityGroup" }, "IpProtocol" : "udp", "FromPort" :   "389", "ToPort" :   "389", "SourceSecurityGroupId": { "Ref": "DomainControllerSecurityGroup" }
      }
    },

    "DomainControllerSecurityGroupIngress445t" : {
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : { "Ref" : "DomainControllerSecurityGroup" }, "IpProtocol" : "tcp", "FromPort" :   "445", "ToPort" :   "445", "SourceSecurityGroupId": { "Ref": "DomainControllerSecurityGroup" }
      }
    },

    "DomainControllerSecurityGroupIngress445u" : {
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : { "Ref" : "DomainControllerSecurityGroup" }, "IpProtocol" : "udp", "FromPort" :   "445", "ToPort" :   "445", "SourceSecurityGroupId": { "Ref": "DomainControllerSecurityGroup" }
      }
    },

    "DomainControllerSecurityGroupIngress464t" : {
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : { "Ref" : "DomainControllerSecurityGroup" }, "IpProtocol" : "tcp", "FromPort" :   "464", "ToPort" :   "464", "SourceSecurityGroupId": { "Ref": "DomainControllerSecurityGroup" }
      }
    },

    "DomainControllerSecurityGroupIngress464u" : {
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : { "Ref" : "DomainControllerSecurityGroup" }, "IpProtocol" : "udp", "FromPort" :   "464", "ToPort" :   "464", "SourceSecurityGroupId": { "Ref": "DomainControllerSecurityGroup" }
      }
    },

    "DomainControllerSecurityGroupIngress636" : {
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : { "Ref" : "DomainControllerSecurityGroup" }, "IpProtocol" : "tcp", "FromPort" :   "636", "ToPort" :   "636", "SourceSecurityGroupId": { "Ref": "DomainControllerSecurityGroup" }
      }
    },

    "DomainControllerSecurityGroupIngress3268" : {
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : { "Ref" : "DomainControllerSecurityGroup" }, "IpProtocol" : "tcp", "FromPort" :  "3268", "ToPort" :  "3268", "SourceSecurityGroupId": { "Ref": "DomainControllerSecurityGroup" }
      }
    },

    "DomainControllerSecurityGroupIngress3269" : {
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : { "Ref" : "DomainControllerSecurityGroup" }, "IpProtocol" : "tcp", "FromPort" :  "3269", "ToPort" :  "3269", "SourceSecurityGroupId": { "Ref": "DomainControllerSecurityGroup" }
      }
    },

    "DomainControllerSecurityGroupIngress5985" : {
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : { "Ref" : "DomainControllerSecurityGroup" }, "IpProtocol" : "tcp", "FromPort" :  "5985", "ToPort" :  "5985", "SourceSecurityGroupId": { "Ref": "DomainControllerSecurityGroup" }
      }
    },

    "DomainControllerSecurityGroupIngress9389" : {
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : { "Ref" : "DomainControllerSecurityGroup" }, "IpProtocol" : "tcp", "FromPort" :  "9389", "ToPort" :  "9389", "SourceSecurityGroupId": { "Ref": "DomainControllerSecurityGroup" }
      }
    },

    "DomainControllerSecurityGroupIngress49152t" : {
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : { "Ref" : "DomainControllerSecurityGroup" }, "IpProtocol" : "tcp", "FromPort" : "49152", "ToPort" : "65535", "SourceSecurityGroupId": { "Ref": "DomainControllerSecurityGroup" }
      }
    },

    "DomainControllerSecurityGroupIngress49152u" : {
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : { "Ref" : "DomainControllerSecurityGroup" }, "IpProtocol" : "udp", "FromPort" : "49152", "ToPort" : "65535", "SourceSecurityGroupId": { "Ref": "DomainControllerSecurityGroup" }
      }
    },

    "GetHostName" : {
      "Type" : "Custom::GetHostName",
      "Properties" : {
        "ServiceToken" : { "Fn::ImportValue" : { "Fn::Sub" : "${CustomIdentifierFunctionsStackName}-GetHostNameFunctionArn" }},
        "CompanyName" : { "Ref" : "CompanyName" },
        "LocationName" : { "Ref": "AWS::Region" },
        "EnvironmentName" : { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }},
        "ApplicationName" : { "Ref" : "UtilityName" },
        "ComponentName" : "DomainController"
      }
    },

    "GetWindowsImageId" : {
      "Type" : "Custom::GetWindowsImageId",
      "Properties" : {
        "ServiceToken" : { "Fn::ImportValue" : { "Fn::Sub" : "${StandardAMIFunctionsStackName}-GetWindowsImageIdFunctionArn" }},
        "Region" : { "Ref" : "AWS::Region" },
        "OSName" : { "Ref" : "OSName" },
        "OSDate" : { "Ref" : "OSDate" }
      }
    },

    "InstanceProfile" : {
      "Type" : "AWS::IAM::InstanceProfile",
      "Properties" : {
        "Path" : "/",
        "Roles" : [{ "Ref" : "Role" }]
      }
    },

    "AddressCalculatorA" : {
      "Type" : "Custom::AddressCalculator",
      "Properties" : {
        "ServiceToken" : { "Fn::ImportValue" : { "Fn::Sub" : "${StandardCIDRFunctionsStackName}-AddressCalculatorFunctionArn" }},
        "SubnetId" : { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-IdentitySubnetA" }}
      },
      "Condition" : "ConfigureStaticAddress"
    },

    "DomainControllerA" : {
      "Type" : "AWS::EC2::Instance",
      "Metadata" : {
        "AWS::CloudFormation::Authentication" : {
          "S3Credentials" : {
            "type" : "S3",
            "roleName" : { "Ref" : "Role" },
            "buckets" : [
              { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ScriptsBucket" }}
            ]
          }
        },
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "All" : [
              { "Fn::If" : [ "ConfigureLogs", "ConfigureLogs", { "Ref": "AWS::NoValue" }]},
              "ConfigureCFN",
              "ConfigureOS",
              "ConfigureStaticPrivateAddress",
              "ConfigureHostName",
              "InstallADDS",
              "InstallADDSForest",
              "ConfigureEnterpriseAdmin",
              "ConfigureADSites",
              "InstallADCS",
              "SignalCFN"
            ]
          },
          "ConfigureLogs" : {
            "files" : {
              "C:\\Program Files\\Amazon\\SSM\\Plugins\\awsCloudWatch\\AWS.EC2.Windows.CloudWatch.json" : {
                "content" : { "Fn::Join" : [ "\n", [
                  "{",
                  "  \"IsEnabled\" : true,",
                  "  \"EngineConfiguration\" : {",
                  "    \"PollInterval\" : \"00:00:10\",",
                  "    \"Components\" : [{",
                  "      \"Id\" : \"ApplicationEventLog\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.EventLog.EventLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"LogName\" : \"Application\",",
                  "        \"Levels\" : \"7\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"SystemEventLog\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.EventLog.EventLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"LogName\" : \"System\",",
                  "        \"Levels\" : \"7\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"SecurityEventLog\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.EventLog.EventLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"LogName\" : \"Security\",",
                  "        \"Levels\" : \"7\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"EC2ConfigLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"LogDirectoryPath\": \"C:\\\\Program Files\\\\Amazon\\\\Ec2ConfigService\\\\Logs\",",
                  "        \"TimestampFormat\": \"yyyy-MM-ddTHH:mm:ss.fffZ:\",",
                  "        \"Encoding\": \"ASCII\",",
                  "        \"Filter\": \"EC2ConfigLog.txt\",",
                  "        \"CultureName\": \"en-US\",",
                  "        \"TimeZoneKind\": \"UTC\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CfnInitLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"LogDirectoryPath\": \"C:\\\\cfn\\\\log\",",
                  "        \"TimestampFormat\": \"yyyy-MM-dd HH:mm:ss,fff\",",
                  "        \"Encoding\": \"ASCII\",",
                  "        \"Filter\": \"cfn-init.log\",",
                  "        \"CultureName\": \"en-US\",",
                  "        \"TimeZoneKind\": \"Local\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"IISLogs\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"LogDirectoryPath\" : \"C:\\\\inetpub\\\\logs\\\\LogFiles\\\\W3SVC1\",",
                  "        \"TimestampFormat\" : \"yyyy-MM-dd HH:mm:ss\",",
                  "        \"Encoding\" : \"UTF-8\",",
                  "        \"Filter\" : \"\",",
                  "        \"CultureName\" : \"en-US\",",
                  "        \"TimeZoneKind\" : \"UTC\",",
                  "        \"LineCount\" : \"3\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"MemoryPerformanceCounter\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.PerformanceCounterComponent.PerformanceCounterInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"CategoryName\" : \"Memory\",",
                  "        \"CounterName\" : \"Available MBytes\",",
                  "        \"InstanceName\" : \"\",",
                  "        \"MetricName\" : \"Memory\",",
                  "        \"Unit\" : \"Megabytes\",",
                  "        \"DimensionName\" : \"\",",
                  "        \"DimensionValue\" : \"\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchApplicationEventLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"DomainControllerA/{instance_id}/ApplicationEventLog\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchSystemEventLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"DomainControllerA/{instance_id}/SystemEventLog\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchSecurityEventLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"DomainControllerA/{instance_id}/SecurityEventLog\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchEC2ConfigLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"DomainControllerA/{instance_id}/EC2ConfigLog\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchCfnInitLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"DomainControllerA/{instance_id}/CfnInitLog\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchIISLogs\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"DomainControllerA/{instance_id}/IISLogs\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"CloudWatch\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.CloudWatch.CloudWatchOutputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"AccessKey\" : \"\",",
                  "        \"SecretKey\" : \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                  "        \"NameSpace\" : \"Windows/Default\"",
                  "      }",
                  "    }],",
                  "    \"Flows\": {",
                  "      \"Flows\": [",
                  "        \"ApplicationEventLog,CloudWatchApplicationEventLog\",",
                  "        \"SystemEventLog,CloudWatchSystemEventLog\",",
                  "        \"SecurityEventLog,CloudWatchSecurityEventLog\",",
                  "        \"EC2ConfigLog,CloudWatchEC2ConfigLog\",",
                  "        \"CfnInitLog,CloudWatchCfnInitLog\",",
                  "        \"IISLogs,CloudWatchIISLogs\",",
                  "        \"MemoryPerformanceCounter,CloudWatch\"",
                  "      ]",
                  "    }",
                  "  }",
                  "}"
                ]]}
              }
            },
            "commands" : {
              "01-enable-SSM" : {
                "command" : "powershell.exe -Command \"Set-Service -Name AmazonSSMAgent -StartupType Automatic\"",
                "waitAfterCompletion" : "0"
              },
              "02-restart-SSM" : {
                "command" : "powershell.exe -Command \"Restart-Service AmazonSSMAgent\"",
                "waitAfterCompletion" : "30"
              }
            }
          },
          "ConfigureCFN" : {
            "files" : {
              "c:\\cfn\\cfn-hup.conf" : {
                "content" : { "Fn::Join" : [ "\n", [
                  "[main]",
                  { "Fn::Sub" : "stack=${AWS::StackId}" },
                  { "Fn::Sub" : "region=${AWS::Region}" }
                  ]]}
              },
              "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf" : {
                "content": { "Fn::Join" : [ "\n", [
                  "[cfn-auto-reloader-hook]",
                  "triggers=post.update",
                  "path=Resources.DomainControllerA.Metadata.AWS::CloudFormation::Init",
                  { "Fn::Sub" : "action=cfn-init.exe --verbose --configsets All --stack ${AWS::StackId} --resource DomainControllerA --region ${AWS::Region}" }
                ]]}
              }
            },
            "services" : {
              "windows" : {
                "cfn-hup" : {
                  "enabled" : "true",
                  "ensureRunning" : "true",
                  "files" : [
                    "c:\\cfn\\cfn-hup.conf",
                    "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                  ]
                }
              }
            }
          },
          "ConfigureOS" : {
            "commands" : {
              "01-disable-windows-firewall" : {
                "command" : "powershell.exe -Command \"Get-NetFirewallProfile | Set-NetFirewallProfile -Enabled False\"",
                "waitAfterCompletion" : "0"
              },
              "02-set-execution-policy" : {
                "command" : "powershell.exe -Command \"Set-ExecutionPolicy RemoteSigned -Force\"",
                "waitAfterCompletion" : "0"
              }
            }
          },
          "ConfigureStaticPrivateAddress" : {
            "files" : {
              "c:\\cfn\\scripts\\Configure-StaticPrivateAddress.ps1" : {
                "source" : { "Fn::Join" : [ "", [
                  "https://", { "Fn::If" : [ "ConfigureGlobalS3", "s3", { "Fn::Sub" : "s3-${AWS::Region}" }]}, ".amazonaws.com/",
                  { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ScriptsBucket" }}, "/", { "Ref" : "SharedScriptFolder" }, "/Configure-StaticPrivateAddress.ps1"
                ]]},
                "authentication" : "S3Credentials"
              }
            },
            "commands" : {
              "01-configure-static-address" : {
                "command" : "powershell.exe -ExecutionPolicy RemoteSigned -Command c:\\cfn\\scripts\\Configure-StaticPrivateAddress.ps1",
                "waitAfterCompletion" : "45"
              }
            }
          },
          "ConfigureHostName" : {
            "commands" : {
              "01-configure-hostname" : {
                "command" : { "Fn::Sub" : "powershell.exe Rename-Computer -NewName ${GetHostName.HostName}01a -Restart" },
                "waitAfterCompletion" : "forever"
              }
            }
          },
          "InstallADDS" : {
            "commands" : {
              "01-install-ad-domain-services" : {
                "command" : "powershell.exe -Command \"Install-WindowsFeature AD-Domain-Services, rsat-adds -IncludeAllSubFeature\"",
                "waitAfterCompletion" : "0"
              }
            }
          },
          "InstallADDSForest" : {
            "commands" : {
              "01-install-addsforest" : {
                "command" : { "Fn::Join" : [ "", [
                  "powershell.exe -Command \"Install-ADDSForest -ForestMode Win2012R2 -DomainMode Win2012R2 -Confirm:$false -Force",
                  " -DomainName ", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCPrivateDomain" }},
                  " -DomainNetbiosName ", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCNetBIOSDomain" }},
                  " -SafeModeAdministratorPassword (ConvertTo-SecureString '", { "Ref" : "DomainAdminPassword" }, "' -AsPlainText -Force)\""
                ]]},
                "waitAfterCompletion" : "forever"
              },
              "02-restart-netlogon-service" : {
                "command" : "powershell.exe -Command Restart-Service NetLogon -EA 0",
                "waitAfterCompletion" : "180"
              }
            }
          },
          "ConfigureEnterpriseAdmin" : {
            "files" : {
              "c:\\cfn\\scripts\\ConvertTo-EnterpriseAdmin.ps1" : {
                "source" : { "Fn::Join" : [ "", [
                  "https://", { "Fn::If" : [ "ConfigureGlobalS3", "s3", { "Fn::Sub" : "s3-${AWS::Region}" }]}, ".amazonaws.com/",
                  { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ScriptsBucket" }}, "/", { "Ref" : "ScriptFolder" }, "/ConvertTo-EnterpriseAdmin.ps1"
                ]]},
                "authentication" : "S3Credentials"
              }
            },
            "commands" : {
              "01-create-aduser" : {
                "command" : { "Fn::Join" : ["", [
                  "powershell.exe -Command \"New-ADUser -Enabled $true",
                  " -Name ", { "Ref" : "DomainAdminUser" },
                  " -UserPrincipalName ", { "Ref" : "DomainAdminUser" }, "@", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCPrivateDomain" }},
                  " -AccountPassword (ConvertTo-SecureString '", { "Ref" : "DomainAdminPassword" }, "' -AsPlainText -Force) -PasswordNeverExpires $true\""
                ]]},
                "waitAfterCompletion" : "0"
              },
              "02-convert-aduser-to-enterpriseadmin" : {
                "command" : { "Fn::Sub" : "powershell.exe -ExecutionPolicy RemoteSigned -Command c:\\cfn\\scripts\\ConvertTo-EnterpriseAdmin.ps1 -Members ${DomainAdminUser}" },
                "waitAfterCompletion" : "0"
              }
            }
          },
          "ConfigureADSites" : {
            "files" : {
              "c:\\cfn\\scripts\\Configure-SitesAndSubnets.ps1" : {
                "source" : { "Fn::Join" : [ "", [
                  "https://", { "Fn::If" : [ "ConfigureGlobalS3", "s3", { "Fn::Sub" : "s3-${AWS::Region}" }]}, ".amazonaws.com/",
                  { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ScriptsBucket" }}, "/", { "Ref" : "ScriptFolder" }, "/Configure-SitesAndSubnets.ps1"
                ]]},
                "authentication" : "S3Credentials"
              }
            },
            "commands" : {
              "01-configure-sitesandsubnets" : {
                "command" : { "Fn::Join" : [ "", [
                  "powershell.exe -ExecutionPolicy RemoteSigned -Command c:\\cfn\\scripts\\Configure-SitesAndSubnets.ps1",
                  " -VpcId ", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPC" }},
                  " -ZoneA ", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-ZoneA" }},
                  " -ZoneB ", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-ZoneB" }},
                  { "Fn::If" : [ "ConfigureMultiZone" , " -MultiZone", { "Ref" : "AWS::NoValue" }]}
                  ]]},
                "waitAfterCompletion" : "0"
              }
            }
          },
          "InstallADCS" : {
            "files" : {
              "c:\\cfn\\scripts\\Unzip-Archive.ps1" : {
                "source" : { "Fn::Join" : [ "", [
                  "https://", { "Fn::If" : [ "ConfigureGlobalS3", "s3", { "Fn::Sub" : "s3-${AWS::Region}" }]}, ".amazonaws.com/",
                  { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ScriptsBucket" }}, "/", { "Ref" : "SharedScriptFolder" }, "/Unzip-Archive.ps1"
                ]]},
                "authentication" : "S3Credentials"
              },
              "c:\\cfn\\modules\\xAdcsDeployment_0.1.0.0.zip" : {
                "source" : { "Fn::Join" : [ "", [
                  "https://", { "Fn::If" : [ "ConfigureGlobalS3", "s3", { "Fn::Sub" : "s3-${AWS::Region}" }]}, ".amazonaws.com/",
                  { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ScriptsBucket" }}, "/", { "Ref" : "ScriptFolder" }, "/xAdcsDeployment_0.1.0.0.zip"
                ]]},
                "authentication" : "S3Credentials"
              },
              "c:\\cfn\\scripts\\New-CertificateAuthority.ps1" : {
                "source" : { "Fn::Join" : [ "", [
                  "https://", { "Fn::If" : [ "ConfigureGlobalS3", "s3", { "Fn::Sub" : "s3-${AWS::Region}" }]}, ".amazonaws.com/",
                  { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ScriptsBucket" }}, "/", { "Ref" : "ScriptFolder" }, "/New-CertificateAuthority.ps1"
                ]]},
                "authentication" : "S3Credentials"
              }
            },
            "commands" : {
              "01-install-adcsdeployment-module" : {
                "command" : { "Fn::Join" : [ "", [
                  "powershell.exe -command c:\\cfn\\scripts\\Unzip-Archive.ps1",
                  " -Source c:\\cfn\\modules\\xAdcsDeployment_0.1.0.0.zip",
                  " -Destination 'C:\\Program Files\\WindowsPowerShell\\Modules'"
                ]]},
                "waitAfterCompletion" : "0"
              },
              "02-install-certificate-authority" : {
                "command" : { "Fn::Join" : [ "", [
                  "powershell.exe -Command c:\\cfn\\scripts\\New-CertificateAuthority.ps1",
                  " -Username ", { "Ref" : "DomainAdminUser" },
                  " -Password '", { "Ref" : "DomainAdminPassword" }, "'",
                  " -DomainDNSName ", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCPrivateDomain" }}
                ]]},
                "waitAfterCompletion" : "0"
              }
            }
          },
          "SignalCFN" : {
            "commands" : {
              "01-signal-success" : {
                "command" : { "Fn::Sub" : "cfn-signal.exe --exit-code 0 \"${DomainControllerAWaitHandle}\"" }
              }
            }
          }
        }
      },
      "Properties" : {
        "ImageId" : { "Fn::If" : [ "GetImageID", { "Fn::GetAtt" : [ "GetWindowsImageId", "ImageId" ]},
                                                 { "Fn::FindInMap" : [ "ImageIdMap", { "Ref" : "AWS::Region" }, { "Ref" : "OSDate" }]}]},
        "InstanceType" : { "Fn::FindInMap" : [ "InstanceTypeMap", "DomainController", { "Ref" : "EnvironmentType" }]},
        "IamInstanceProfile" : { "Ref" : "InstanceProfile" },
        "KeyName" : { "Ref" : "KeyName" },
        "SecurityGroupIds" : [
          { "Ref" : "DomainControllerSecurityGroup" }
        ],
        "SubnetId" : { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-IdentitySubnetA" }},
        "PrivateIpAddress" : { "Fn::If" : [ "ConfigureStaticAddress", { "Fn::GetAtt" : [ "AddressCalculatorA", "Address4" ]}, { "Ref" : "AWS::NoValue" }]},
        "BlockDeviceMappings" : [{
          "DeviceName" : "/dev/sda1",
          "Ebs" : {
            "VolumeSize" : "100",
            "VolumeType" : "gp2"
          }
        }],
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }}, { "Ref" : "UtilityName" }, "DomainControllerA" ]]}},
          { "Key" : "HostName", "Value" : { "Fn::Sub" : "${GetHostName.HostName}01a" }}
        ],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : [ "\n", [
          "<script>",
          { "Fn::Sub" : "cfn-init.exe --verbose --configsets All --stack ${AWS::StackId} --resource DomainControllerA --region ${AWS::Region}" },
          "</script>"
        ]]}}
      }
    },

    "DomainControllerAWaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "Properties" : {
        "Handle" : { "Ref" : "DomainControllerAWaitHandle" },
        "Timeout" : "3600"
      },
      "DependsOn" : "DomainControllerA"
    },

    "DomainControllerAWaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },

    "AddressCalculatorB" : {
      "Type" : "Custom::AddressCalculator",
      "Properties" : {
        "ServiceToken" : { "Fn::ImportValue" : { "Fn::Sub" : "${StandardCIDRFunctionsStackName}-AddressCalculatorFunctionArn" }},
        "SubnetId" : { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-IdentitySubnetB" }}
      },
      "Condition" : "ConfigureStaticAddress&MultiZone"
    },

    "DomainControllerB" : {
      "Type" : "AWS::EC2::Instance",
      "Metadata" : {
        "AWS::CloudFormation::Authentication" : {
          "S3Credentials" : {
            "type" : "S3",
            "roleName" : { "Ref" : "Role" },
            "buckets" : [
              { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ScriptsBucket" }}
            ]
          }
        },
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "All" : [
              { "Fn::If" : [ "ConfigureLogs", "ConfigureLogs", { "Ref": "AWS::NoValue" }]},
              "ConfigureCFN",
              "ConfigureOS",
              "ConfigureStaticPrivateAddress",
              "ConfigureHostName",
              "JoinDomain",
              "InstallADDS",
              "InstallADDSDomainController",
              "InstallADCS",
              "UpdateDNSServers",
              "SignalCFN"
            ]
          },
          "ConfigureLogs" : {
            "files" : {
              "C:\\Program Files\\Amazon\\SSM\\Plugins\\awsCloudWatch\\AWS.EC2.Windows.CloudWatch.json" : {
                "content" : { "Fn::Join" : [ "\n", [
                  "{",
                  "  \"IsEnabled\" : true,",
                  "  \"EngineConfiguration\" : {",
                  "    \"PollInterval\" : \"00:00:10\",",
                  "    \"Components\" : [{",
                  "      \"Id\" : \"ApplicationEventLog\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.EventLog.EventLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"LogName\" : \"Application\",",
                  "        \"Levels\" : \"7\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"SystemEventLog\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.EventLog.EventLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"LogName\" : \"System\",",
                  "        \"Levels\" : \"7\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"SecurityEventLog\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.EventLog.EventLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"LogName\" : \"Security\",",
                  "        \"Levels\" : \"7\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"EC2ConfigLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"LogDirectoryPath\": \"C:\\\\Program Files\\\\Amazon\\\\Ec2ConfigService\\\\Logs\",",
                  "        \"TimestampFormat\": \"yyyy-MM-ddTHH:mm:ss.fffZ:\",",
                  "        \"Encoding\": \"ASCII\",",
                  "        \"Filter\": \"EC2ConfigLog.txt\",",
                  "        \"CultureName\": \"en-US\",",
                  "        \"TimeZoneKind\": \"UTC\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CfnInitLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"LogDirectoryPath\": \"C:\\\\cfn\\\\log\",",
                  "        \"TimestampFormat\": \"yyyy-MM-dd HH:mm:ss,fff\",",
                  "        \"Encoding\": \"ASCII\",",
                  "        \"Filter\": \"cfn-init.log\",",
                  "        \"CultureName\": \"en-US\",",
                  "        \"TimeZoneKind\": \"Local\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"IISLogs\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"LogDirectoryPath\" : \"C:\\\\inetpub\\\\logs\\\\LogFiles\\\\W3SVC1\",",
                  "        \"TimestampFormat\" : \"yyyy-MM-dd HH:mm:ss\",",
                  "        \"Encoding\" : \"UTF-8\",",
                  "        \"Filter\" : \"\",",
                  "        \"CultureName\" : \"en-US\",",
                  "        \"TimeZoneKind\" : \"UTC\",",
                  "        \"LineCount\" : \"3\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"MemoryPerformanceCounter\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.PerformanceCounterComponent.PerformanceCounterInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"CategoryName\" : \"Memory\",",
                  "        \"CounterName\" : \"Available MBytes\",",
                  "        \"InstanceName\" : \"\",",
                  "        \"MetricName\" : \"Memory\",",
                  "        \"Unit\" : \"Megabytes\",",
                  "        \"DimensionName\" : \"\",",
                  "        \"DimensionValue\" : \"\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchApplicationEventLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"DomainControllerB/{instance_id}/ApplicationEventLog\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchSystemEventLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"DomainControllerB/{instance_id}/SystemEventLog\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchSecurityEventLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"DomainControllerB/{instance_id}/SecurityEventLog\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchEC2ConfigLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"DomainControllerB/{instance_id}/EC2ConfigLog\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchCfnInitLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"DomainControllerB/{instance_id}/CfnInitLog\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchIISLogs\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"DomainControllerB/{instance_id}/IISLogs\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"CloudWatch\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.CloudWatch.CloudWatchOutputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"AccessKey\" : \"\",",
                  "        \"SecretKey\" : \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                  "        \"NameSpace\" : \"Windows/Default\"",
                  "      }",
                  "    }],",
                  "    \"Flows\": {",
                  "      \"Flows\": [",
                  "        \"ApplicationEventLog,CloudWatchApplicationEventLog\",",
                  "        \"SystemEventLog,CloudWatchSystemEventLog\",",
                  "        \"SecurityEventLog,CloudWatchSecurityEventLog\",",
                  "        \"EC2ConfigLog,CloudWatchEC2ConfigLog\",",
                  "        \"CfnInitLog,CloudWatchCfnInitLog\",",
                  "        \"IISLogs,CloudWatchIISLogs\",",
                  "        \"MemoryPerformanceCounter,CloudWatch\"",
                  "      ]",
                  "    }",
                  "  }",
                  "}"
                ]]}
              }
            },
            "commands" : {
              "01-enable-SSM" : {
                "command" : "powershell.exe -Command \"Set-Service -Name AmazonSSMAgent -StartupType Automatic\"",
                "waitAfterCompletion" : "0"
              },
              "02-restart-SSM" : {
                "command" : "powershell.exe -Command \"Restart-Service AmazonSSMAgent\"",
                "waitAfterCompletion" : "30"
              }
            }
          },
          "ConfigureCFN" : {
            "files" : {
              "c:\\cfn\\cfn-hup.conf" : {
                "content" : { "Fn::Join" : [ "\n", [
                  "[main]",
                  { "Fn::Sub" : "stack=${AWS::StackId}" },
                  { "Fn::Sub" : "region=${AWS::Region}" }
                  ]]}
              },
              "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf" : {
                "content": { "Fn::Join" : [ "\n", [
                  "[cfn-auto-reloader-hook]",
                  "triggers=post.update",
                  "path=Resources.DomainControllerB.Metadata.AWS::CloudFormation::Init",
                  { "Fn::Sub" : "action=cfn-init.exe --verbose --configsets All --stack ${AWS::StackId} --resource DomainControllerB --region ${AWS::Region}" }
                ]]}
              }
            },
            "services" : {
              "windows" : {
                "cfn-hup" : {
                  "enabled" : "true",
                  "ensureRunning" : "true",
                  "files" : [
                    "c:\\cfn\\cfn-hup.conf",
                    "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                  ]
                }
              }
            }
          },
          "ConfigureOS" : {
            "commands" : {
              "01-disable-windows-firewall" : {
                "command" : "powershell.exe -Command \"Get-NetFirewallProfile | Set-NetFirewallProfile -Enabled False\"",
                "waitAfterCompletion" : "0"
              },
              "02-set-execution-policy" : {
                "command" : "powershell.exe -Command \"Set-ExecutionPolicy RemoteSigned -Force\"",
                "waitAfterCompletion" : "0"
              }
            }
          },
          "ConfigureStaticPrivateAddress" : {
            "files" : {
              "c:\\cfn\\scripts\\Configure-StaticPrivateAddress.ps1" : {
                "source" : { "Fn::Join" : [ "", [
                  "https://", { "Fn::If" : [ "ConfigureGlobalS3", "s3", { "Fn::Sub" : "s3-${AWS::Region}" }]}, ".amazonaws.com/",
                  { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ScriptsBucket" }}, "/", { "Ref" : "SharedScriptFolder" }, "/Configure-StaticPrivateAddress.ps1"
                ]]},
                "authentication" : "S3Credentials"
              }
            },
            "commands" : {
              "01-configure-static-address" : {
                "command" : { "Fn::Sub" : "powershell.exe -ExecutionPolicy RemoteSigned -Command c:\\cfn\\scripts\\Configure-StaticPrivateAddress.ps1 ${DomainControllerA.PrivateIp}" },
                "waitAfterCompletion" : "45"
              }
            }
          },
          "ConfigureHostName" : {
            "commands" : {
              "01-configure-hostname" : {
                "command" : { "Fn::Sub" : "powershell.exe Rename-Computer -NewName ${GetHostName.HostName}01b -Restart" },
                "waitAfterCompletion" : "forever"
              }
            }
          },
          "JoinDomain" : {
            "commands" : {
              "01-join-domain" : {
                "command" : { "Fn::Join" : [ "", [
                  "powershell.exe -Command \"Add-Computer -DomainName ", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCPrivateDomain" }},
                  " -Credential (New-Object System.Management.Automation.PSCredential('", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCNetBIOSDomain" }}, "\\", { "Ref" : "DomainAdminUser" }, "',(ConvertTo-SecureString '", { "Ref" : "DomainAdminPassword" }, "' -AsPlainText -Force)))",
                  " -Restart\""
                ]]},
                "waitAfterCompletion" : "forever"
              }
            }
          },
          "InstallADDS" : {
            "commands" : {
              "01-install-ad-domain-services" : {
                "command" : "powershell.exe -Command \"Install-WindowsFeature AD-Domain-Services, rsat-adds -IncludeAllSubFeature\"",
                "waitAfterCompletion" : "0"
              }
            }
          },
          "InstallADDSDomainController" : {
            "commands" : {
              "01-install-addsdomaincontroller" : {
                "command" : { "Fn::Join" : [ "", [
                  "powershell.exe -Command \"Install-ADDSDomainController -InstallDns -Confirm:$false -Force",
                  " -DomainName ", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCPrivateDomain" }},
                  " -Credential (New-Object System.Management.Automation.PSCredential('", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCNetBIOSDomain" }}, "\\", { "Ref" : "DomainAdminUser" }, "',(ConvertTo-SecureString '", { "Ref" : "DomainAdminPassword" }, "' -AsPlainText -Force)))",
                  " -SafeModeAdministratorPassword (ConvertTo-SecureString '", { "Ref" : "DomainAdminPassword" }, "' -AsPlainText -Force)\""
                ]]},
                "waitAfterCompletion" : "forever"
              }
            }
          },
          "InstallADCS" : {
            "files" : {
              "c:\\cfn\\scripts\\Unzip-Archive.ps1" : {
                "source" : { "Fn::Join" : [ "", [
                  "https://", { "Fn::If" : [ "ConfigureGlobalS3", "s3", { "Fn::Sub" : "s3-${AWS::Region}" }]}, ".amazonaws.com/",
                  { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ScriptsBucket" }}, "/", { "Ref" : "SharedScriptFolder" }, "/Unzip-Archive.ps1"
                ]]},
                "authentication" : "S3Credentials"
              },
              "c:\\cfn\\modules\\xAdcsDeployment_0.1.0.0.zip" : {
                "source" : { "Fn::Join" : [ "", [
                  "https://", { "Fn::If" : [ "ConfigureGlobalS3", "s3", { "Fn::Sub" : "s3-${AWS::Region}" }]}, ".amazonaws.com/",
                  { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ScriptsBucket" }}, "/", { "Ref" : "ScriptFolder" }, "/xAdcsDeployment_0.1.0.0.zip"
                ]]},
                "authentication" : "S3Credentials"
              },
              "c:\\cfn\\scripts\\New-CertificateAuthority.ps1" : {
                "source" : { "Fn::Join" : [ "", [
                  "https://", { "Fn::If" : [ "ConfigureGlobalS3", "s3", { "Fn::Sub" : "s3-${AWS::Region}" }]}, ".amazonaws.com/",
                  { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ScriptsBucket" }}, "/", { "Ref" : "ScriptFolder" }, "/New-CertificateAuthority.ps1"
                ]]},
                "authentication" : "S3Credentials"
              }
            },
            "commands" : {
              "01-install-adcsdeployment-module" : {
                "command" : { "Fn::Join" : [ "", [
                  "powershell.exe -command c:\\cfn\\scripts\\Unzip-Archive.ps1",
                  " -Source c:\\cfn\\modules\\xAdcsDeployment_0.1.0.0.zip",
                  " -Destination 'C:\\Program Files\\WindowsPowerShell\\Modules'"
                ]]},
                "waitAfterCompletion" : "0"
              },
              "02-install-certificate-authority" : {
                "command" : { "Fn::Join" : [ "", [
                  "powershell.exe -Command c:\\cfn\\scripts\\New-CertificateAuthority.ps1",
                  " -Username ", { "Ref" : "DomainAdminUser" },
                  " -Password '", { "Ref" : "DomainAdminPassword" }, "'",
                  " -DomainDNSName ", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCPrivateDomain" }}
                ]]},
                "waitAfterCompletion" : "0"
              }
            }
          },
          "UpdateDNSServers" : {
            "files" : {
              "c:\\cfn\\scripts\\Update-DNSServers.ps1" : {
                "source" : { "Fn::Join" : [ "", [
                  "https://", { "Fn::If" : [ "ConfigureGlobalS3", "s3", { "Fn::Sub" : "s3-${AWS::Region}" }]}, ".amazonaws.com/",
                  { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ScriptsBucket" }}, "/", { "Ref" : "ScriptFolder" }, "/Update-DNSServers.ps1"
                ]]},
                "authentication" : "S3Credentials"
              }
            },
            "commands" : {
              "01-update-dnsservers" : {
                "command" : { "Fn::Join" : [ "", [
                  "powershell.exe -Command c:\\cfn\\scripts\\Update-DNSServers.ps1",
                  " -DomainControllerAHostName ", { "Fn::GetAtt" : [ "GetHostName", "HostName" ]}, "01a",
                  " -DomainControllerAPrivateIp ", { "Fn::GetAtt" : [ "DomainControllerA", "PrivateIp" ]},
                  " -Username ", { "Ref" : "DomainAdminUser" },
                  " -Password '", { "Ref" : "DomainAdminPassword" }, "'",
                  " -NetBIOSDomain ", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCNetBIOSDomain" }}
                ]]},
                "waitAfterCompletion" : "0"
              }
            }
          },
          "SignalCFN" : {
            "commands" : {
              "01-signal-success" : {
                "command" : { "Fn::Sub" : "cfn-signal.exe --exit-code 0 \"${DomainControllerBWaitHandle}\"" }
              }
            }
          }
        }
      },
      "Properties" : {
        "ImageId" : { "Fn::If" : [ "GetImageID", { "Fn::GetAtt" : [ "GetWindowsImageId", "ImageId" ]},
                                                 { "Fn::FindInMap" : [ "ImageIdMap", { "Ref" : "AWS::Region" }, { "Ref" : "OSDate" }]}]},
        "InstanceType" : { "Fn::FindInMap" : [ "InstanceTypeMap", "DomainController", { "Ref" : "EnvironmentType" }]},
        "IamInstanceProfile" : { "Ref" : "InstanceProfile" },
        "KeyName" : { "Ref" : "KeyName" },
        "SecurityGroupIds" : [
          { "Ref" : "DomainControllerSecurityGroup" }
        ],
        "SubnetId" : { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-IdentitySubnetB" }},
        "PrivateIpAddress" : { "Fn::If" : [ "ConfigureStaticAddress&MultiZone", { "Fn::GetAtt" : [ "AddressCalculatorB", "Address4" ]}, { "Ref" : "AWS::NoValue" }]},
        "BlockDeviceMappings" : [{
          "DeviceName" : "/dev/sda1",
          "Ebs" : {
            "VolumeSize" : "100",
            "VolumeType" : "gp2"
          }
        }],
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }}, { "Ref" : "UtilityName" }, "DomainControllerB" ]]}},
          { "Key" : "HostName", "Value" : { "Fn::Sub" : "${GetHostName.HostName}01b" }}
        ],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : [ "\n", [
          "<script>",
          { "Fn::Sub" : "cfn-init.exe --verbose --configsets All --stack ${AWS::StackId} --resource DomainControllerB --region ${AWS::Region}" },
          "</script>"
        ]]}}
      },
      "Condition" : "ConfigureMultiZone",
      "DependsOn" : "DomainControllerAWaitCondition"
    },

    "DomainControllerBWaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "Properties" : {
        "Handle" : { "Ref" : "DomainControllerBWaitHandle" },
        "Timeout" : "3600"
      },
      "Condition" : "ConfigureMultiZone",
      "DependsOn" : "DomainControllerB"
    },

    "DomainControllerBWaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle",
      "Condition" : "ConfigureMultiZone"
    },

    "DHCPOptions" : {
      "Type" : "AWS::EC2::DHCPOptions",
      "Properties" : {
        "DomainName" : { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCPrivateDomain" }},
        "DomainNameServers" : [
          { "Fn::GetAtt" : [ "DomainControllerA", "PrivateIp" ]},
          { "Fn::If" : [ "ConfigureMultiZone", { "Fn::GetAtt" : [ "DomainControllerB", "PrivateIp" ]}, { "Ref" : "AWS::NoValue" }]}
        ],
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }}, { "Ref" : "UtilityName" }, "DHCPOptions" ]]}}
        ]
      },
      "DependsOn" : "DomainControllerBWaitCondition"
    },

    "VPCDHCPOptionsAssociation" : {
      "Type" : "AWS::EC2::VPCDHCPOptionsAssociation",
      "Properties" : {
        "VpcId" : { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPC" }},
        "DhcpOptionsId" : { "Ref" : "DHCPOptions" }
      }
    }
  },

  "Outputs" : {
    "DomainMemberSecurityGroup" : {
      "Description" : "The Domain Member SecurityGroup",
      "Value" : { "Ref" : "DomainMemberSecurityGroup" },
      "Export" : { "Name" : { "Fn::Sub" : "${AWS::StackName}-DomainMemberSecurityGroup" }}
    },

    "DomainControllerSecurityGroup" : {
      "Description" : "The Domain Controller SecurityGroup",
      "Value" : { "Ref" : "DomainControllerSecurityGroup" },
      "Export" : { "Name" : { "Fn::Sub" : "${AWS::StackName}-DomainControllerSecurityGroup" }}
    },

    "DomainAdminUser" : {
      "Description" : "The DomainAdmin User",
      "Value" : { "Fn::Join" : [ "", [ { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCNetBIOSDomain" }}, "\\", { "Ref" : "DomainAdminUser" }]]},
      "Export" : { "Name" : { "Fn::Sub" : "${AWS::StackName}-DomainAdminUser" }}
    }
  }
}
