{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Core-StandardAMIFunctions Template. This creates Standard Lambda Functions related to AMIs within the Core Account.",

  "Resources" : {
    "Role" : {
      "Type" : "AWS::IAM::Role",
      "Properties" : {
        "AssumeRolePolicyDocument" : {
          "Version" : "2012-10-17",
          "Statement" : [{
            "Effect" : "Allow",
            "Principal" : { "Service" : [ "lambda.amazonaws.com" ]},
            "Action" : [ "sts:AssumeRole" ]
          }]
        },
        "Path" : "/",
        "Policies" : [{
          "PolicyName" : "DescribeImagesPolicy",
          "PolicyDocument" : {
            "Version" : "2012-10-17",
            "Statement" : [{
              "Effect" : "Allow",
              "Action" : [
                "ec2:DescribeImages"
              ],
              "Resource" : "*"
            }]
          }
        },
        {
          "PolicyName" : "PutLambdaLogEventsPolicy",
          "PolicyDocument" : {
            "Version" : "2012-10-17",
            "Statement" : [{
              "Effect" : "Allow",
              "Action" : [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource" : "arn:aws:logs:*:*:*"
            }]
          }
        }]
      }
    },

    "GetAmazonLinuxImageIdFunction" : {
      "Type" : "AWS::Lambda::Function",
      "Properties" : {
        "FunctionName" : "GetAmazonLinuxImageId",
        "Description" : "A Lambda function that looks up the latest Amazon Linux AMI ID for a given OS Variant and Region (HVM64 only).",
        "Role" : { "Fn::GetAtt" : [ "Role", "Arn" ]},
        "Runtime" : "nodejs4.3",
        "Timeout" : "30",
        "Handler" : "index.handler",
        "Code" : {
          "ZipFile" : { "Fn::Join" : [ "\n", [
            "var osNameToPattern = {",
            "  'Amazon Linux'           : 'amzn-ami-hvm-????.??.?.????????-x86_64-gp2',",
            "  'Amazon Linux 2017.03.0' : 'amzn-ami-hvm-2017.03.0.????????-x86_64-gp2',",
            "  'Amazon Linux 2016.09.1' : 'amzn-ami-hvm-2016.09.1.????????-x86_64-gp2',",
            "  'Amazon Linux 2016.09.0' : 'amzn-ami-hvm-2016.09.0.????????-x86_64-gp2'",
            "};",
            "",
            "var response = require('cfn-response');",
            "",
            "exports.handler = function(event, context) {",
            "  console.log('Request body:\\n' + JSON.stringify(event));",
            "",
            "  if (event.RequestType == 'Delete') {",
            "    response.send(event, context, response.SUCCESS);",
            "    return;",
            "  }",
            "",
            "  var responseStatus = response.FAILED;",
            "  var responseData = {};",
            "",
            "  var osBaseName = osNameToPattern[event.ResourceProperties.OSName];",
            "  if (osBaseName === undefined) {",
            "    osBaseName = 'amzn-ami-hvm-????.??.?.????????-x86_64-gp2';",
            "  }",
            "  console.log('OS: ' + event.ResourceProperties.OSName + ' -> ' + osBaseName);",
            "",
            "  var aws = require('aws-sdk');",
            "",
            "  var ec2 = new aws.EC2({region: event.ResourceProperties.Region});",
            "  var describeImagesParams = {",
            "    Filters: [{ Name: 'name', Values: [osBaseName]}],",
            "    Owners: ['amazon']",
            "  };",
            "",
            "  console.log('Calling DescribeImages...');",
            "  ec2.describeImages(describeImagesParams, function(err, describeImagesResult) {",
            "    if (err) {",
            "      responseData = {Error: 'DescribeImages call failed'};",
            "      console.error(responseData.Error + ':\\n', err);",
            "    }",
            "    else {",
            "      var images = describeImagesResult.Images;",
            "      console.log('DescribeImages returned ' + images.length + ' images');",
            "      images.sort(function(x, y) { return y.Name.localeCompare(x.Name); });",
            "      for (var i = 0; i < images.length; i++) {",
            "        responseStatus = response.SUCCESS;",
            "        responseData['ImageId'] = images[i].ImageId;",
            "        responseData['Name'] = images[i].Name;",
            "        console.log('Found: ' + images[i].Name + ', ' + images[i].ImageId);",
            "        break;",
            "      }",
            "    }",
            "",
            "    response.send(event, context, responseStatus, responseData);",
            "  });",
            "};"
          ]]}
        }
      }
    },

    "GetWindowsImageIdFunction" : {
      "Type" : "AWS::Lambda::Function",
      "Properties" : {
        "FunctionName" : "GetWindowsImageId",
        "Description" : "A Lambda function that looks up the latest Windows AMI ID for a given OS Variant and Region.",
        "Role" : { "Fn::GetAtt" : [ "Role", "Arn" ]},
        "Runtime" : "nodejs4.3",
        "Timeout" : "30",
        "Handler" : "index.handler",
        "Code" : {
          "ZipFile" :  { "Fn::Join" : [ "\n", [
            "var osNameToPattern = {",
            "  'Windows Server 2016'                                  : 'Windows_Server-2016-English-Full-Base-*',",
            "  'Windows Server 2016 with Containers'                  : 'Windows_Server-2016-English-Full-Containers-*',",
            "  'Windows Server 2016 Nano'                             : 'Windows_Server-2016-English-Nano-Base-*',",
            "  'Windows Server 2016 with SQL Server 2016 Express'     : 'Windows_Server-2016-English-Full-SQL_2016_SP1_Express-*',",
            "  'Windows Server 2016 with SQL Server 2016 Web'         : 'Windows_Server-2016-English-Full-SQL_2016_SP1_Web-*',",
            "  'Windows Server 2016 with SQL Server Standard'         : 'Windows_Server-2016-English-Full-SQL_2016_SP1_Standard-*',",
            "  'Windows Server 2012 R2'                               : 'Windows_Server-2012-R2_RTM-English-64Bit-Base-*',",
            "  'Windows Server 2012 R2 with SQL Server 2016 Express'  : 'Windows_Server-2012-R2_RTM-English-64Bit-SQL_2016_SP1_Express-*',",
            "  'Windows Server 2012 R2 with SQL Server 2016 Web'      : 'Windows_Server-2012-R2_RTM-English-64Bit-SQL_2016_SP1_Web-*',",
            "  'Windows Server 2012 R2 with SQL Server 2016 Standard' : 'Windows_Server-2012-R2_RTM-English-64Bit-SQL_2016_SP1_Standard-*',",
            "  'Windows Server 2012 R2 with SQL Server 2014 Express'  : 'Windows_Server-2012-R2_RTM-English-64Bit-SQL_2014_SP2_Express-*',",
            "  'Windows Server 2012 R2 with SQL Server 2014 Web'      : 'Windows_Server-2012-R2_RTM-English-64Bit-SQL_2014_SP2_Web-*',",
            "  'Windows Server 2012 R2 with SQL Server 2014 Standard' : 'Windows_Server-2012-R2_RTM-English-64Bit-SQL_2014_SP2_Standard-*'",
            "};",
            "",
            "var response = require('cfn-response');",
            "",
            "exports.handler = function(event, context) {",
            "  console.log('Request body:\\n' + JSON.stringify(event));",
            "",
            "  if (event.RequestType == 'Delete') {",
            "    response.send(event, context, response.SUCCESS);",
            "    return;",
            "  }",
            "",
            "  var responseStatus = response.FAILED;",
            "  var responseData = {};",
            "",
            "  var osBaseName = osNameToPattern[event.ResourceProperties.OSName];",
            "  console.log('OS: ' + event.ResourceProperties.OSName + ' -> ' + osBaseName);",
            "",
            "  var aws = require('aws-sdk');",
            "",
            "  var ec2 = new aws.EC2({region: event.ResourceProperties.Region});",
            "  var describeImagesParams = {",
            "    Filters: [{ Name: 'name', Values: [osBaseName]}],",
            "    Owners: ['amazon']",
            "  };",
            "",
            "  console.log('Calling DescribeImages...');",
            "  ec2.describeImages(describeImagesParams, function(err, describeImagesResult) {",
            "    if (err) {",
            "      responseData = {Error: 'DescribeImages call failed'};",
            "      console.error(responseData.Error + ':\\n', err);",
            "    }",
            "    else {",
            "      var images = describeImagesResult.Images;",
            "      console.log('DescribeImages returned ' + images.length + ' images');",
            "      images.sort(function(x, y) { return x.CreationDate < y.CreationDate; });",
            "      for (var i = 0; i < images.length; i++) {",
            "        responseStatus = response.SUCCESS;",
            "        responseData['ImageId'] = images[i].ImageId;",
            "        responseData['Name'] = images[i].Name;",
            "        console.log('Found: ' + images[i].Name + ', ' + images[i].ImageId);",
            "        break;",
            "      }",
            "    }",
            "",
            "    response.send(event, context, responseStatus, responseData);",
            "  });",
            "};"
          ]]}
        }
      }
    },

    "GetSpecificWindowsImageIdFunction" : {
      "Type" : "AWS::Lambda::Function",
      "Properties" : {
        "FunctionName" : "GetSpecificWindowsImageId",
        "Description" : "A Lambda function that looks up the specific Windows AMI ID for a given OS Variant, OS Date and Region.",
        "Role" : { "Fn::GetAtt" : [ "Role", "Arn" ]},
        "Runtime" : "nodejs4.3",
        "Timeout" : "30",
        "Handler" : "index.handler",
        "Code" : {
          "ZipFile" :  { "Fn::Join" : [ "\n", [
            "var osNameToPattern = {",
            "  'Windows Server 2016'                                  : 'Windows_Server-2016-English-Full-Base-',",
            "  'Windows Server 2016 with Containers'                  : 'Windows_Server-2016-English-Full-Containers-',",
            "  'Windows Server 2016 Nano'                             : 'Windows_Server-2016-English-Nano-Base-',",
            "  'Windows Server 2016 with SQL Server 2016 Express'     : 'Windows_Server-2016-English-Full-SQL_2016_SP1_Express-',",
            "  'Windows Server 2016 with SQL Server 2016 Web'         : 'Windows_Server-2016-English-Full-SQL_2016_SP1_Web-',",
            "  'Windows Server 2016 with SQL Server Standard'         : 'Windows_Server-2016-English-Full-SQL_2016_SP1_Standard-',",
            "  'Windows Server 2012 R2'                               : 'Windows_Server-2012-R2_RTM-English-64Bit-Base-',",
            "  'Windows Server 2012 R2 with SQL Server 2016 Express'  : 'Windows_Server-2012-R2_RTM-English-64Bit-SQL_2016_SP1_Express-',",
            "  'Windows Server 2012 R2 with SQL Server 2016 Web'      : 'Windows_Server-2012-R2_RTM-English-64Bit-SQL_2016_SP1_Web-',",
            "  'Windows Server 2012 R2 with SQL Server 2016 Standard' : 'Windows_Server-2012-R2_RTM-English-64Bit-SQL_2016_SP1_Standard-',",
            "  'Windows Server 2012 R2 with SQL Server 2014 Express'  : 'Windows_Server-2012-R2_RTM-English-64Bit-SQL_2014_SP2_Express-',",
            "  'Windows Server 2012 R2 with SQL Server 2014 Web'      : 'Windows_Server-2012-R2_RTM-English-64Bit-SQL_2014_SP2_Web-',",
            "  'Windows Server 2012 R2 with SQL Server 2014 Standard' : 'Windows_Server-2012-R2_RTM-English-64Bit-SQL_2014_SP2_Standard-'",
            "};",
            "",
            "var response = require('cfn-response');",
            "",
            "exports.handler = function(event, context) {",
            "  console.log('Request body:\\n' + JSON.stringify(event));",
            "",
            "  if (event.RequestType == 'Delete') {",
            "    response.send(event, context, response.SUCCESS);",
            "    return;",
            "  }",
            "",
            "  var responseStatus = response.FAILED;",
            "  var responseData = {};",
            "",
            "  var osBaseName = osNameToPattern[event.ResourceProperties.OSName];",
            "  if (event.ResourceProperties.OSDate) {",
            "    osBaseName += event.ResourceProperties.OSDate;",
            "    console.log('OS: ' + event.ResourceProperties.OSName + '[' + event.ResourceProperties.OSDate + '] -> ' + osBaseName);",
            "  }",
            "  else {",
            "    osBaseName +='*';",
            "    console.log('OS: ' + event.ResourceProperties.OSName + ' -> ' + osBaseName);",
            "  }",
            "",
            "  var aws = require('aws-sdk');",
            "",
            "  var ec2 = new aws.EC2({region: event.ResourceProperties.Region});",
            "  var describeImagesParams = {",
            "    Filters: [{ Name: 'name', Values: [osBaseName]}],",
            "    Owners: ['amazon']",
            "  };",
            "",
            "  console.log('Calling DescribeImages...');",
            "  ec2.describeImages(describeImagesParams, function(err, describeImagesResult) {",
            "    if (err) {",
            "      responseData = {Error: 'DescribeImages call failed'};",
            "      console.error(responseData.Error + ':\\n', err);",
            "    }",
            "    else {",
            "      var images = describeImagesResult.Images;",
            "      console.log('DescribeImages returned ' + images.length + ' images');",
            "      images.sort(function(x, y) { return x.CreationDate < y.CreationDate; });",
            "      for (var i = 0; i < images.length; i++) {",
            "        responseStatus = response.SUCCESS;",
            "        responseData['ImageId'] = images[i].ImageId;",
            "        responseData['Name'] = images[i].Name;",
            "        console.log('Found: ' + images[i].Name + ', ' + images[i].ImageId);",
            "        break;",
            "      }",
            "    }",
            "",
            "    response.send(event, context, responseStatus, responseData);",
            "  });",
            "};"
          ]]}
        }
      }
    },

    "GetRHELImageIdFunction" : {
      "Type" : "AWS::Lambda::Function",
      "Properties" : {
        "FunctionName" : "GetRHELImageId",
        "Description" : "A Lambda function that looks up the latest RHEL AMI ID for a given OS Variant and Region.",
        "Role" : { "Fn::GetAtt" : [ "Role", "Arn" ]},
        "Runtime" : "nodejs4.3",
        "Timeout" : "30",
        "Handler" : "index.handler",
        "Code" : {
          "ZipFile" :  { "Fn::Join" : [ "\n", [
            "var osNameToPattern = {",
            "  'RHEL 7'    : 'RHEL-7.*_HVM_GA-*',",
            "  'RHEL 7.4'  : 'RHEL-7.4_HVM_GA-*',",
            "  'RHEL 7.3'  : 'RHEL-7.3_HVM_GA-*',",
            "  'RHEL 7.2'  : 'RHEL-7.2_HVM-*',",
            "  'RHEL 7.1'  : 'RHEL-7.1_HVM-*',",
            "  'RHEL 6'    : 'RHEL-6.*_HVM_GA-*',",
            "  'RHEL 6.10' : 'RHEL-6.10_HVM_GA-*',",
            "  'RHEL 6.9'  : 'RHEL-6.9_HVM_GA-*',",
            "  'RHEL 6.8'  : 'RHEL-6.8_HVM_GA-*',",
            "  'RHEL 6.7'  : 'RHEL-6.7_HVM-*',",
            "  'RHEL 6.6'  : 'RHEL-6.6_HVM_GA-*'",
            "};",
            "",
            "var response = require('cfn-response');",
            "",
            "exports.handler = function(event, context) {",
            "  console.log('Request body:\\n' + JSON.stringify(event));",
            "",
            "  if (event.RequestType == 'Delete') {",
            "    response.send(event, context, response.SUCCESS);",
            "    return;",
            "  }",
            "",
            "  var responseStatus = response.FAILED;",
            "  var responseData = {};",
            "",
            "  var osBaseName = osNameToPattern[event.ResourceProperties.OSName];",
            "  console.log('OS: ' + event.ResourceProperties.OSName + ' -> ' + osBaseName);",
            "",
            "  var aws = require('aws-sdk');",
            "",
            "  var ec2 = new aws.EC2({region: event.ResourceProperties.Region});",
            "  var describeImagesParams = {",
            "    Filters: [{ Name: 'name', Values: [osBaseName]}],",
            "    Owners: ['309956199498']",
            "  };",
            "",
            "  console.log('Calling DescribeImages...');",
            "  ec2.describeImages(describeImagesParams, function(err, describeImagesResult) {",
            "    if (err) {",
            "      responseData = {Error: 'DescribeImages call failed'};",
            "      console.error(responseData.Error + ':\\n', err);",
            "    }",
            "    else {",
            "      var images = describeImagesResult.Images;",
            "      console.log('DescribeImages returned ' + images.length + ' images');",
            "      images.sort(function(x, y) { return x.CreationDate < y.CreationDate; });",
            "      for (var i = 0; i < images.length; i++) {",
            "        responseStatus = response.SUCCESS;",
            "        responseData['ImageId'] = images[i].ImageId;",
            "        responseData['Name'] = images[i].Name;",
            "        console.log('Found: ' + images[i].Name + ', ' + images[i].ImageId);",
            "        break;",
            "      }",
            "    }",
            "",
            "    response.send(event, context, responseStatus, responseData);",
            "  });",
            "};"
          ]]}
        }
      }
    },

    "GetUbuntuImageIdFunction" : {
      "Type" : "AWS::Lambda::Function",
      "Properties" : {
        "FunctionName" : "GetUbuntuImageId",
        "Description" : "A Lambda function that looks up the latest Ubuntu AMI ID for a given OS Variant and Region.",
        "Role" : { "Fn::GetAtt" : [ "Role", "Arn" ]},
        "Runtime" : "nodejs4.3",
        "Timeout" : "30",
        "Handler" : "index.handler",
        "Code" : {
          "ZipFile" :  { "Fn::Join" : [ "\n", [
            "var osNameToPattern = {",
            "  'Ubuntu Server 16.04 LTS' : 'ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-*',",
            "  'Ubuntu Server 14.04 LTS' : 'ubuntu/images/hvm-ssd/ubuntu-trusty-14.04-amd64-server-*',",
            "  'Ubuntu Server 12.04 LTS' : 'ubuntu/images/hvm-ssd/ubuntu-precise-12.04-amd64-server-*'",
            "};",
            "",
            "var response = require('cfn-response');",
            "",
            "exports.handler = function(event, context) {",
            "  console.log('Request body:\\n' + JSON.stringify(event));",
            "",
            "  if (event.RequestType == 'Delete') {",
            "    response.send(event, context, response.SUCCESS);",
            "    return;",
            "  }",
            "",
            "  var responseStatus = response.FAILED;",
            "  var responseData = {};",
            "",
            "  var osBaseName = osNameToPattern[event.ResourceProperties.OSName];",
            "  console.log('OS: ' + event.ResourceProperties.OSName + ' -> ' + osBaseName);",
            "",
            "  var aws = require('aws-sdk');",
            "",
            "  var ec2 = new aws.EC2({region: event.ResourceProperties.Region});",
            "  var describeImagesParams = {",
            "    Filters: [{ Name: 'name', Values: [osBaseName]}],",
            "    Owners: ['099720109477']",
            "  };",
            "",
            "  console.log('Calling DescribeImages...');",
            "  ec2.describeImages(describeImagesParams, function(err, describeImagesResult) {",
            "    if (err) {",
            "      responseData = {Error: 'DescribeImages call failed'};",
            "      console.error(responseData.Error + ':\\n', err);",
            "    }",
            "    else {",
            "      var images = describeImagesResult.Images;",
            "      console.log('DescribeImages returned ' + images.length + ' images');",
            "      images.sort(function(x, y) { return y.Name.localeCompare(x.Name); });",
            "      for (var i = 0; i < images.length; i++) {",
            "        responseStatus = response.SUCCESS;",
            "        responseData['ImageId'] = images[i].ImageId;",
            "        responseData['Name'] = images[i].Name;",
            "        console.log('Found: ' + images[i].Name + ', ' + images[i].ImageId);",
            "        break;",
            "      }",
            "    }",
            "",
            "    response.send(event, context, responseStatus, responseData);",
            "  });",
            "};"
          ]]}
        }
      }
    }
  },

  "Outputs" : {
    "GetAmazonLinuxImageIdFunctionArn" : {
      "Description" : "The GetAmazonLinuxImageId Lambda Function ARN",
      "Value" :  { "Fn::GetAtt" : [ "GetAmazonLinuxImageIdFunction", "Arn" ]},
      "Export" : { "Name" : { "Fn::Sub" : "${AWS::StackName}-GetAmazonLinuxImageIdFunctionArn" }}
    },

    "GetWindowsImageIdFunctionArn" : {
      "Description" : "The GetWindowsImageId Lambda Function ARN",
      "Value" :  { "Fn::GetAtt" : [ "GetWindowsImageIdFunction", "Arn" ]},
      "Export" : { "Name" : { "Fn::Sub" : "${AWS::StackName}-GetWindowsImageIdFunctionArn" }}
    },

    "GetSpecificWindowsImageIdFunctionArn" : {
      "Description" : "The GetSpecificWindowsImageId Lambda Function ARN",
      "Value" :  { "Fn::GetAtt" : [ "GetSpecificWindowsImageIdFunction", "Arn" ]},
      "Export" : { "Name" : { "Fn::Sub" : "${AWS::StackName}-GetSpecificWindowsImageIdFunctionArn" }}
    },

    "GetRHELImageIdFunctionArn" : {
      "Description" : "The GetRHELImageId Lambda Function ARN",
      "Value" :  { "Fn::GetAtt" : [ "GetRHELImageIdFunction", "Arn" ]},
      "Export" : { "Name" : { "Fn::Sub" : "${AWS::StackName}-GetRHELImageIdFunctionArn" }}
    },

    "GetUbuntuImageIdFunctionArn" : {
      "Description" : "The GetUbuntuImageId Lambda Function ARN",
      "Value" :  { "Fn::GetAtt" : [ "GetUbuntuImageIdFunction", "Arn" ]},
      "Export" : { "Name" : { "Fn::Sub" : "${AWS::StackName}-GetUbuntuImageIdFunctionArn" }}
    }
  }
}
