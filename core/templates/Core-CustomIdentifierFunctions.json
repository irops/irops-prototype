{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Core-CustomIdentifierFunctions Template. This creates Custom Lambda Functions related to Identifiers within the Core Account.",

  "Resources" : {
    "Role" : {
      "Type" : "AWS::IAM::Role",
      "Properties" : {
        "AssumeRolePolicyDocument" : {
          "Version" : "2012-10-17",
          "Statement" : [{
            "Effect" : "Allow",
            "Principal" : { "Service" : [ "lambda.amazonaws.com" ]},
            "Action" : [ "sts:AssumeRole" ]
          }]
        },
        "Path" : "/",
        "Policies" : [{
          "PolicyName" : "PutLambdaLogEventsPolicy",
          "PolicyDocument" : {
            "Version" : "2012-10-17",
            "Statement" : [{
              "Effect" : "Allow",
              "Action" : [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource" : "arn:aws:logs:*:*:*"
            }]
          }
        }]
      }
    },

    "GetHostNameFunction" : {
      "Type" : "AWS::Lambda::Function",
      "Properties" : {
        "FunctionName" : "GetHostName",
        "Description" : "A Lambda function which creates a HostName that conforms to IROPS Naming Conventions for use by Instances in a VPC, based on Company, Location, (optional) System, Application and (optional) Component.",
        "Role" : { "Fn::GetAtt" : [ "Role", "Arn" ]},
        "Runtime" : "nodejs4.3",
        "Timeout" : "30",
        "Handler" : "index.handler",
        "Code" : {
          "ZipFile" :  { "Fn::Join" : [ "\n", [
            "var companyNameToCode = {",
            "  'Demo'   : 'demo',",
            "  'Travel' : 'tvl'",
            "};",
            "",
            "var locationNameToCode = {",
            "  'us-east-1'       : 'ue1',",
            "  'us-east-2'       : 'ue2',",
            "  'us-west-1'       : 'uw1',",
            "  'us-west-2'       : 'uw2',",
            "  'ca-central-1'    : 'cc1',",
            "  'eu-west-1'       : 'ew1',",
            "  'eu-central-1'    : 'ec1',",
            "  'eu-west-2'       : 'ew2',",
            "  'ap-southeast-1'  : 'as1',",
            "  'ap-southeast-2'  : 'as2',",
            "  'ap-northeast-2'  : 'an2',",
            "  'ap-northeast-1'  : 'an1',",
            "  'ap-south-1'      : 'ad1',",
            "  'sa-east-1'       : 'se1'",
            "};",
            "",
            "var environmentNameToCode = {",
            "  'Production'  : 'p',",
            "  'Staging'     : 's',",
            "  'QA'          : 'q',",
            "  'Testing'     : 't',",
            "  'Development' : 'd',",
            "  'Core'        : 'c',",
            "  'Build'       : 'b',",
            "  'Recovery'    : 'r',",
            "  'Example'     : 'e'",
            "};",
            "",
            "var systemNameToCode = {",
            "  'IROPS' : 'irops'",
            "};",
            "",
            "var applicationNameToCode = {",
            "  'LinuxBastions'     : 'bl',",
            "  'LinuxBastion'      : 'bl',",
            "  'WindowsBastions'   : 'bw',",
            "  'WindowsBastion'    : 'bw',",
            "  'OpenVPN'           : 'vpn',",
            "  'OpenVPNAS'         : 'vpn',",
            "  'WebSphereMQ'       : 'wmq',",
            "  'Engine'            : 'eng',",
            "  'ActiveDirectory'   : 'ad',",
            "  'DataTransfer'      : 'dt',",
            "  'FederatedSecurity' : 'fs',",
            "  'CentralDatabase'   : 'cdb',",
            "  'PAX'               : 'pax',",
            "  'SiteScope'         : 'ss',",
            "  'WebServer'         : 'ws',",
            "  'WebServers'        : 'mws',",
            "  'NestedWebServer'   : 'nws',",
            "  'NestedWebServers'  : 'mnws',",
            "  'WindowsWebServer'  : 'wws'",
            "};",
            "",
            "var componentNameToCode = {",
            "  'Web'              : 'web',",
            "  'Queue'            : 'que',",
            "  'Calculation'      : 'cal',",
            "  'MongoDB'          : 'mdb',",
            "  'RabbitMQ'         : 'rmq',",
            "  'QueueProcessor'   : 'qpr',",
            "  'Logging'          : 'log',",
            "  'Deployment'       : 'dep',",
            "  'Publish'          : 'pub',",
            "  'DomainController' : 'dc',",
            "  'SFTP'             : 'ftp',",
            "  'PolicyServer'     : 'pol',",
            "  'SecurityServer'   : 'sec',",
            "  'Update'           : 'upd'",
            "};",
            "",
            "var response = require('cfn-response');",
            "var responseData = {};",
            "",
            "exports.handler = function(event, context) {",
            "  console.log('Request body:\\n' + JSON.stringify(event));",
            "",
            "  if (event.RequestType == 'Delete') {",
            "    response.send (event, context, response.SUCCESS);",
            "    return;",
            "  }",
            "",
            "  console.log('Validating input properties...');",
            "  var companyCode = companyNameToCode[event.ResourceProperties.CompanyName];",
            "  if (companyCode === undefined) {",
            "    responseData = {Error: 'CompanyName invalid: must be a valid CompanyName'};",
            "    console.error(responseData.Error);",
            "    response.send(event, context, response.FAILED, responseData);",
            "    return;",
            "  }",
            "  var locationCode = locationNameToCode[event.ResourceProperties.LocationName];",
            "  if (locationCode === undefined) {",
            "    responseData = {Error: 'LocationName invalid: must be a valid LocationName'};",
            "    console.error(responseData.Error);",
            "    response.send(event, context, response.FAILED, responseData);",
            "    return;",
            "  }",
            "  var environmentCode = environmentNameToCode[event.ResourceProperties.EnvironmentName];",
            "  if (environmentCode === undefined) {",
            "    responseData = {Error: 'EnvironmentName invalid: must be a valid EnvironmentName'};",
            "    console.error(responseData.Error);",
            "    response.send(event, context, response.FAILED, responseData);",
            "    return;",
            "  }",
            "  var systemCode = systemNameToCode[event.ResourceProperties.SystemName];",
            "  if (systemCode === undefined) {",
            "    systemCode = '';",
            "  }",
            "  var applicationCode = applicationNameToCode[event.ResourceProperties.ApplicationName];",
            "  if (applicationCode === undefined) {",
            "    responseData = {Error: 'ApplicationName invalid: must be a valid ApplicationName'};",
            "    console.error(responseData.Error);",
            "    response.send(event, context, response.FAILED, responseData);",
            "    return;",
            "  }",
            "  var componentCode = componentNameToCode[event.ResourceProperties.ComponentName];",
            "  if (componentCode === undefined) {",
            "    componentCode = '';",
            "  }",
            "",
            "  responseData['HostName'] = companyCode + locationCode + environmentCode + systemCode + applicationCode + componentCode;",
            "  console.log('HostName: ' + responseData['HostName']);",
            "",
            "  response.send(event, context, response.SUCCESS, responseData);",
            "};"
          ]]}
        }
      }
    },

    "GetDomainNameFunction" : {
      "Type" : "AWS::Lambda::Function",
      "Properties" : {
        "FunctionName" : "GetDomainName",
        "Description" : "A Lambda function which creates a DomainName which conforms to IROPS Naming Conventions for use by HostedZones in a VPC, based on Names or Codes associated with the Environment, Location, Company and Parent DomainName.",
        "Role" : { "Fn::GetAtt" : [ "Role", "Arn" ]},
        "Runtime" : "nodejs4.3",
        "Timeout" : "30",
        "Handler" : "index.handler",
        "Code" : {
          "ZipFile" :  { "Fn::Join" : [ "\n", [
            "var companyNameToCode = {",
            "  'Demo'   : 'demo',",
            "  'Travel' : 'tvl'",
            "};",
            "",
            "var environmentNameToCode = {",
            "  'Production'  : 'p',",
            "  'Staging'     : 's',",
            "  'QA'          : 'q',",
            "  'Testing'     : 't',",
            "  'Development' : 'd',",
            "  'Core'        : 'c',",
            "  'Build'       : 'b',",
            "  'Recovery'    : 'r',",
            "  'Example'     : 'e'",
            "};",
            "",
            "var response = require('cfn-response');",
            "var responseData = {};",
            "",
            "exports.handler = function(event, context) {",
            "  console.log('Request body:\\n' + JSON.stringify(event));",
            "",
            "  if (event.RequestType == 'Delete') {",
            "    response.send (event, context, response.SUCCESS);",
            "    return;",
            "  }",
            "",
            "  console.log('Validating input properties...');",
            "  var parentDomainName = event.ResourceProperties.ParentDomainName;",
            "  if (! /^([A-Za-z0-9][A-Za-z0-9-]{0,61}[A-Za-z0-9]?\\.)+[A-Za-z]{2,6}$/.test(parentDomainName)) {",
            "    responseData = {Error: 'ParentDomainName invalid: must be a valid domain name'};",
            "    console.error(responseData.Error);",
            "    response.send(event, context, response.FAILED, responseData);",
            "    return;",
            "  }",
            "  var companyCode = companyNameToCode[event.ResourceProperties.CompanyName];",
            "  if (companyCode === undefined) {",
            "    responseData = {Error: 'CompanyName invalid: must be a valid CompanyName'};",
            "    console.error(responseData.Error);",
            "    response.send(event, context, response.FAILED, responseData);",
            "    return;",
            "  }",
            "  var locationName = event.ResourceProperties.LocationName;",
            "  if (! /^(us-east-1|us-east-2|us-west-1|us-west-2|ca-central-1|eu-west-1|eu-central-1|eu-west-2|ap-southeast-1|ap-southeast-2|ap-northeast-2|ap-northeast-1|ap-south-1|sa-east-1)$/.test(locationName)) {",
            "    responseData = {Error: 'LocationName invalid: must be us-east-1, us-east-2, us-west-1, us-west-2, ca-central-1, eu-west-1, eu-central-1, eu-west-2, ap-southeast-1, ap-southeast-2, ap-northeast-2, ap-northeast-1, ap-south-1 or sa-east-1'};",
            "    console.error(responseData.Error);",
            "    response.send(event, context, response.FAILED, responseData);",
            "    return;",
            "  }",
            "  var environmentCode = environmentNameToCode[event.ResourceProperties.EnvironmentName];",
            "  if (environmentCode === undefined) {",
            "    responseData = {Error: 'EnvironmentName invalid: must be a valid EnvironmentName'};",
            "    console.error(responseData.Error);",
            "    response.send(event, context, response.FAILED, responseData);",
            "    return;",
            "  }",
            "",
            "  responseData['DomainName'] = ((environmentCode == 'p') ? '' : environmentCode + '.') + locationName + '.' + companyCode + '.' + parentDomainName;",
            "  console.log('DomainName: ' + responseData['DomainName']);",
            "",
            "  response.send(event, context, response.SUCCESS, responseData);",
            "};"
          ]]}
        }
      }
    }
  },

  "Outputs" : {
    "GetHostNameFunctionArn" : {
      "Description" : "The GetHostName Lambda Function ARN",
      "Value" :  { "Fn::GetAtt" : [ "GetHostNameFunction", "Arn" ]},
      "Export" : { "Name" : { "Fn::Sub" : "${AWS::StackName}-GetHostNameFunctionArn" }}
    },

    "GetDomainNameFunctionArn" : {
      "Description" : "The GetDomainName Lambda Function ARN",
      "Value" :  { "Fn::GetAtt" : [ "GetDomainNameFunction", "Arn" ]},
      "Export" : { "Name" : { "Fn::Sub" : "${AWS::StackName}-GetDomainNameFunctionArn" }}
    }
  }
}
