#!/bin/bash
#
# This script deletes All Stacks in the Identity Account in the correct order.
#
# This script is written in a format suitable for interactive demos,
# but can be run non-Iteractively and more quickly with the "-I" flag.
#

#  1. Initalize Environment

bindir=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
templatesdir=${bindir%/*}/templates
tmpdir=/var/tmp

step=0
speed_max=400
run_default=10
pause_default=2
next_default=5
create_default=15
create_attempts=20

interactive=1
speed=100
verbose=0
environment=${IDENTITY_NAME:-Identity}
region=us-east-1 # This should run only in us-east-1
account=${AWS_ACCOUNT_ALIAS:-irops}
user=${AWS_USER_NAME:-administrator}


#  2. Define functions

usage () {
    echo "Usage: ${BASH_SOURCE##*/} [-I [-s | -f]] [-v]"
    echo "                  [-E environment]"
    echo "                  [-a account] [-u user]"
    echo "  -I              non-interactive"
    echo "  -s              slower: increase pauses by 25%"
    echo "  -f              faster: reduce pauses by 25%"
    echo "  -v              verbose"
    echo "  -E environment  Environment Name (default: $environment)"
    echo "  -a account      Account (default: $account)"
    echo "  -u user         User (default: $user)"
}

run() {
    if [ -z $1 ] || (($1 % 25 != 0)); then
        ((seconds=run_default * speed / 100))
    else
        ((seconds=run_default * $1 * speed / 10000))
    fi
    if [ $interactive = 1 ]; then
        echo
        echo -n "Run? [Y/n/q]"
        read choice
        case "$choice" in
            "" | "y" | "Y" | "yes" | "Yes") choice=y ;;
            "n" | "N" | "no" | "No") choice=n ;;
             *) echo "cancelled"
                exit 2;;
        esac
    else
        echo
        echo -n -e "Waiting $(printf '%2d' $seconds) seconds..."
        while ((seconds > 0)); do
            if ((seconds < 10 || seconds % 10 == 0)); then
                echo -n -e "\rWaiting $(printf '%2d' $seconds) seconds..."
            fi
            sleep 1
            ((seconds--))
        done
        echo " Done"
        choice=y
    fi
}

pause() {
    if [ -z $1 ] || (($1 % 25 != 0)); then
        ((seconds=pause_default * speed / 100))
    else
        ((seconds=pause_default * $1 * speed / 10000))
    fi
    if [ $interactive = 1 ]; then
        echo "#"
        read pause
        echo -en "\033[1A\033[2K"    # undo newline from read
    else
        echo "#"
        sleep $seconds
    fi
}

next() {
    if [ -z $1 ] || (($1 % 25 != 0)); then
        ((seconds=next_default * speed / 100))
    else
        ((seconds=next_default * $1 * speed / 10000))
    fi
    if [ $interactive = 1 ]; then
        echo
        echo -n "Next? [Y/q]"
        read choice
        case "$choice" in
            "" | "y" | "Y" | "yes" | "Yes") choice=y ;;
             *) echo "cancelled"
                exit 2;;
        esac
    else
        echo
        echo -n -e "Waiting $(printf '%2d' $seconds) seconds..."
        while ((seconds > 0)); do
            if ((seconds < 10 || seconds % 10 == 0)); then
                echo -n -e "\rWaiting $(printf '%2d' $seconds) seconds..."
            fi
            sleep 1
            ((seconds--))
        done
        echo " Done"
        choice=y
    fi
}


#  3. Parse command line options

unset options
while getopts IsfvE:a:u:? arg; do
    case $arg in
    I)  interactive=0; options="$options -I";;
    s)  ((speed < speed_max)) && ((speed=speed+25)); options="$options -s";;
    f)  ((speed > 0)) && ((speed=speed-25)); options="$options -f";;
    v)  verbose=1; options="$options -v";;
    E)  environment="$OPTARG"; options="$options -E $OPTARG";;
    a)  account="$OPTARG"; options="$options -a $OPTARG";;
    u)  user="$OPTARG"; options="$options -u $OPTARG";;
    ?)  usage
        exit 1;;
    esac
done
options="${options# }"

shift $(($OPTIND - 1))


#  4. Validate environment

if [ -z $environment ]; then
    echo "-E environment missing!"
    echo "Could not automatically determine environment, and it was not specified as a parameter"
    exit 16
fi

s3_domain=s3.amazonaws.com

if [ -z $account ]; then
    echo "-a account missing!"
    echo "Could not automatically determine account, and it was not specified as a parameter"
    exit 52
fi

if [ -z $user ]; then
    echo "-u user missing!"
    echo "Could not automatically determine user, and it was not specified as a parameter"
    exit 54
fi

profile=$account-$user

if ! grep -s -q "\[profile $profile]" ~/.aws/config; then
    echo "Could not find ($account) Account ($user) User AWSCLI profile!"
    echo "Expected to find: [profile $profile] in ~/.aws/config"
    exit 60
fi

# Prevent certain environment variables from breaking commands
unset AWS_DEFAULT_PROFILE
unset AWS_CREDENTIAL_FILE
unset EC2_PRIVATE_KEY
unset EC2_CERT


#  5. Run All Scripts in Order

start=$(date +%s)

$bindir/identity-delete-standardroles-stack $options

$bindir/identity-delete-customusers-stack $options
$bindir/identity-delete-standardusers-stack $options

$bindir/identity-delete-standardgroups-stack $options

$bindir/identity-delete-standardmanagedpolicies-stack $options

end=$(date +%s)

echo
case $(uname) in
  Darwin)
    echo "(TOTAL time: $(date -u -r $((end-start)) +"%T"))";;
  *)
    echo "(TOTAL time: $(date -u -d @$((end-start)) +"%T"))";;
esac
