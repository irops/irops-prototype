{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Example-WindowsWebServer Template. This is an example of a Windows Web Server based application, showing installation and configuration via cfn-init.",

  "Metadata" : {
    "AWS::CloudFormation::Interface" : {
      "ParameterGroups" : [
        {
          "Label" : { "default" : "Stack Dependencies" },
          "Parameters" : [
            "VPCStackName",
            "CustomIdentifierFunctionsStackName",
            "StandardAMIFunctionsStackName",
            "StandardBucketsStackName",
            "StandardTopicsStackName"
          ]
        },
        {
          "Label" : { "default" : "Resource Dependencies" },
          "Parameters" : [
            "KeyName"
          ]
        },
        {
          "Label" : { "default" : "System Configuration" },
          "Parameters" : [
            "CompanyName",
            "SystemName"
          ]
        },
        {
          "Label" : { "default" : "Environment Configuration" },
          "Parameters" : [
            "EnvironmentType",
            "OSName"
          ]
        },
        {
          "Label" : { "default" : "Application Dependencies Configuration" },
          "Parameters" : [
            "SharedScriptFolder",
            "ScriptFolder"
          ]
        },
        {
          "Label" : { "default" : "Application Configuration" },
          "Parameters" : [
            "SharedApplicationFolder",
            "ApplicationFolder",
            "ApplicationObject",
            "ApplicationName",
            "ApplicationDomain",
            "ApplicationVersion",
            "LogRetention"
          ]
        },
        {
          "Label" : { "default" : "Security Configuration" },
          "Parameters" : [
            "UserNetworks",
            "AdministratorNetworks"
          ]
        }
      ],

      "ParameterLabels" : {
        "VPCStackName" : { "default" : "VPC Stack Name" },
        "CustomIdentifierFunctionsStackName" : { "default" : "CustomIdentifierFunctions Stack Name" },
        "StandardAMIFunctionsStackName" : { "default" : "StandardAMIFunctions Stack Name" },
        "StandardBucketsStackName" : { "default" : "StandardBuckets Stack Name" },
        "StandardTopicsStackName" : { "default" : "StandardTopics Stack Name" },
        "KeyName" : { "default" : "Key Name" },
        "CompanyName" : { "default" : "Company Name" },
        "SystemName" : { "default" : "System Name" },
        "EnvironmentType" : { "default" : "Environment Type" },
        "OSName" : { "default" : "Operating System Name" },
        "SharedScriptFolder" : { "default" : "Shared Script Folder" },
        "ScriptFolder" : { "default" : "Script Folder" },
        "SharedApplicationFolder" : { "default" : "Shared Application Folder" },
        "ApplicationFolder" : { "default" : "Application Folder" },
        "ApplicationObject" : { "default" : "Application Object" },
        "ApplicationName" : { "default" : "Application Name" },
        "ApplicationDomain" : { "default" : "Application Domain Name" },
        "ApplicationVersion" : { "default" : "Application Version" },
        "LogRetention" : { "default" : "Log Retention" },
        "UserNetworks" : { "default" : "User Networks" },
        "AdministratorNetworks" : { "default" : "Administrator Networks" }
      }
    }
  },

  "Parameters" : {
    "VPCStackName" : {
      "Description" : "Name of the CloudFormation Stack containing the VPC",
      "Type" : "String",
      "MinLength" : 8,
      "MaxLength" : 64,
      "Default" : "Production-VPC",
      "AllowedPattern" : "^[A-Z][-a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters and dashes."
    },

    "CustomIdentifierFunctionsStackName" : {
      "Description" : "Name of the CloudFormation Stack containing the Custom Identifier Functions",
      "Type" : "String",
      "MinLength" : 8,
      "MaxLength" : 64,
      "Default" : "CustomIdentifierFunctions",
      "AllowedPattern" : "^[A-Z][-a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters and dashes."
    },

    "StandardAMIFunctionsStackName" : {
      "Description" : "Name of the CloudFormation Stack containing the Standard AMI Functions",
      "Type" : "String",
      "MinLength" : 8,
      "MaxLength" : 64,
      "Default" : "StandardAMIFunctions",
      "AllowedPattern" : "^[A-Z][-a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters and dashes."
    },

    "StandardBucketsStackName" : {
      "Description" : "Name of the CloudFormation Stack containing Standard Buckets",
      "Type" : "String",
      "MinLength" : 8,
      "MaxLength" : 64,
      "Default" : "StandardBuckets",
      "AllowedPattern" : "^[A-Z][-a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters and dashes."
    },

    "StandardTopicsStackName" : {
      "Description" : "Name of the CloudFormation Stack containing Standard Topics",
      "Type" : "String",
      "MinLength" : 8,
      "MaxLength" : 64,
      "Default" : "StandardTopics",
      "AllowedPattern" : "^[A-Z][-a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters and dashes."
    },

    "KeyName" : {
      "Description" : "Name of an existing KeyPair to enable SSH access to the Instance",
      "Type" : "AWS::EC2::KeyPair::KeyName",
      "MaxLength" : 32,
      "Default" : "example",
      "AllowedPattern" : "(^$|^[_a-zA-Z0-9]*$)",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    },

    "CompanyName" : {
      "Description" : "Name of the Company associated with the Stack",
      "Type" : "String",
      "MinLength" : 2,
      "MaxLength" : 32,
      "Default" : "Travel",
      "AllowedPattern" : "^[A-Z][a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters."
    },

    "SystemName" : {
      "Description" : "Name of the System associated with the Stack",
      "Type" : "String",
      "MinLength" : 2,
      "MaxLength" : 32,
      "Default" : "IROPS",
      "AllowedPattern" : "^[A-Z][a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters."
    },

    "EnvironmentType" : {
      "Description" : "Type of the Environment to build. Used to select size-related options in Mappings",
      "Type" : "String",
      "Default" : "small",
      "AllowedValues" : [ "micro", "small", "medium", "large", "xlarge", "mlarge", "mxlarge", "m2xlarge", "clarge", "cxlarge", "c2xlarge" ],
      "ConstraintDescription" : "must be micro, small, medium, large, xlarge, mlarge, mxlarge, m2xlarge, clarge, cxlarge or c2xlarge."
    },

    "OSName" : {
      "Description" : "The Operating System to use for Instances",
      "Type" : "String",
      "Default" : "Windows Server 2012 R2",
      "AllowedValues" : [ "Windows Server 2012 R2", "Windows Server 2016" ],
      "ConstraintDescription" : "must be \"Windows Server 2012 R2\" or \"Windows Server 2016\"."
    },

    "SharedScriptFolder" : {
      "Description" : "Folder within the S3 Scripts bucket containing Shared Scripts deployed by this Template",
      "Type" : "String",
      "MinLength" : 2,
      "MaxLength" : 32,
      "Default" : "Windows",
      "AllowedPattern" : "^[A-Z][a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters."
    },

    "ScriptFolder" : {
      "Description" : "Folder within the S3 Scripts bucket containing Scripts deployed by this Template",
      "Type" : "String",
      "MinLength" : 2,
      "MaxLength" : 32,
      "Default" : "WindowsWebServer",
      "AllowedPattern" : "^[A-Z][a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters."
    },

    "SharedApplicationFolder" : {
      "Description" : "Folder within the S3 Applications bucket containing Shared Applications deployed by this Template",
      "Type" : "String",
      "MinLength" : 2,
      "MaxLength" : 32,
      "Default" : "Windows",
      "AllowedPattern" : "^[A-Z][a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters."
    },

    "ApplicationFolder" : {
      "Description" : "Folder within the S3 Applications bucket containing Applications deployed by this Template",
      "Type" : "String",
      "MinLength" : 2,
      "MaxLength" : 32,
      "Default" : "WindowsWebServer",
      "AllowedPattern" : "^[A-Z][a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters."
    },

    "ApplicationObject" : {
      "Description" : "Object within the S3 bucket and folder containing the Application",
      "Type" : "String",
      "MaxLength" : 64,
      "Default" : "",
      "AllowedPattern" : "(^$|^[-_.a-zA-Z0-9]*$)",
      "ConstraintDescription" : "must be a valid filename, not containing slashes."
    },

    "ApplicationName" : {
      "Description" : "Name of the Application associated with the Stack",
      "Type" : "String",
      "MinLength" : 2,
      "MaxLength" : 32,
      "Default" : "WindowsWebServer",
      "AllowedPattern" : "^[A-Z][a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters."
    },

    "ApplicationDomain" : {
      "Description" : "DNS Name of the Application associated with the Stack",
      "Type" : "String",
      "MaxLength" : 16,
      "Default" : "",
      "AllowedPattern" : "(^$|^[a-z][-a-z0-9]*$)",
      "ConstraintDescription" : "must begin with a lower case letter and contain only lower case letters, numbers and dashes."
    },

    "ApplicationVersion" : {
      "Description" : "Version of the Application",
      "Type" : "String",
      "MinLength" : 5,
      "MaxLength" : 32,
      "Default" : "1.0.0",
      "AllowedPattern" : "^[0-9]*.[0-9]*.[0-9]*(-[a-zA-Z0-9][-a-zA-Z0-9]*)?$",
      "ConstraintDescription" : "must follow semantic versioning conventions."
    },

    "LogRetention" : {
      "Description" : "Number of days to retain CloudWatch Log Events (0 disables use of CloudWatch Logs)",
      "Type" : "Number",
      "Default" : 14,
      "AllowedValues" : [ 0, 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653 ],
      "ConstraintDescription" : "must be: 0 (disabled), 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827 or 3653."
    },

    "UserNetworks" : {
      "Description" : "Networks that can use the Application",
      "Type" : "String",
      "Default" : "NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE",
      "ConstraintDescription" : "must be a comma-separated list of 8 values, each an IP CIDR range of the form x.x.x.x/x or the word NONE."
    },

    "AdministratorNetworks" : {
      "Description" : "Networks that can administer the Application",
      "Type" : "String",
      "Default" : "NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE",
      "ConstraintDescription" : "must be a comma-separated list of 8 values, each an IP CIDR range of the form x.x.x.x/x or the word NONE."
    }
  },

  "Mappings" : {
    "InstanceTypeMap" : {
      "Web" : { "micro" : "t2.micro", "small" : "t2.small", "medium" : "t2.medium", "large" : "t2.large", "xlarge" : "t2.xlarge",
                "mlarge" : "m4.large", "mxlarge" : "m4.xlarge", "m2xlarge" : "m4.2xlarge",
                "clarge" : "c4.large", "cxlarge" : "c4.xlarge", "c2xlarge" : "c4.2xlarge" }
    }
  },

  "Conditions" : {
    "ConfigureGlobalS3" : { "Fn::Equals" : [{ "Ref" : "AWS::Region" }, "us-east-1" ]},
    "InstallApplication" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Ref" : "ApplicationObject" }, "" ]}]},
    "ConfigureDomainName" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Ref" : "ApplicationDomain" }, "" ]}]},
    "ConfigureLogs" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Ref" : "LogRetention" }, "0" ]}]},
    "ConfigureUserNetwork0" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Fn::Select" : [ "0", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}, "NONE" ]}]},
    "ConfigureUserNetwork1" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Fn::Select" : [ "1", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}, "NONE" ]}]},
    "ConfigureUserNetwork2" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Fn::Select" : [ "2", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}, "NONE" ]}]},
    "ConfigureUserNetwork3" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Fn::Select" : [ "3", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}, "NONE" ]}]},
    "ConfigureUserNetwork4" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Fn::Select" : [ "4", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}, "NONE" ]}]},
    "ConfigureUserNetwork5" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Fn::Select" : [ "5", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}, "NONE" ]}]},
    "ConfigureUserNetwork6" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Fn::Select" : [ "6", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}, "NONE" ]}]},
    "ConfigureUserNetwork7" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Fn::Select" : [ "7", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}, "NONE" ]}]},
    "ConfigureAdministratorNetwork0" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Fn::Select" : [ "0", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}, "NONE" ]}]},
    "ConfigureAdministratorNetwork1" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Fn::Select" : [ "1", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}, "NONE" ]}]},
    "ConfigureAdministratorNetwork2" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Fn::Select" : [ "2", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}, "NONE" ]}]},
    "ConfigureAdministratorNetwork3" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Fn::Select" : [ "3", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}, "NONE" ]}]},
    "ConfigureAdministratorNetwork4" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Fn::Select" : [ "4", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}, "NONE" ]}]},
    "ConfigureAdministratorNetwork5" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Fn::Select" : [ "5", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}, "NONE" ]}]},
    "ConfigureAdministratorNetwork6" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Fn::Select" : [ "6", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}, "NONE" ]}]},
    "ConfigureAdministratorNetwork7" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Fn::Select" : [ "7", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}, "NONE" ]}]}
  },

  "Resources" : {
    "GetHostName" : {
      "Type" : "Custom::GetHostName",
      "Properties" : {
        "ServiceToken" : { "Fn::ImportValue" : { "Fn::Sub" : "${CustomIdentifierFunctionsStackName}-GetHostNameFunctionArn" }},
        "CompanyName" : { "Ref" : "CompanyName" },
        "LocationName" : { "Ref": "AWS::Region" },
        "EnvironmentName" : { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }},
        "ApplicationName" : { "Ref" : "ApplicationName" }
      }
    },

    "GetWindowsImageId" : {
      "Type" : "Custom::GetWindowsImageId",
      "Properties" : {
        "ServiceToken" : { "Fn::ImportValue" : { "Fn::Sub" : "${StandardAMIFunctionsStackName}-GetWindowsImageIdFunctionArn" }},
        "Region" : { "Ref" : "AWS::Region" },
        "OSName" : { "Ref" : "OSName" }
      }
    },

    "Role" : {
      "Type" : "AWS::IAM::Role",
      "Properties" : {
        "Path" : "/",
        "AssumeRolePolicyDocument" : {
          "Version" : "2012-10-17",
          "Statement" : [{
            "Effect" : "Allow",
            "Principal" : { "Service" : [ "ec2.amazonaws.com" ]},
            "Action" : [ "sts:AssumeRole" ]
          }]
        },
        "ManagedPolicyArns" : [ "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM" ]
      }
    },

    "DownloadScriptFromS3Policy" : {
      "Type" : "AWS::IAM::Policy",
      "Properties" : {
        "PolicyName" : "DownloadScriptFromS3Policy",
        "PolicyDocument" : {
          "Version" : "2012-10-17",
          "Statement" : [{
            "Effect" : "Allow",
            "Action" : [
              "s3:GetObject"
            ],
            "Resource" : [
              { "Fn::Join" : [ "", [ "arn:aws:s3:::",  { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ScriptsBucket" }}, "/", { "Ref" : "SharedScriptFolder" }, "/*" ]]},
              { "Fn::Join" : [ "", [ "arn:aws:s3:::",  { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ScriptsBucket" }}, "/", { "Ref" : "ScriptFolder" }, "/*" ]]}
            ]
          }]
        },
        "Roles" : [{ "Ref" : "Role" }]
      }
    },

    "DownloadApplicationFromS3Policy" : {
      "Type" : "AWS::IAM::Policy",
      "Properties" : {
        "PolicyName" : "DownloadApplicationFromS3Policy",
        "PolicyDocument" : {
          "Version" : "2012-10-17",
          "Statement" : [{
            "Effect" : "Allow",
            "Action" : [
              "s3:GetObject"
            ],
            "Resource" : [
              { "Fn::Join" : [ "", [ "arn:aws:s3:::",  { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ApplicationsBucket" }}, "/", { "Ref" : "SharedApplicationFolder" }, "/*" ]]},
              { "Fn::Join" : [ "", [ "arn:aws:s3:::",  { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ApplicationsBucket" }}, "/", { "Ref" : "ApplicationFolder" }, "/*" ]]}
            ]
          }]
        },
        "Roles" : [{ "Ref" : "Role" }]
      },
      "Condition" : "InstallApplication"
    },

    "LogMonitoringPolicy" : {
      "Type" : "AWS::IAM::Policy",
      "Properties" : {
        "PolicyName" : "LogMonitoringPolicy",
        "PolicyDocument" : {
          "Version" : "2012-10-17",
          "Statement" : [{
            "Effect" : "Allow",
            "Action" : [
              "logs:CreateLogGroup",
              "logs:CreateLogStream",
              "logs:PutLogEvents",
              "logs:DescribeLogStreams"
            ],
            "Resource" : [
              "arn:aws:logs:*:*:*"
            ]
          }]
        },
        "Roles" : [{ "Ref" : "Role" }]
      },
      "Condition" : "ConfigureLogs"
    },

    "LogGroup" : {
      "Type" : "AWS::Logs::LogGroup",
      "Properties" : {
        "RetentionInDays" : { "Ref" : "LogRetention" }
      },
      "Condition" : "ConfigureLogs"
    },

    "404MetricFilter" : {
      "Type" : "AWS::Logs::MetricFilter",
      "Properties" : {
        "LogGroupName" : { "Ref" : "LogGroup" },
        "FilterPattern" : "[ip, identity, user_id, timestamp, request, status_code = 404, size, ...]",
        "MetricTransformations" : [{
          "MetricNamespace" : { "Fn::Join" : [ "", [ { "Ref" : "SystemName" }, "/", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }}, "-", { "Ref" : "ApplicationName" }]]},
          "MetricName" : "404Count",
          "MetricValue" : "1"
        }]
      },
      "Condition" : "ConfigureLogs"
    },

    "BytesTransferredMetricFilter" : {
      "Type" : "AWS::Logs::MetricFilter",
      "Properties" : {
        "LogGroupName" : { "Ref" : "LogGroup" },
        "FilterPattern" : "[ip, identity, user_id, timestamp, request, status_code, size, ...]",
        "MetricTransformations" : [{
          "MetricNamespace" : { "Fn::Join" : [ "", [ { "Ref" : "SystemName" }, "/", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }}, "-", { "Ref" : "ApplicationName" }]]},
          "MetricName" : "BytesTransferred",
          "MetricValue" : "$size"
        }]
      },
      "Condition" : "ConfigureLogs"
    },

    "404Alarm" : {
      "Type" : "AWS::CloudWatch::Alarm",
      "Properties" : {
        "AlarmDescription" : "The number of 404s is greater than 5 over 1 minute",
        "AlarmActions" : [
          { "Fn::ImportValue" : { "Fn::Sub" : "${StandardTopicsStackName}-AlarmsTopic" }}
        ],
        "Namespace" : { "Fn::Join" : [ "", [ { "Ref" : "SystemName" }, "/", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }}, "-", { "Ref" : "ApplicationName" }]]},
        "MetricName" : "404Count",
        "Statistic" : "Sum",
        "Period" : "60",
        "EvaluationPeriods" : "1",
        "Threshold" : "5",
        "ComparisonOperator" : "GreaterThanThreshold"
      },
      "Condition" : "ConfigureLogs"
    },

    "BandwidthAlarm" : {
      "Type" : "AWS::CloudWatch::Alarm",
      "Properties" : {
        "AlarmDescription" : "The average volume of traffic is greater 1024 KB over 1 minute",
        "AlarmActions" : [
          { "Fn::ImportValue" : { "Fn::Sub" : "${StandardTopicsStackName}-AlarmsTopic" }}
        ],
        "Namespace" : { "Fn::Join" : [ "", [ { "Ref" : "SystemName" }, "/", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }}, "-", { "Ref" : "ApplicationName" }]]},
        "MetricName" : "BytesTransferred",
        "Statistic" : "Average",
        "Period" : "60",
        "EvaluationPeriods" : "1",
        "Threshold" : "1500000000",
        "ComparisonOperator" : "GreaterThanThreshold"
      },
      "Condition" : "ConfigureLogs"
    },

    "InstanceSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : { "Fn::Join" : [ "-", [ { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }}, { "Ref" : "ApplicationName" }, "InstanceSecurityGroup" ]]},
        "VpcId" : { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPC" }},
        "SecurityGroupIngress" : [
          { "Fn::If" : [ "ConfigureUserNetwork0", { "IpProtocol" : "icmp", "FromPort" :     "0", "ToPort" :     "0", "CidrIp" : { "Fn::Select" : [ "0", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork0", { "IpProtocol" : "icmp", "FromPort" :     "3", "ToPort" :     "3", "CidrIp" : { "Fn::Select" : [ "0", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork0", { "IpProtocol" : "icmp", "FromPort" :     "8", "ToPort" :     "8", "CidrIp" : { "Fn::Select" : [ "0", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork0", { "IpProtocol" : "icmp", "FromPort" :    "11", "ToPort" :    "11", "CidrIp" : { "Fn::Select" : [ "0", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork0", { "IpProtocol" : "tcp",  "FromPort" :    "80", "ToPort" :    "80", "CidrIp" : { "Fn::Select" : [ "0", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork0", { "IpProtocol" : "tcp",  "FromPort" :   "443", "ToPort" :   "443", "CidrIp" : { "Fn::Select" : [ "0", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork1", { "IpProtocol" : "icmp", "FromPort" :     "0", "ToPort" :     "0", "CidrIp" : { "Fn::Select" : [ "1", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork1", { "IpProtocol" : "icmp", "FromPort" :     "3", "ToPort" :     "3", "CidrIp" : { "Fn::Select" : [ "1", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork1", { "IpProtocol" : "icmp", "FromPort" :     "8", "ToPort" :     "8", "CidrIp" : { "Fn::Select" : [ "1", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork1", { "IpProtocol" : "icmp", "FromPort" :    "11", "ToPort" :    "11", "CidrIp" : { "Fn::Select" : [ "1", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork1", { "IpProtocol" : "tcp",  "FromPort" :    "80", "ToPort" :    "80", "CidrIp" : { "Fn::Select" : [ "1", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork1", { "IpProtocol" : "tcp",  "FromPort" :   "443", "ToPort" :   "443", "CidrIp" : { "Fn::Select" : [ "1", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork2", { "IpProtocol" : "icmp", "FromPort" :     "0", "ToPort" :     "0", "CidrIp" : { "Fn::Select" : [ "2", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork2", { "IpProtocol" : "icmp", "FromPort" :     "3", "ToPort" :     "3", "CidrIp" : { "Fn::Select" : [ "2", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork2", { "IpProtocol" : "icmp", "FromPort" :     "8", "ToPort" :     "8", "CidrIp" : { "Fn::Select" : [ "2", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork2", { "IpProtocol" : "icmp", "FromPort" :    "11", "ToPort" :    "11", "CidrIp" : { "Fn::Select" : [ "2", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork2", { "IpProtocol" : "tcp",  "FromPort" :    "80", "ToPort" :    "80", "CidrIp" : { "Fn::Select" : [ "2", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork2", { "IpProtocol" : "tcp",  "FromPort" :   "443", "ToPort" :   "443", "CidrIp" : { "Fn::Select" : [ "2", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork3", { "IpProtocol" : "icmp", "FromPort" :     "0", "ToPort" :     "0", "CidrIp" : { "Fn::Select" : [ "3", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork3", { "IpProtocol" : "icmp", "FromPort" :     "3", "ToPort" :     "3", "CidrIp" : { "Fn::Select" : [ "3", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork3", { "IpProtocol" : "icmp", "FromPort" :     "8", "ToPort" :     "8", "CidrIp" : { "Fn::Select" : [ "3", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork3", { "IpProtocol" : "icmp", "FromPort" :    "11", "ToPort" :    "11", "CidrIp" : { "Fn::Select" : [ "3", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork3", { "IpProtocol" : "tcp",  "FromPort" :    "80", "ToPort" :    "80", "CidrIp" : { "Fn::Select" : [ "3", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork3", { "IpProtocol" : "tcp",  "FromPort" :   "443", "ToPort" :   "443", "CidrIp" : { "Fn::Select" : [ "3", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork4", { "IpProtocol" : "icmp", "FromPort" :     "0", "ToPort" :     "0", "CidrIp" : { "Fn::Select" : [ "4", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork4", { "IpProtocol" : "icmp", "FromPort" :     "3", "ToPort" :     "3", "CidrIp" : { "Fn::Select" : [ "4", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork4", { "IpProtocol" : "icmp", "FromPort" :     "8", "ToPort" :     "8", "CidrIp" : { "Fn::Select" : [ "4", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork4", { "IpProtocol" : "icmp", "FromPort" :    "11", "ToPort" :    "11", "CidrIp" : { "Fn::Select" : [ "4", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork4", { "IpProtocol" : "tcp",  "FromPort" :    "80", "ToPort" :    "80", "CidrIp" : { "Fn::Select" : [ "4", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork4", { "IpProtocol" : "tcp",  "FromPort" :   "443", "ToPort" :   "443", "CidrIp" : { "Fn::Select" : [ "4", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork5", { "IpProtocol" : "icmp", "FromPort" :     "0", "ToPort" :     "0", "CidrIp" : { "Fn::Select" : [ "5", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork5", { "IpProtocol" : "icmp", "FromPort" :     "3", "ToPort" :     "3", "CidrIp" : { "Fn::Select" : [ "5", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork5", { "IpProtocol" : "icmp", "FromPort" :     "8", "ToPort" :     "8", "CidrIp" : { "Fn::Select" : [ "5", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork5", { "IpProtocol" : "icmp", "FromPort" :    "11", "ToPort" :    "11", "CidrIp" : { "Fn::Select" : [ "5", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork5", { "IpProtocol" : "tcp",  "FromPort" :    "80", "ToPort" :    "80", "CidrIp" : { "Fn::Select" : [ "5", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork5", { "IpProtocol" : "tcp",  "FromPort" :   "443", "ToPort" :   "443", "CidrIp" : { "Fn::Select" : [ "5", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork6", { "IpProtocol" : "icmp", "FromPort" :     "0", "ToPort" :     "0", "CidrIp" : { "Fn::Select" : [ "6", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork6", { "IpProtocol" : "icmp", "FromPort" :     "3", "ToPort" :     "3", "CidrIp" : { "Fn::Select" : [ "6", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork6", { "IpProtocol" : "icmp", "FromPort" :     "8", "ToPort" :     "8", "CidrIp" : { "Fn::Select" : [ "6", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork6", { "IpProtocol" : "icmp", "FromPort" :    "11", "ToPort" :    "11", "CidrIp" : { "Fn::Select" : [ "6", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork6", { "IpProtocol" : "tcp",  "FromPort" :    "80", "ToPort" :    "80", "CidrIp" : { "Fn::Select" : [ "6", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork6", { "IpProtocol" : "tcp",  "FromPort" :   "443", "ToPort" :   "443", "CidrIp" : { "Fn::Select" : [ "6", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork7", { "IpProtocol" : "icmp", "FromPort" :     "0", "ToPort" :     "0", "CidrIp" : { "Fn::Select" : [ "7", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork7", { "IpProtocol" : "icmp", "FromPort" :     "3", "ToPort" :     "3", "CidrIp" : { "Fn::Select" : [ "7", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork7", { "IpProtocol" : "icmp", "FromPort" :     "8", "ToPort" :     "8", "CidrIp" : { "Fn::Select" : [ "7", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork7", { "IpProtocol" : "icmp", "FromPort" :    "11", "ToPort" :    "11", "CidrIp" : { "Fn::Select" : [ "7", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork7", { "IpProtocol" : "tcp",  "FromPort" :    "80", "ToPort" :    "80", "CidrIp" : { "Fn::Select" : [ "7", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureUserNetwork7", { "IpProtocol" : "tcp",  "FromPort" :   "443", "ToPort" :   "443", "CidrIp" : { "Fn::Select" : [ "7", { "Fn::Split" : [ ",", { "Ref" : "UserNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureAdministratorNetwork0", { "IpProtocol" : "icmp", "FromPort" :     "0", "ToPort" :     "0", "CidrIp" : { "Fn::Select" : [ "0", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureAdministratorNetwork0", { "IpProtocol" : "icmp", "FromPort" :     "3", "ToPort" :     "3", "CidrIp" : { "Fn::Select" : [ "0", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureAdministratorNetwork0", { "IpProtocol" : "icmp", "FromPort" :     "8", "ToPort" :     "8", "CidrIp" : { "Fn::Select" : [ "0", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureAdministratorNetwork0", { "IpProtocol" : "icmp", "FromPort" :    "11", "ToPort" :    "11", "CidrIp" : { "Fn::Select" : [ "0", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureAdministratorNetwork0", { "IpProtocol" : "tcp",  "FromPort" :    "80", "ToPort" :    "80", "CidrIp" : { "Fn::Select" : [ "0", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureAdministratorNetwork0", { "IpProtocol" : "tcp",  "FromPort" :   "443", "ToPort" :   "443", "CidrIp" : { "Fn::Select" : [ "0", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureAdministratorNetwork0", { "IpProtocol" : "tcp",  "FromPort" :    "22", "ToPort" :    "22", "CidrIp" : { "Fn::Select" : [ "0", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureAdministratorNetwork1", { "IpProtocol" : "icmp", "FromPort" :     "0", "ToPort" :     "0", "CidrIp" : { "Fn::Select" : [ "1", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureAdministratorNetwork1", { "IpProtocol" : "icmp", "FromPort" :     "3", "ToPort" :     "3", "CidrIp" : { "Fn::Select" : [ "1", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureAdministratorNetwork1", { "IpProtocol" : "icmp", "FromPort" :     "8", "ToPort" :     "8", "CidrIp" : { "Fn::Select" : [ "1", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureAdministratorNetwork1", { "IpProtocol" : "icmp", "FromPort" :    "11", "ToPort" :    "11", "CidrIp" : { "Fn::Select" : [ "1", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureAdministratorNetwork1", { "IpProtocol" : "tcp",  "FromPort" :    "80", "ToPort" :    "80", "CidrIp" : { "Fn::Select" : [ "1", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureAdministratorNetwork1", { "IpProtocol" : "tcp",  "FromPort" :   "443", "ToPort" :   "443", "CidrIp" : { "Fn::Select" : [ "1", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureAdministratorNetwork1", { "IpProtocol" : "tcp",  "FromPort" :    "22", "ToPort" :    "22", "CidrIp" : { "Fn::Select" : [ "1", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureAdministratorNetwork2", { "IpProtocol" : "icmp", "FromPort" :     "0", "ToPort" :     "0", "CidrIp" : { "Fn::Select" : [ "2", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureAdministratorNetwork2", { "IpProtocol" : "icmp", "FromPort" :     "3", "ToPort" :     "3", "CidrIp" : { "Fn::Select" : [ "2", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureAdministratorNetwork2", { "IpProtocol" : "icmp", "FromPort" :     "8", "ToPort" :     "8", "CidrIp" : { "Fn::Select" : [ "2", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureAdministratorNetwork2", { "IpProtocol" : "icmp", "FromPort" :    "11", "ToPort" :    "11", "CidrIp" : { "Fn::Select" : [ "2", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureAdministratorNetwork2", { "IpProtocol" : "tcp",  "FromPort" :    "80", "ToPort" :    "80", "CidrIp" : { "Fn::Select" : [ "2", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureAdministratorNetwork2", { "IpProtocol" : "tcp",  "FromPort" :   "443", "ToPort" :   "443", "CidrIp" : { "Fn::Select" : [ "2", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureAdministratorNetwork2", { "IpProtocol" : "tcp",  "FromPort" :    "22", "ToPort" :    "22", "CidrIp" : { "Fn::Select" : [ "2", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureAdministratorNetwork3", { "IpProtocol" : "icmp", "FromPort" :     "0", "ToPort" :     "0", "CidrIp" : { "Fn::Select" : [ "3", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureAdministratorNetwork3", { "IpProtocol" : "icmp", "FromPort" :     "3", "ToPort" :     "3", "CidrIp" : { "Fn::Select" : [ "3", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureAdministratorNetwork3", { "IpProtocol" : "icmp", "FromPort" :     "8", "ToPort" :     "8", "CidrIp" : { "Fn::Select" : [ "3", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureAdministratorNetwork3", { "IpProtocol" : "icmp", "FromPort" :    "11", "ToPort" :    "11", "CidrIp" : { "Fn::Select" : [ "3", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureAdministratorNetwork3", { "IpProtocol" : "tcp",  "FromPort" :    "80", "ToPort" :    "80", "CidrIp" : { "Fn::Select" : [ "3", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureAdministratorNetwork3", { "IpProtocol" : "tcp",  "FromPort" :   "443", "ToPort" :   "443", "CidrIp" : { "Fn::Select" : [ "3", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureAdministratorNetwork3", { "IpProtocol" : "tcp",  "FromPort" :    "22", "ToPort" :    "22", "CidrIp" : { "Fn::Select" : [ "3", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureAdministratorNetwork4", { "IpProtocol" : "icmp", "FromPort" :     "0", "ToPort" :     "0", "CidrIp" : { "Fn::Select" : [ "4", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureAdministratorNetwork4", { "IpProtocol" : "icmp", "FromPort" :     "3", "ToPort" :     "3", "CidrIp" : { "Fn::Select" : [ "4", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureAdministratorNetwork4", { "IpProtocol" : "icmp", "FromPort" :     "8", "ToPort" :     "8", "CidrIp" : { "Fn::Select" : [ "4", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureAdministratorNetwork4", { "IpProtocol" : "icmp", "FromPort" :    "11", "ToPort" :    "11", "CidrIp" : { "Fn::Select" : [ "4", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureAdministratorNetwork4", { "IpProtocol" : "tcp",  "FromPort" :    "80", "ToPort" :    "80", "CidrIp" : { "Fn::Select" : [ "4", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureAdministratorNetwork4", { "IpProtocol" : "tcp",  "FromPort" :   "443", "ToPort" :   "443", "CidrIp" : { "Fn::Select" : [ "4", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureAdministratorNetwork4", { "IpProtocol" : "tcp",  "FromPort" :    "22", "ToPort" :    "22", "CidrIp" : { "Fn::Select" : [ "4", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureAdministratorNetwork5", { "IpProtocol" : "icmp", "FromPort" :     "0", "ToPort" :     "0", "CidrIp" : { "Fn::Select" : [ "5", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureAdministratorNetwork5", { "IpProtocol" : "icmp", "FromPort" :     "3", "ToPort" :     "3", "CidrIp" : { "Fn::Select" : [ "5", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureAdministratorNetwork5", { "IpProtocol" : "icmp", "FromPort" :     "8", "ToPort" :     "8", "CidrIp" : { "Fn::Select" : [ "5", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureAdministratorNetwork5", { "IpProtocol" : "icmp", "FromPort" :    "11", "ToPort" :    "11", "CidrIp" : { "Fn::Select" : [ "5", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureAdministratorNetwork5", { "IpProtocol" : "tcp",  "FromPort" :    "80", "ToPort" :    "80", "CidrIp" : { "Fn::Select" : [ "5", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureAdministratorNetwork5", { "IpProtocol" : "tcp",  "FromPort" :   "443", "ToPort" :   "443", "CidrIp" : { "Fn::Select" : [ "5", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureAdministratorNetwork5", { "IpProtocol" : "tcp",  "FromPort" :    "22", "ToPort" :    "22", "CidrIp" : { "Fn::Select" : [ "5", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureAdministratorNetwork6", { "IpProtocol" : "icmp", "FromPort" :     "0", "ToPort" :     "0", "CidrIp" : { "Fn::Select" : [ "6", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureAdministratorNetwork6", { "IpProtocol" : "icmp", "FromPort" :     "3", "ToPort" :     "3", "CidrIp" : { "Fn::Select" : [ "6", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureAdministratorNetwork6", { "IpProtocol" : "icmp", "FromPort" :     "8", "ToPort" :     "8", "CidrIp" : { "Fn::Select" : [ "6", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureAdministratorNetwork6", { "IpProtocol" : "icmp", "FromPort" :    "11", "ToPort" :    "11", "CidrIp" : { "Fn::Select" : [ "6", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureAdministratorNetwork6", { "IpProtocol" : "tcp",  "FromPort" :    "80", "ToPort" :    "80", "CidrIp" : { "Fn::Select" : [ "6", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureAdministratorNetwork6", { "IpProtocol" : "tcp",  "FromPort" :   "443", "ToPort" :   "443", "CidrIp" : { "Fn::Select" : [ "6", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureAdministratorNetwork6", { "IpProtocol" : "tcp",  "FromPort" :    "22", "ToPort" :    "22", "CidrIp" : { "Fn::Select" : [ "6", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureAdministratorNetwork7", { "IpProtocol" : "icmp", "FromPort" :     "0", "ToPort" :     "0", "CidrIp" : { "Fn::Select" : [ "7", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureAdministratorNetwork7", { "IpProtocol" : "icmp", "FromPort" :     "3", "ToPort" :     "3", "CidrIp" : { "Fn::Select" : [ "7", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureAdministratorNetwork7", { "IpProtocol" : "icmp", "FromPort" :     "8", "ToPort" :     "8", "CidrIp" : { "Fn::Select" : [ "7", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureAdministratorNetwork7", { "IpProtocol" : "icmp", "FromPort" :    "11", "ToPort" :    "11", "CidrIp" : { "Fn::Select" : [ "7", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureAdministratorNetwork7", { "IpProtocol" : "tcp",  "FromPort" :    "80", "ToPort" :    "80", "CidrIp" : { "Fn::Select" : [ "7", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureAdministratorNetwork7", { "IpProtocol" : "tcp",  "FromPort" :   "443", "ToPort" :   "443", "CidrIp" : { "Fn::Select" : [ "7", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigureAdministratorNetwork7", { "IpProtocol" : "tcp",  "FromPort" :    "22", "ToPort" :    "22", "CidrIp" : { "Fn::Select" : [ "7", { "Fn::Split" : [ ",", { "Ref" : "AdministratorNetworks" }]}]}}, { "Ref" : "AWS::NoValue" }]}
        ],
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }}, { "Ref" : "ApplicationName" }, "InstanceSecurityGroup" ]]}}
        ]
      }
    },

    "InstanceProfile" : {
      "Type" : "AWS::IAM::InstanceProfile",
      "Properties" : {
        "Path" : "/",
        "Roles" : [{ "Ref" : "Role" }]
      }
    },

    "Instance" : {
      "Type" : "AWS::EC2::Instance",
      "Metadata" : {
        "AWS::CloudFormation::Authentication" : {
          "S3Credentials" : {
            "type" : "S3",
            "roleName" : { "Ref" : "Role" },
            "buckets" : [
              { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ExamplesBucket" }}
            ]
          }
        },
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "All" : [
              { "Fn::If" : [ "ConfigureLogs", "ConfigureLogs", { "Ref": "AWS::NoValue" }]},
              "ConfigureOS",
              "ConfigureCFN",
              "InstallWebServer",
              "InstallAwsCli",
              "InstallAtomEditor",
              { "Fn::If" : [ "InstallApplication", "InstallApplication", "ConfigureApplication" ]}
            ]
          },
          "ConfigureLogs" : {
            "files" : {
              "C:\\Program Files\\Amazon\\SSM\\Plugins\\awsCloudWatch\\AWS.EC2.Windows.CloudWatch.json" : {
                "content" : { "Fn::Join" : [ "", [
                  "{",
                  "  \"IsEnabled\" : true,",
                  "  \"EngineConfiguration\" : {",
                  "    \"PollInterval\" : \"00:00:10\",",
                  "    \"Components\" : [{",
                  "      \"Id\" : \"ApplicationEventLog\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.EventLog.EventLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"LogName\" : \"Application\",",
                  "        \"Levels\" : \"7\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"SystemEventLog\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.EventLog.EventLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"LogName\" : \"System\",",
                  "        \"Levels\" : \"7\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"SecurityEventLog\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.EventLog.EventLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"LogName\" : \"Security\",",
                  "        \"Levels\" : \"7\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"EC2ConfigLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"LogDirectoryPath\": \"C:\\\\Program Files\\\\Amazon\\\\Ec2ConfigService\\\\Logs\",",
                  "        \"TimestampFormat\": \"yyyy-MM-ddTHH:mm:ss.fffZ:\",",
                  "        \"Encoding\": \"ASCII\",",
                  "        \"Filter\": \"EC2ConfigLog.txt\",",
                  "        \"CultureName\": \"en-US\",",
                  "        \"TimeZoneKind\": \"UTC\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CfnInitLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"LogDirectoryPath\": \"C:\\\\cfn\\\\log\",",
                  "        \"TimestampFormat\": \"yyyy-MM-dd HH:mm:ss,fff\",",
                  "        \"Encoding\": \"ASCII\",",
                  "        \"Filter\": \"cfn-init.log\",",
                  "        \"CultureName\": \"en-US\",",
                  "        \"TimeZoneKind\": \"Local\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"IISLogs\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"LogDirectoryPath\" : \"C:\\\\inetpub\\\\logs\\\\LogFiles\\\\W3SVC1\",",
                  "        \"TimestampFormat\" : \"yyyy-MM-dd HH:mm:ss\",",
                  "        \"Encoding\" : \"UTF-8\",",
                  "        \"Filter\" : \"\",",
                  "        \"CultureName\" : \"en-US\",",
                  "        \"TimeZoneKind\" : \"UTC\",",
                  "        \"LineCount\" : \"3\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"MemoryPerformanceCounter\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.PerformanceCounterComponent.PerformanceCounterInputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"CategoryName\" : \"Memory\",",
                  "        \"CounterName\" : \"Available MBytes\",",
                  "        \"InstanceName\" : \"\",",
                  "        \"MetricName\" : \"Memory\",",
                  "        \"Unit\" : \"Megabytes\",",
                  "        \"DimensionName\" : \"\",",
                  "        \"DimensionValue\" : \"\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchApplicationEventLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"Web/{instance_id}/ApplicationEventLog\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchSystemEventLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"Web/{instance_id}/SystemEventLog\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchSecurityEventLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"Web/{instance_id}/SecurityEventLog\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchEC2ConfigLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"Web/{instance_id}/EC2ConfigLog\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchCfnInitLog\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"Web/{instance_id}/CfnInitLog\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\": \"CloudWatchIISLogs\",",
                  "      \"FullName\": \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\": {",
                  "        \"AccessKey\": \"\",",
                  "        \"SecretKey\": \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                           { "Fn::If" : [ "ConfigureLogs", { "Fn::Sub" : "        \"LogGroup\": \"${LogGroup}\","}, { "Ref" : "AWS::NoValue" }]},
                  "        \"LogStream\": \"Web/{instance_id}/IISLogs\"",
                  "      }",
                  "    },",
                  "    {",
                  "      \"Id\" : \"CloudWatch\",",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.CloudWatch.CloudWatchOutputComponent,AWS.EC2.Windows.CloudWatch\",",
                  "      \"Parameters\" : {",
                  "        \"AccessKey\" : \"\",",
                  "        \"SecretKey\" : \"\",",
                           { "Fn::Sub" : "        \"Region\": \"${AWS::Region}\","},
                  "        \"NameSpace\" : \"Windows/Default\"",
                  "      }",
                  "    }],",
                  "    \"Flows\": {",
                  "      \"Flows\": [",
                  "        \"ApplicationEventLog,CloudWatchApplicationEventLog\",",
                  "        \"SystemEventLog,CloudWatchSystemEventLog\",",
                  "        \"SecurityEventLog,CloudWatchSecurityEventLog\",",
                  "        \"EC2ConfigLog,CloudWatchEC2ConfigLog\",",
                  "        \"CfnInitLog,CloudWatchCfnInitLog\",",
                  "        \"IISLogs,CloudWatchIISLogs\",",
                  "        \"MemoryPerformanceCounter,CloudWatch\"",
                  "      ]",
                  "    }",
                  "  }",
                  "}"
                ]]}
              }
            },
            "commands" : {
              "01-enable-SSM" : {
                "command" : "powershell.exe -Command \"Set-Service -Name AmazonSSMAgent -StartupType Automatic\"",
                "waitAfterCompletion" : "0"
              },
              "02-restart-SSM" : {
                "command" : "powershell.exe -Command \"Restart-Service AmazonSSMAgent\"",
                "waitAfterCompletion" : "30"
              }
            }
          },
          "ConfigureOS" : {
            "commands" : {
              "01-disable-windows-firewall" : {
                "command" : "powershell.exe -Command \"Get-NetFirewallProfile | Set-NetFirewallProfile -Enabled False\"",
                "waitAfterCompletion" : "0"
              },
              "02-set-execution-policy" : {
                "command" : "powershell.exe -Command \"Set-ExecutionPolicy RemoteSigned -Force\"",
                "waitAfterCompletion" : "0"
              }
            }
          },
          "ConfigureCFN" : {
            "files" : {
              "c:\\cfn\\cfn-hup.conf" : {
                "content" : { "Fn::Join" : [ "\n", [
                  "[main]",
                  { "Fn::Sub" : "stack=${AWS::StackId}" },
                  { "Fn::Sub" : "region=${AWS::Region}" }
                  ]]}
              },
              "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf" : {
                "content": { "Fn::Join" : [ "\n", [
                  "[cfn-auto-reloader-hook]",
                  "triggers=post.update",
                  "path=Resources.Instance.Metadata.AWS::CloudFormation::Init",
                  { "Fn::Sub" : "action=cfn-init.exe --verbose --configsets All --stack ${AWS::StackId} --resource Instance --region ${AWS::Region}" }
                ]]}
              }
            },
            "services" : {
              "windows" : {
                "cfn-hup" : {
                  "enabled" : "true",
                  "ensureRunning" : "true",
                  "files" : [
                    "c:\\cfn\\cfn-hup.conf",
                    "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                  ]
                }
              }
            }
          },
          "InstallWebServer" : {
            "commands" : {
              "01_install_webserver" : {
                "command" : "powershell.exe -Command \"Install-WindowsFeature Web-Server -IncludeAllSubFeature\"",
                "waitAfterCompletion" : "0"
              }
            }
          },
          "InstallAwsCli" : {
            "packages" : {
              "msi" : {
                "awscli" : "https://s3.amazonaws.com/aws-cli/AWSCLI64.msi"
              }
            }
          },
          "InstallAtomEditor" : {
            "packages" : {
              "msi" : {
                "atom" : "https://github.com/atom/atom/releases/download/v1.16.0/AtomSetup-x64.msi"
              }
            }
          },
          "InstallApplication" : {
            "sources" : {
              "C:\\Inetpub\\wwwroot" : { "Fn::Join" : [ "", [ "https://", { "Fn::If" : [ "ConfigureGlobalS3", "s3", { "Fn::Sub" : "s3-${AWS::Region}" }]}, ".amazonaws.com/", { "Fn::ImportValue" : { "Fn::Sub" : "${StandardBucketsStackName}-ExamplesBucket" }}, "/", { "Ref" : "ApplicationFolder" }, "/", { "Ref" : "ApplicationObject" }]]}
            }
          },
          "ConfigureApplication" : {
            "files" : {
              "c:\\Inetpub\\wwwroot\\index.htm" : {
                "content" : { "Fn::Join" : [ "\n", [
                  "<html>",
                  "<head>",
                  { "Fn::Sub" : "<title>${ApplicationName} Test Application</title>" },
                  "</head>",
                  "<body>",
                  { "Fn::Sub" : "<h1>${ApplicationName} (${ApplicationVersion})</h1>" },
                  "</body>",
                  "</html>"
                ]]}
              }
            }
          },
          "ConfigureHostname" : {
            "commands" : {
              "01-set-hostname" : {
                "command" : { "Fn::Join" : [ "", [ "powershell.exe Rename-Computer -NewName ", { "Fn::GetAtt" : [ "GetHostName", "HostName" ]}, "01a", " -Restart" ]]},
                "waitAfterCompletion" : "forever"
              }
            }
          }
        }
      },
      "Properties" : {
        "ImageId" : { "Fn::GetAtt" : [ "GetWindowsImageId", "ImageId" ]},
        "InstanceType" : { "Fn::FindInMap" : [ "InstanceTypeMap", "Web", { "Ref" : "EnvironmentType" }]},
        "IamInstanceProfile" : { "Ref" : "InstanceProfile" },
        "KeyName" : { "Ref" : "KeyName" },
        "NetworkInterfaces" : [{
          "Description"              : { "Fn::Join" : [ "-", [ { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }}, { "Ref" : "ApplicationName" }, "NetworkInterface", "eth0" ]]},
          "DeviceIndex"              : "0",
          "SubnetId"                 : { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-WebSubnetA" }},
          "GroupSet"                 : [{ "Ref" :  "InstanceSecurityGroup" }],
          "AssociatePublicIpAddress" : "true",
          "DeleteOnTermination"      : "true"
        }],
        "BlockDeviceMappings" : [{
          "DeviceName" : "/dev/sda1",
          "Ebs" : {
            "VolumeSize" : "50"
          }
        },
        {
          "DeviceName" : "/dev/xvdb",
          "Ebs" : {
            "VolumeSize" : "50",
            "VolumeType" : "io1",
            "Iops" : "500",
            "DeleteOnTermination" : "false"
          }
        }],
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }}, { "Ref" : "ApplicationName" }, "Instance" ]]}}
        ],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : [ "\n", [
          "<script>",
          { "Fn::Sub" : "cfn-init.exe --verbose --configsets All --stack ${AWS::StackId} --resource Instance --region ${AWS::Region}" },
          { "Fn::Sub" : "cfn-signal.exe --exit-code %ERRORLEVEL% --stack ${AWS::StackName} --resource Instance --region ${AWS::Region}" },
          "</script>"
        ]]}}
      },
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT20M"
        }
      }
    },

    "HostNameRecordSet" : {
      "Type" : "AWS::Route53::RecordSet",
      "Properties" : {
        "HostedZoneId" : { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-PublicHostedZone" }},
        "Comment" : { "Fn::Sub" : "Public DNS HostName for ${ApplicationName} Instance." },
        "Name" : { "Fn::Join" : [ "", [ { "Fn::GetAtt" : [ "GetHostName", "HostName" ]}, "01.", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCPublicDomain" }}, "." ]]},
        "Type" : "A",
        "TTL" : "900",
        "ResourceRecords" : [{ "Fn::GetAtt" : [ "Instance", "PublicIp" ]}]
      }
    },

    "ServiceNameRecordSet" : {
      "Type" : "AWS::Route53::RecordSet",
      "Properties" : {
        "HostedZoneId" : { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-PublicHostedZone" }},
        "Comment" : { "Fn::Sub" : "Public DNS ServiceName for ${ApplicationName}." },
        "Name" : { "Fn::Join" : [ "", [ { "Ref" : "ApplicationDomain" }, ".", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCPublicDomain" }}, "." ]]},
        "Type" : "CNAME",
        "TTL" : "900",
        "ResourceRecords" : [{ "Fn::Join" : [ "", [ { "Fn::GetAtt" : [ "GetHostName", "HostName" ]}, "01.", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCPublicDomain" }} ]]}]
      },
      "Condition" : "ConfigureDomainName"
    }
  },

  "Outputs" : {
    "SecurityGroup" : {
      "Description" : "The SecurityGroup",
      "Value" : { "Ref" : "SecurityGroup" },
      "Export" : { "Name" : { "Fn::Sub" : "${AWS::StackName}-SecurityGroup" }}
    },

    "HostName" : {
      "Description" : "The HostName",
      "Value" : { "Fn::Join" : [ "", [ { "Fn::GetAtt" : [ "GetHostName", "HostName" ]}, "01.", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCPublicDomain" }}]]}
    },

    "URL" : {
      "Description" : "The Sample Website URL",
      "Value" :  { "Fn::Join" : [ "", [ "http://", { "Ref" : "ApplicationDomain" }, ".", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCPublicDomain" }}, "/" ]]},
      "Condition" : "ConfigureDomainName"
    }
  }
}
