{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Example-WindowsWebServer Template. This is an example of a Windows Web Server based application, showing installation and configuration via cfn-init.",

  "Metadata" : {
    "AWS::CloudFormation::Interface" : {
      "ParameterGroups" : [
        {
          "Label" : { "default" : "Stack Dependencies" },
          "Parameters" : [
            "VPCStackName",
            "CustomIdentifierFunctionsStackName",
            "StandardAMIFunctionsStackName",
            "StandardTopicsStackName"
          ]
        },
        {
          "Label" : { "default" : "Resource Dependencies" },
          "Parameters" : [
            "KeyName"
          ]
        },
        {
          "Label" : { "default" : "System Configuration" },
          "Parameters" : [
            "CompanyName",
            "SystemName"
          ]
        },
        {
          "Label" : { "default" : "Environment Configuration" },
          "Parameters" : [
            "EnvironmentSize",
            "InstanceOS"
          ]
        },
        {
          "Label" : { "default" : "Application Configuration" },
          "Parameters" : [
            "ApplicationsBucket",
            "ApplicationFolder",
            "ApplicationObject",
            "ApplicationName",
            "ApplicationDomain",
            "ApplicationVersion",
            "UseLogMonitoring",
            "LogRetention"
          ]
        },
        {
          "Label" : { "default" : "Security Configuration" },
          "Parameters" : [
            "PublicUserNetwork",
            "PublicUserNetwork1",
            "PublicUserNetwork2",
            "PublicAdministratorNetwork",
            "PublicAdministratorNetwork1",
            "PublicAdministratorNetwork2",
            "PrivateUserNetwork",
            "PrivateUserNetwork1",
            "PrivateUserNetwork2",
            "PrivateAdministratorNetwork",
            "PrivateAdministratorNetwork1",
            "PrivateAdministratorNetwork2"
          ]
        }
      ],

      "ParameterLabels" : {
        "VPCStackName" : { "default" : "VPC Stack Name" },
        "CustomIdentifierFunctionsStackName" : { "default" : "CustomIdentifierFunctions Stack Name" },
        "StandardAMIFunctionsStackName" : { "default" : "StandardAMIFunctions Stack Name" },
        "StandardTopicsStackName" : { "default" : "StandardTopics Stack Name" },
        "KeyName" : { "default" : "Key Name" },
        "CompanyName" : { "default" : "Company Name" },
        "SystemName" : { "default" : "System Name" },
        "EnvironmentSize" : { "default" : "Environment Size" },
        "InstanceOS" : { "default" : "Instance Operating System" },
        "ApplicationsBucket" : { "default" : "Applications Bucket" },
        "ApplicationFolder" : { "default" : "Application Folder" },
        "ApplicationObject" : { "default" : "Application Object" },
        "ApplicationName" : { "default" : "Application Name" },
        "ApplicationDomain" : { "default" : "Application Domain Name" },
        "ApplicationVersion" : { "default" : "Application Version" },
        "UseLogMonitoring" : { "default" : "Use Log Monitoring" },
        "LogRetention" : { "default" : "Log Retention" },
        "PublicUserNetwork" : { "default" : "Public User Network" },
        "PublicUserNetwork1" : { "default" : "Additional Public User Network 1" },
        "PublicUserNetwork2" : { "default" : "Additional Public User Network 2" },
        "PublicAdministratorNetwork" : { "default" : "Public Administrator Network" },
        "PublicAdministratorNetwork1" : { "default" : "Additional Public Administrator Network 1" },
        "PublicAdministratorNetwork2" : { "default" : "Additional Public Administrator Network 2" },
        "PrivateUserNetwork" : { "default" : "Private User Network" },
        "PrivateUserNetwork1" : { "default" : "Additional Private User Network 1" },
        "PrivateUserNetwork2" : { "default" : "Additional Private User Network 2" },
        "PrivateAdministratorNetwork" : { "default" : "Private Administrator Network" },
        "PrivateAdministratorNetwork1" : { "default" : "Additional Private Administrator Network 1" },
        "PrivateAdministratorNetwork2" : { "default" : "Additional Private Administrator Network 2" }
      }
    }
  },

  "Parameters" : {
    "VPCStackName" : {
      "Description" : "Name of the CloudFormation Stack containing the VPC",
      "Type" : "String",
      "MinLength" : 8,
      "MaxLength" : 64,
      "Default" : "Production-VPC",
      "AllowedPattern" : "^[A-Z][-a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters and dashes."
    },

    "CustomIdentifierFunctionsStackName" : {
      "Description" : "Name of the CloudFormation Stack containing the Custom Identifier Functions",
      "Type" : "String",
      "MaxLength" : 64,
      "Default" : "CustomIdentifierFunctions",
      "AllowedPattern" : "(^$|^[A-Z][-a-zA-Z0-9]*$)",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters and dashes."
    },

    "StandardAMIFunctionsStackName" : {
      "Description" : "Name of the CloudFormation Stack containing the Standard AMI Functions",
      "Type" : "String",
      "MaxLength" : 64,
      "Default" : "StandardAMIFunctions",
      "AllowedPattern" : "(^$|^[A-Z][-a-zA-Z0-9]*$)",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters and dashes."
    },

    "StandardTopicsStackName" : {
      "Description" : "Name of the CloudFormation Stack containing Standard Topics",
      "Type" : "String",
      "MinLength" : 2,
      "MaxLength" : 64,
      "Default" : "StandardTopics",
      "AllowedPattern" : "^[A-Z][-a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters and dashes."
    },

    "KeyName" : {
      "Description" : "Name of an existing KeyPair to enable SSH access to the Instance",
      "Type" : "AWS::EC2::KeyPair::KeyName",
      "MaxLength" : 32,
      "Default" : "example",
      "AllowedPattern" : "(^$|^[_a-zA-Z0-9]*$)",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    },

    "CompanyName" : {
      "Description" : "Name of the Company associated with the Stack",
      "Type" : "String",
      "MinLength" : 2,
      "MaxLength" : 32,
      "Default" : "Travel",
      "AllowedPattern" : "^[A-Z][a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters."
    },

    "SystemName" : {
      "Description" : "Name of the System associated with the Stack",
      "Type" : "String",
      "MinLength" : 2,
      "MaxLength" : 32,
      "Default" : "IROPS",
      "AllowedPattern" : "^[A-Z][a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters."
    },

    "EnvironmentSize" : {
      "Description" : "Size of the Environment to build. Used to select size-related options in Mappings",
      "Type" : "String",
      "Default" : "micro",
      "AllowedValues" : [ "micro", "small", "medium", "large", "xlarge", "mlarge", "mxlarge", "m2xlarge", "clarge", "cxlarge", "c2xlarge" ],
      "ConstraintDescription" : "must be micro, small, medium, large, xlarge, mlarge, mxlarge, m2xlarge, clarge, cxlarge or c2xlarge."
    },

    "InstanceOS" : {
      "Description" : "The Operating System to use for Instances",
      "Type" : "String",
      "Default" : "Windows Server 2012 R2",
      "AllowedValues" : [ "Windows Server 2012 R2", "Windows Server 2016" ],
      "ConstraintDescription" : "must be \"Windows Server 2012 R2\" or \"Windows Server 2016\"."
    },

    "ApplicationsBucket" : {
      "Description" : "S3 bucket containing Applications to be deployed",
      "Type" : "String",
      "MinLength" : 2,
      "MaxLength" : 64,
      "Default" : "examples-us-west-2-irops",
      "AllowedPattern" : "^[a-z][-a-z0-9]*$",
      "ConstraintDescription" : "must begin with a lower case letter and contain only lower case letters, numbers and dashes."
    },

    "ApplicationFolder" : {
      "Description" : "Folder within S3 bucket containing WebServer Application objects",
      "Type" : "String",
      "MinLength" : 2,
      "MaxLength" : 32,
      "Default" : "WindowsWebServer",
      "AllowedPattern" : "^[A-Z][a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters."
    },

    "ApplicationObject" : {
      "Description" : "Object within S3 bucket and folder containing WebServer Application object",
      "Type" : "String",
      "MaxLength" : 64,
      "Default" : "",
      "AllowedPattern" : "(^$|^[-_.a-zA-Z0-9]*$)",
      "ConstraintDescription" : "must be a valid filename, not containing slashes."
    },

    "ApplicationName" : {
      "Description" : "Name of the Application associated with the Stack",
      "Type" : "String",
      "MinLength" : 2,
      "MaxLength" : 32,
      "Default" : "WindowsWebServer",
      "AllowedPattern" : "^[A-Z][a-zA-Z0-9]*$",
      "ConstraintDescription" : "must begin with an upper case letter and contain alphanumeric characters."
    },

    "ApplicationDomain" : {
      "Description" : "DNS Name of the Application associated with the Stack",
      "Type" : "String",
      "MaxLength" : 16,
      "Default" : "",
      "AllowedPattern" : "(^$|^[a-z][-a-z0-9]*$)",
      "ConstraintDescription" : "must begin with a lower case letter and contain only lower case letters, numbers and dashes."
    },

    "ApplicationVersion" : {
      "Description" : "Version of the Application",
      "Type" : "String",
      "MinLength" : 5,
      "MaxLength" : 32,
      "Default" : "1.0.0",
      "AllowedPattern" : "^[0-9]*.[0-9]*.[0-9]*(-[a-zA-Z0-9][-a-zA-Z0-9]*)?$",
      "ConstraintDescription" : "must follow semantic versioning conventions."
    },

    "UseLogMonitoring" : {
      "Description" : "Send Logs to CloudWatch Logs",
      "Type" : "String",
      "Default" : "true",
      "AllowedValues" : [ "true", "false" ],
      "ConstraintDescription" : "must be either true or false."
    },

    "LogRetention" : {
      "Description" : "Number of days to retain log events",
      "Type" : "Number",
      "Default" : 14,
      "AllowedValues" : [ 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653 ],
      "ConstraintDescription" : "must be: 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827 or 3653."
    },

    "PublicUserNetwork" : {
      "Description" : "Public network that can access the Application",
      "Type" : "String",
      "Default" : "0.0.0.0/0",
      "AllowedPattern" : "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$",
      "ConstraintDescription" : "must be a valid IP CIDR range of the form x.x.x.x/x."
    },

    "PublicUserNetwork1" : {
      "Description" : "Additional public network that can access the Application",
      "Type" : "String",
      "Default" : "",
      "AllowedPattern" : "(^$|^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$)",
      "ConstraintDescription" : "must be a valid IP CIDR range of the form x.x.x.x/x."
    },

    "PublicUserNetwork2" : {
      "Description" : "Additional public network that can access the Application",
      "Type" : "String",
      "Default" : "",
      "AllowedPattern" : "(^$|^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$)",
      "ConstraintDescription" : "must be a valid IP CIDR range of the form x.x.x.x/x."
    },

    "PublicAdministratorNetwork" : {
      "Description" : "Public network that can administer the Application",
      "Type" : "String",
      "Default" : "0.0.0.0/0",
      "AllowedPattern" : "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$",
      "ConstraintDescription" : "must be a valid IP CIDR range of the form x.x.x.x/x."
    },

    "PublicAdministratorNetwork1" : {
      "Description" : "Additional public network that can administer the Application",
      "Type" : "String",
      "Default" : "",
      "AllowedPattern" : "(^$|^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$)",
      "ConstraintDescription" : "must be a valid IP CIDR range of the form x.x.x.x/x."
    },

    "PublicAdministratorNetwork2" : {
      "Description" : "Additional public network that can administer the Application",
      "Type" : "String",
      "Default" : "",
      "AllowedPattern" : "(^$|^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$)",
      "ConstraintDescription" : "must be a valid IP CIDR range of the form x.x.x.x/x."
    },

    "PrivateUserNetwork" : {
      "Description" : "Private network that can access the Application",
      "Type" : "String",
      "Default" : "10.0.0.0/16",
      "AllowedPattern" : "(^$|^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$)",
      "ConstraintDescription" : "must be a valid IP CIDR range of the form 10.x.x.x/x."
    },

    "PrivateUserNetwork1" : {
      "Description" : "Additional private network that can access the Application",
      "Type" : "String",
      "Default" : "",
      "AllowedPattern" : "(^$|^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$)",
      "ConstraintDescription" : "must be a valid IP CIDR range of the form 10.x.x.x/x."
    },

    "PrivateUserNetwork2" : {
      "Description" : "Additional private network that can access the Application",
      "Type" : "String",
      "Default" : "",
      "AllowedPattern" : "(^$|^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$)",
      "ConstraintDescription" : "must be a valid IP CIDR range of the form 10.x.x.x/x."
    },

    "PrivateAdministratorNetwork" : {
      "Description" : "Private network that can administer the Application",
      "Type" : "String",
      "Default" : "10.0.0.0/16",
      "AllowedPattern" : "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$",
      "ConstraintDescription" : "must be a valid IP CIDR range of the form x.x.x.x/x."
    },

    "PrivateAdministratorNetwork1" : {
      "Description" : "Additional private network that can administer the Application",
      "Type" : "String",
      "Default" : "",
      "AllowedPattern" : "(^$|^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$)",
      "ConstraintDescription" : "must be a valid IP CIDR range of the form x.x.x.x/x."
    },

    "PrivateAdministratorNetwork2" : {
      "Description" : "Additional private network that can administer the Application",
      "Type" : "String",
      "Default" : "",
      "AllowedPattern" : "(^$|^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$)",
      "ConstraintDescription" : "must be a valid IP CIDR range of the form x.x.x.x/x."
    }
  },

  "Mappings" : {
    "InstanceTypeMap" : {
      "WindowsServer" : { "micro" : "t2.micro", "small" : "t2.small", "medium" : "t2.medium", "large" : "t2.large", "xlarge" : "t2.xlarge",
                          "mlarge" : "m4.large", "mxlarge" : "m4.xlarge", "m2xlarge" : "m4.2xlarge",
                          "clarge" : "c4.large", "cxlarge" : "c4.xlarge", "c2xlarge" : "c4.2xlarge" }
    }
  },

  "Conditions" : {
    "DownloadApplication" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Ref" : "ApplicationObject" }, "" ]}]},
    "ConfigureDomainName" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Ref" : "ApplicationDomain" }, "" ]}]},
    "ConfigureLogs" : { "Fn::Equals" : [{ "Ref" : "UseLogMonitoring" }, "true" ]},
    "ConfigurePublicUserNetwork" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Ref" : "PublicUserNetwork" }, "" ]}]},
    "ConfigurePublicUserNetwork1" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Ref" : "PublicUserNetwork1" }, "" ]}]},
    "ConfigurePublicUserNetwork2" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Ref" : "PublicUserNetwork2" }, "" ]}]},
    "ConfigurePublicAdministratorNetwork" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Ref" : "PublicAdministratorNetwork" }, "" ]}]},
    "ConfigurePublicAdministratorNetwork1" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Ref" : "PublicAdministratorNetwork1" }, "" ]}]},
    "ConfigurePublicAdministratorNetwork2" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Ref" : "PublicAdministratorNetwork2" }, "" ]}]},
    "ConfigurePrivateUserNetwork" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Ref" : "PrivateUserNetwork" }, "" ]}]},
    "ConfigurePrivateUserNetwork1" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Ref" : "PrivateUserNetwork1" }, "" ]}]},
    "ConfigurePrivateUserNetwork2" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Ref" : "PrivateUserNetwork2" }, "" ]}]},
    "ConfigurePrivateAdministratorNetwork" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Ref" : "PrivateAdministratorNetwork" }, "" ]}]},
    "ConfigurePrivateAdministratorNetwork1" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Ref" : "PrivateAdministratorNetwork1" }, "" ]}]},
    "ConfigurePrivateAdministratorNetwork2" : { "Fn::Not" : [{ "Fn::Equals" : [{ "Ref" : "PrivateAdministratorNetwork2" }, "" ]}]}
  },

  "Resources" : {
    "GetHostName" : {
      "Type" : "Custom::GetHostName",
      "Properties" : {
        "ServiceToken" : { "Fn::ImportValue" : { "Fn::Sub" : "${CustomIdentifierFunctionsStackName}-GetHostNameFunctionArn" }},
        "CompanyName" : { "Ref" : "CompanyName" },
        "LocationName" : { "Ref": "AWS::Region" },
        "EnvironmentName" : { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }},
        "ApplicationName" : { "Ref" : "ApplicationName" }
      }
    },

    "GetWindowsImageId" : {
      "Type" : "Custom::GetWindowsImageId",
      "Properties" : {
        "ServiceToken" : { "Fn::ImportValue" : { "Fn::Sub" : "${StandardAMIFunctionsStackName}-GetWindowsImageIdFunctionArn" }},
        "Region" : { "Ref" : "AWS::Region" },
        "OSName" : { "Ref" : "InstanceOS" }
      }
    },

    "Role" : {
      "Type" : "AWS::IAM::Role",
      "Properties" : {
        "Path" : "/",
        "AssumeRolePolicyDocument" : {
          "Version" : "2012-10-17",
          "Statement" : [{
            "Effect" : "Allow",
            "Principal" : { "Service" : [ "ec2.amazonaws.com" ]},
            "Action" : [ "sts:AssumeRole" ]
          }]
        },
        "ManagedPolicyArns" : [ "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM" ]
      }
    },

    "DownloadApplicationFromS3Policy" : {
      "Type" : "AWS::IAM::Policy",
      "Properties" : {
        "PolicyName" : "DownloadApplicationFromS3Policy",
        "PolicyDocument" : {
          "Version" : "2012-10-17",
          "Statement" : [{
            "Effect" : "Allow",
            "Action" : [
              "s3:GetObject"
            ],
            "Resource" : { "Fn::Sub" : "arn:aws:s3:::${ApplicationsBucket}/${ApplicationFolder}/*" }
          }]
        },
        "Roles" : [{ "Ref" : "Role" }]
      },
      "Condition" : "DownloadApplication"
    },

    "LogMonitoringPolicy" : {
      "Type" : "AWS::IAM::Policy",
      "Properties" : {
        "PolicyName" : "LogMonitoringPolicy",
        "PolicyDocument" : {
          "Version" : "2012-10-17",
          "Statement" : [{
            "Effect" : "Allow",
            "Action" : [
              "logs:CreateLogGroup",
              "logs:CreateLogStream",
              "logs:PutLogEvents",
              "logs:DescribeLogStreams"
            ],
            "Resource" : [
              "arn:aws:logs:*:*:*"
            ]
          }]
        },
        "Roles" : [{ "Ref" : "Role" }]
      },
      "Condition" : "ConfigureLogs"
    },

    "LogGroup" : {
      "Type" : "AWS::Logs::LogGroup",
      "Properties" : {
        "RetentionInDays" : { "Ref" : "LogRetention" }
      },
      "Condition" : "ConfigureLogs"
    },

    "404MetricFilter" : {
      "Type" : "AWS::Logs::MetricFilter",
      "Properties" : {
        "LogGroupName" : { "Ref" : "LogGroup" },
        "FilterPattern" : "[ip, identity, user_id, timestamp, request, status_code = 404, size, ...]",
        "MetricTransformations" : [{
          "MetricNamespace" : { "Fn::Join" : [ "", [ { "Ref" : "SystemName" }, "/", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }}, "-", { "Ref" : "ApplicationName" }]]},
          "MetricName" : "404Count",
          "MetricValue" : "1"
        }]
      },
      "Condition" : "ConfigureLogs"
    },

    "BytesTransferredMetricFilter" : {
      "Type" : "AWS::Logs::MetricFilter",
      "Properties" : {
        "LogGroupName" : { "Ref" : "LogGroup" },
        "FilterPattern" : "[ip, identity, user_id, timestamp, request, status_code, size, ...]",
        "MetricTransformations" : [{
          "MetricNamespace" : { "Fn::Join" : [ "", [ { "Ref" : "SystemName" }, "/", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }}, "-", { "Ref" : "ApplicationName" }]]},
          "MetricName" : "BytesTransferred",
          "MetricValue" : "$size"
        }]
      },
      "Condition" : "ConfigureLogs"
    },

    "404Alarm" : {
      "Type" : "AWS::CloudWatch::Alarm",
      "Properties" : {
        "AlarmDescription" : "The number of 404s is greater than 5 over 1 minute",
        "AlarmActions" : [
          { "Fn::ImportValue" : { "Fn::Sub" : "${StandardTopicsStackName}-AlarmsTopic" }}
        ],
        "Namespace" : { "Fn::Join" : [ "", [ { "Ref" : "SystemName" }, "/", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }}, "-", { "Ref" : "ApplicationName" }]]},
        "MetricName" : "404Count",
        "Statistic" : "Sum",
        "Period" : "60",
        "EvaluationPeriods" : "1",
        "Threshold" : "5",
        "ComparisonOperator" : "GreaterThanThreshold"
      },
      "Condition" : "ConfigureLogs"
    },

    "BandwidthAlarm" : {
      "Type" : "AWS::CloudWatch::Alarm",
      "Properties" : {
        "AlarmDescription" : "The average volume of traffic is greater 1024 KB over 1 minute",
        "AlarmActions" : [
          { "Fn::ImportValue" : { "Fn::Sub" : "${StandardTopicsStackName}-AlarmsTopic" }}
        ],
        "Namespace" : { "Fn::Join" : [ "", [ { "Ref" : "SystemName" }, "/", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }}, "-", { "Ref" : "ApplicationName" }]]},
        "MetricName" : "BytesTransferred",
        "Statistic" : "Average",
        "Period" : "60",
        "EvaluationPeriods" : "1",
        "Threshold" : "1024",
        "ComparisonOperator" : "GreaterThanThreshold"
      },
      "Condition" : "ConfigureLogs"
    },

    "SecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : { "Fn::Join" : [ "-", [ { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }}, { "Ref" : "ApplicationName" }, "SecurityGroup" ]]},
        "VpcId" : { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPC" }},
        "SecurityGroupIngress" : [
          { "Fn::If" : [ "ConfigurePublicUserNetwork",  { "IpProtocol" : "icmp", "FromPort" :   "-1", "ToPort" :   "-1", "CidrIp" : { "Ref" : "PublicUserNetwork" }},  { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigurePublicUserNetwork",  { "IpProtocol" : "tcp",  "FromPort" :   "80", "ToPort" :   "80", "CidrIp" : { "Ref" : "PublicUserNetwork" }},  { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigurePublicUserNetwork",  { "IpProtocol" : "tcp",  "FromPort" :  "443", "ToPort" :  "443", "CidrIp" : { "Ref" : "PublicUserNetwork" }},  { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigurePublicUserNetwork1", { "IpProtocol" : "icmp", "FromPort" :   "-1", "ToPort" :   "-1", "CidrIp" : { "Ref" : "PublicUserNetwork1" }}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigurePublicUserNetwork1", { "IpProtocol" : "tcp",  "FromPort" :   "80", "ToPort" :   "80", "CidrIp" : { "Ref" : "PublicUserNetwork1" }}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigurePublicUserNetwork1", { "IpProtocol" : "tcp",  "FromPort" :  "443", "ToPort" :  "443", "CidrIp" : { "Ref" : "PublicUserNetwork1" }}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigurePublicUserNetwork2", { "IpProtocol" : "icmp", "FromPort" :   "-1", "ToPort" :   "-1", "CidrIp" : { "Ref" : "PublicUserNetwork2" }}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigurePublicUserNetwork2", { "IpProtocol" : "tcp",  "FromPort" :   "80", "ToPort" :   "80", "CidrIp" : { "Ref" : "PublicUserNetwork2" }}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigurePublicUserNetwork2", { "IpProtocol" : "tcp",  "FromPort" :  "443", "ToPort" :  "443", "CidrIp" : { "Ref" : "PublicUserNetwork2" }}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigurePublicAdministratorNetwork",  { "IpProtocol" : "icmp", "FromPort" :   "-1", "ToPort" :   "-1", "CidrIp" : { "Ref" : "PublicAdministratorNetwork" }},  { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigurePublicAdministratorNetwork",  { "IpProtocol" : "tcp",  "FromPort" :   "80", "ToPort" :   "80", "CidrIp" : { "Ref" : "PublicAdministratorNetwork" }},  { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigurePublicAdministratorNetwork",  { "IpProtocol" : "tcp",  "FromPort" :  "443", "ToPort" :  "443", "CidrIp" : { "Ref" : "PublicAdministratorNetwork" }},  { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigurePublicAdministratorNetwork",  { "IpProtocol" : "tcp",  "FromPort" : "3389", "ToPort" : "3389", "CidrIp" : { "Ref" : "PublicAdministratorNetwork" }},  { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigurePublicAdministratorNetwork1", { "IpProtocol" : "icmp", "FromPort" :   "-1", "ToPort" :   "-1", "CidrIp" : { "Ref" : "PublicAdministratorNetwork1" }}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigurePublicAdministratorNetwork1", { "IpProtocol" : "tcp",  "FromPort" :   "80", "ToPort" :   "80", "CidrIp" : { "Ref" : "PublicAdministratorNetwork1" }}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigurePublicAdministratorNetwork1", { "IpProtocol" : "tcp",  "FromPort" :  "443", "ToPort" :  "443", "CidrIp" : { "Ref" : "PublicAdministratorNetwork1" }}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigurePublicAdministratorNetwork1", { "IpProtocol" : "tcp",  "FromPort" : "3389", "ToPort" : "3389", "CidrIp" : { "Ref" : "PublicAdministratorNetwork1" }}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigurePublicAdministratorNetwork2", { "IpProtocol" : "icmp", "FromPort" :   "-1", "ToPort" :   "-1", "CidrIp" : { "Ref" : "PublicAdministratorNetwork2" }}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigurePublicAdministratorNetwork2", { "IpProtocol" : "tcp",  "FromPort" :   "80", "ToPort" :   "80", "CidrIp" : { "Ref" : "PublicAdministratorNetwork2" }}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigurePublicAdministratorNetwork2", { "IpProtocol" : "tcp",  "FromPort" :  "443", "ToPort" :  "443", "CidrIp" : { "Ref" : "PublicAdministratorNetwork2" }}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigurePublicAdministratorNetwork2", { "IpProtocol" : "tcp",  "FromPort" : "3389", "ToPort" : "3389", "CidrIp" : { "Ref" : "PublicAdministratorNetwork2" }}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigurePrivateUserNetwork",  { "IpProtocol" : "icmp", "FromPort" :   "-1", "ToPort" :   "-1", "CidrIp" : { "Ref" : "PrivateUserNetwork" }},  { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigurePrivateUserNetwork",  { "IpProtocol" : "tcp",  "FromPort" :   "80", "ToPort" :   "80", "CidrIp" : { "Ref" : "PrivateUserNetwork" }},  { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigurePrivateUserNetwork",  { "IpProtocol" : "tcp",  "FromPort" :  "443", "ToPort" :  "443", "CidrIp" : { "Ref" : "PrivateUserNetwork" }},  { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigurePrivateUserNetwork1", { "IpProtocol" : "icmp", "FromPort" :   "-1", "ToPort" :   "-1", "CidrIp" : { "Ref" : "PrivateUserNetwork1" }}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigurePrivateUserNetwork1", { "IpProtocol" : "tcp",  "FromPort" :   "80", "ToPort" :   "80", "CidrIp" : { "Ref" : "PrivateUserNetwork1" }}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigurePrivateUserNetwork1", { "IpProtocol" : "tcp",  "FromPort" :  "443", "ToPort" :  "443", "CidrIp" : { "Ref" : "PrivateUserNetwork1" }}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigurePrivateUserNetwork2", { "IpProtocol" : "icmp", "FromPort" :   "-1", "ToPort" :   "-1", "CidrIp" : { "Ref" : "PrivateUserNetwork2" }}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigurePrivateUserNetwork2", { "IpProtocol" : "tcp",  "FromPort" :   "80", "ToPort" :   "80", "CidrIp" : { "Ref" : "PrivateUserNetwork2" }}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigurePrivateUserNetwork2", { "IpProtocol" : "tcp",  "FromPort" :  "443", "ToPort" :  "443", "CidrIp" : { "Ref" : "PrivateUserNetwork2" }}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigurePrivateAdministratorNetwork",  { "IpProtocol" : "icmp", "FromPort" :   "-1", "ToPort" :   "-1", "CidrIp" : { "Ref" : "PrivateAdministratorNetwork" }},  { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigurePrivateAdministratorNetwork",  { "IpProtocol" : "tcp",  "FromPort" :   "80", "ToPort" :   "80", "CidrIp" : { "Ref" : "PrivateAdministratorNetwork" }},  { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigurePrivateAdministratorNetwork",  { "IpProtocol" : "tcp",  "FromPort" :  "443", "ToPort" :  "443", "CidrIp" : { "Ref" : "PrivateAdministratorNetwork" }},  { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigurePrivateAdministratorNetwork",  { "IpProtocol" : "tcp",  "FromPort" : "3389", "ToPort" : "3389", "CidrIp" : { "Ref" : "PrivateAdministratorNetwork" }},  { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigurePrivateAdministratorNetwork1", { "IpProtocol" : "icmp", "FromPort" :   "-1", "ToPort" :   "-1", "CidrIp" : { "Ref" : "PrivateAdministratorNetwork1" }}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigurePrivateAdministratorNetwork1", { "IpProtocol" : "tcp",  "FromPort" :   "80", "ToPort" :   "80", "CidrIp" : { "Ref" : "PrivateAdministratorNetwork1" }}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigurePrivateAdministratorNetwork1", { "IpProtocol" : "tcp",  "FromPort" :  "443", "ToPort" :  "443", "CidrIp" : { "Ref" : "PrivateAdministratorNetwork1" }}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigurePrivateAdministratorNetwork1", { "IpProtocol" : "tcp",  "FromPort" : "3389", "ToPort" : "3389", "CidrIp" : { "Ref" : "PrivateAdministratorNetwork1" }}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigurePrivateAdministratorNetwork2", { "IpProtocol" : "icmp", "FromPort" :   "-1", "ToPort" :   "-1", "CidrIp" : { "Ref" : "PrivateAdministratorNetwork2" }}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigurePrivateAdministratorNetwork2", { "IpProtocol" : "tcp",  "FromPort" :   "80", "ToPort" :   "80", "CidrIp" : { "Ref" : "PrivateAdministratorNetwork2" }}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigurePrivateAdministratorNetwork2", { "IpProtocol" : "tcp",  "FromPort" :  "443", "ToPort" :  "443", "CidrIp" : { "Ref" : "PrivateAdministratorNetwork2" }}, { "Ref" : "AWS::NoValue" }]},
          { "Fn::If" : [ "ConfigurePrivateAdministratorNetwork2", { "IpProtocol" : "tcp",  "FromPort" : "3389", "ToPort" : "3389", "CidrIp" : { "Ref" : "PrivateAdministratorNetwork2" }}, { "Ref" : "AWS::NoValue" }]}
        ],
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }}, { "Ref" : "ApplicationName" }, "SecurityGroup" ]]}}
        ]
      }
    },

    "InstanceProfile" : {
      "Type" : "AWS::IAM::InstanceProfile",
      "Properties" : {
        "Path" : "/",
        "Roles" : [{ "Ref" : "Role" }]
      }
    },

    "Instance" : {
      "Type" : "AWS::EC2::Instance",
      "Metadata" : {
        "AWS::CloudFormation::Authentication" : {
          "S3Credentials" : {
            "type" : "S3",
            "roleName" : { "Ref" : "Role" },
            "buckets" : [{ "Ref" : "ApplicationsBucket" }]
          }
        },
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "All" : [
              "ConfigureOS",
              "ConfigureHostname",
              "ConfigureCFN",
              "InstallWebServer",
              { "Fn::If" : [ "DownloadApplication", "DownloadApplication", "ConfigureApplication" ]},
              "ConfigureLogs"
            ]
          },
          "ConfigureOS" : {
            "commands" : {
              "01_disable_windows_firewall" : {
                "command" : "powershell.exe -Command \"Get-NetFirewallProfile | Set-NetFirewallProfile -Enabled False\"",
                "waitAfterCompletion" : "0"
              },
              "02_set_execution_policy" : {
                "command" : "powershell.exe -Command \"Set-ExecutionPolicy RemoteSigned -Force\"",
                "waitAfterCompletion" : "0"
              }
            }
          },
          "ConfigureHostname" : {
            "commands" : {
              "01_sethostname" : {
                "command" : { "Fn::Join" : [ "", [ "powershell.exe Rename-Computer -NewName ", { "Fn::GetAtt" : [ "GetHostName", "HostName" ]}, "01", " -Restart" ]]},
                "waitAfterCompletion" : "forever"
              }
            }
          },
          "ConfigureCFN" : {
            "files" : {
              "c:\\cfn\\cfn-hup.conf" : {
                "content" : { "Fn::Join" : [ "", [
                  "[main]\n",
                  "stack=", { "Ref" : "AWS::StackId" }, "\n",
                  "region=", { "Ref" : "AWS::Region" }, "\n"
                  ]]}
              },
              "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf" : {
                "content": { "Fn::Join" : [ "", [
                  "[cfn-auto-reloader-hook]\n",
                  "triggers=post.update\n",
                  "path=Resources.Instance.Metadata.AWS::CloudFormation::Init\n",
                  "action=cfn-init.exe --verbose",
                  " --configsets All",
                  " --stack ", { "Ref" : "AWS::StackId" },
                  " --resource Instance",
                  " --region ", { "Ref" : "AWS::Region" }, "\n"
                ]]}
              }
            },
            "services" : {
              "windows" : {
                "cfn-hup" : {
                  "enabled" : "true",
                  "ensureRunning" : "true",
                  "files" : [
                    "c:\\cfn\\cfn-hup.conf",
                    "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                  ]
                }
              }
            }
          },
          "InstallWebServer" : {
            "commands" : {
              "01_install_webserver" : {
                "command" : "powershell.exe -Command \"Install-WindowsFeature Web-Server -IncludeAllSubFeature\"",
                "waitAfterCompletion" : "0"
              }
            }
          },
          "DownloadApplication" : {
            "sources" : {
              "c:\\Inetpub\\wwwroot" : { "Fn::Sub" : "https://s3-${AWS::Region}.amazonaws.com/${ApplicationsBucket}/${ApplicationFolder}/${ApplicationObject}" }
            }
          },
          "ConfigureApplication" : {
            "files" : {
              "c:\\Inetpub\\wwwroot\\index.htm" : {
                "content" : { "Fn::Join" : [ "", [
                  "<html>\n",
                  "<head>\n",
                  "<title>", { "Ref" : "ApplicationName" }, " Test Application</title>\n",
                  "</head>\n",
                  "<body>\n",
                  "<h1>", { "Ref" : "ApplicationName" }, " (", { "Ref" : "ApplicationVersion" }, ")</h1>\n",
                  "</body>\n",
                  "</html>\n"
                ]]}
              }
            }
          },
          "ConfigureLogs" : {
            "files" : {
              "C:\\Program Files\\Amazon\\SSM\\Plugins\\awsCloudWatch\\AWS.EC2.Windows.CloudWatch.json" : {
                "content" : { "Fn::Join" : [ "", [
                  "{\n",
                  "  \"IsEnabled\" : true,\n",
                  "  \"EngineConfiguration\" : {\n",
                  "    \"PollInterval\" : \"00:00:15\",\n",
                  "    \"Components\" : [{\n",
                  "      \"Id\" : \"ApplicationEventLog\",\n",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.EventLog.EventLogInputComponent,AWS.EC2.Windows.CloudWatch\",\n",
                  "      \"Parameters\" : {\n",
                  "        \"LogName\" : \"Application\",\n",
                  "        \"Levels\" : \"1\"\n",
                  "      }\n",
                  "    },\n",
                  "    {\n",
                  "      \"Id\" : \"SystemEventLog\",\n",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.EventLog.EventLogInputComponent,AWS.EC2.Windows.CloudWatch\",\n",
                  "      \"Parameters\" : {\n",
                  "        \"LogName\" : \"System\",\n",
                  "        \"Levels\" : \"7\"\n",
                  "      }\n",
                  "    },\n",
                  "    {\n",
                  "      \"Id\" : \"SecurityEventLog\",\n",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.EventLog.EventLogInputComponent,AWS.EC2.Windows.CloudWatch\",\n",
                  "      \"Parameters\" : {\n",
                  "        \"LogName\" : \"Security\",\n",
                  "        \"Levels\" : \"7\"\n",
                  "      }\n",
                  "    },\n",
                  "    {\n",
                  "      \"Id\" : \"ETW\",\n",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.EventLog.EventLogInputComponent,AWS.EC2.Windows.CloudWatch\",\n",
                  "      \"Parameters\" : {\n",
                  "        \"LogName\" : \"Microsoft-Windows-WinINet/Analytic\",\n",
                  "        \"Levels\" : \"7\"\n",
                  "      }\n",
                  "    },\n",
                  "    {\n",
                  "      \"Id\" : \"IISLogs\",\n",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",\n",
                  "      \"Parameters\" : {\n",
                  "        \"LogDirectoryPath\" : \"C:\\\\inetpub\\\\logs\\\\LogFiles\\\\W3SVC1\",\n",
                  "        \"TimestampFormat\" : \"yyyy-MM-dd HH:mm:ss\",\n",
                  "        \"Encoding\" : \"UTF-8\",\n",
                  "        \"Filter\" : \"\",\n",
                  "        \"CultureName\" : \"en-US\",\n",
                  "        \"TimeZoneKind\" : \"UTC\",\n",
                  "        \"LineCount\" : \"3\"\n",
                  "      }\n",
                  "    },\n",
                  "    {\n",
                  "      \"Id\" : \"CustomLogs\",\n",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch\",\n",
                  "      \"Parameters\" : {\n",
                  "        \"LogDirectoryPath\" : \"C:\\\\CustomLogs\\\\\",\n",
                  "        \"TimestampFormat\" : \"MM/dd/yyyy HH:mm:ss\",\n",
                  "        \"Encoding\" : \"UTF-8\",\n",
                  "        \"Filter\" : \"\",\n",
                  "        \"CultureName\" : \"en-US\",\n",
                  "        \"TimeZoneKind\" : \"Local\"\n",
                  "      }\n",
                  "    },\n",
                  "    {\n",
                  "      \"Id\" : \"PerformanceCounter\",\n",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.PerformanceCounterComponent.PerformanceCounterInputComponent,AWS.EC2.Windows.CloudWatch\",\n",
                  "      \"Parameters\" : {\n",
                  "        \"CategoryName\" : \"Memory\",\n",
                  "        \"CounterName\" : \"Available MBytes\",\n",
                  "        \"InstanceName\" : \"\",\n",
                  "        \"MetricName\" : \"Memory\",\n",
                  "        \"Unit\" : \"Megabytes\",\n",
                  "        \"DimensionName\" : \"\",\n",
                  "        \"DimensionValue\" : \"\"\n",
                  "      }\n",
                  "    },\n",
                  "    {\n",
                  "      \"Id\" : \"CloudWatchLogs\",\n",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch\",\n",
                  "      \"Parameters\" : {\n",
                  "        \"AccessKey\" : \"\",\n",
                  "        \"SecretKey\" : \"\",\n",
                  "        \"Region\" : \"", { "Ref" : "AWS::NoValue" }, "\",\n",
                  "        \"LogGroup\" : \"", { "Fn::If" : [ "ConfigureLogs", { "Ref" : "LogGroup" }, { "Ref" : "AWS::NoValue" }]}, "\",\n",
                  "        \"LogStream\" : \"{instance_id}\"\n",
                  "      }\n",
                  "    },\n",
                  "    {\n",
                  "      \"Id\" : \"CloudWatch\",\n",
                  "      \"FullName\" : \"AWS.EC2.Windows.CloudWatch.CloudWatch.CloudWatchOutputComponent,AWS.EC2.Windows.CloudWatch\",\n",
                  "      \"Parameters\" : {\n",
                  "        \"AccessKey\" : \"\",\n",
                  "        \"SecretKey\" : \"\",\n",
                  "        \"Region\" : \"", { "Ref" : "AWS::NoValue" }, "\",\n",
                  "        \"NameSpace\" : \"Windows/Default\"\n",
                  "      }\n",
                  "    }],\n",
                  "    \"Flows\" : {\n",
                  "      \"Flows\" : [\n",
                  "        \"(ApplicationEventLog,SystemEventLog),CloudWatchLogs\",\n",
                  "        \"PerformanceCounter,CloudWatch\"\n",
                  "      ]\n",
                  "    }\n",
                  "  }\n",
                  "}\n"
                ]]}
              }
            }
          }
        }
      },
      "Properties" : {
        "ImageId" : { "Fn::GetAtt" : [ "GetWindowsImageId", "ImageId" ]},
        "InstanceType" : { "Fn::FindInMap" : [ "InstanceTypeMap", "WindowsServer", { "Ref" : "EnvironmentSize" }]},
        "IamInstanceProfile" : { "Ref" : "InstanceProfile" },
        "KeyName" : { "Ref" : "KeyName" },
        "NetworkInterfaces" : [{
          "Description"              : { "Fn::Join" : [ "-", [ { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }}, { "Ref" : "ApplicationName" }, "NetworkInterface0" ]]},
          "DeviceIndex"              : "0",
          "SubnetId"                 : { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-WebSubnetA" }},
          "GroupSet"                 : [{ "Ref" :  "SecurityGroup" }],
          "AssociatePublicIpAddress" : "true",
          "DeleteOnTermination"      : "true"
        }],
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCName" }}, { "Ref" : "ApplicationName" }, "Instance" ]]}}
        ],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : [ "", [
          "<script>\n",
          "\n",
          "cfn-init.exe --verbose",
          " --configsets All",
          " --stack ", { "Ref" : "AWS::StackId" },
          " --resource Instance",
          " --region ", { "Ref" : "AWS::Region" }, "\n",
          "\n",
          "cfn-signal.exe --exit-code %ERRORLEVEL%",
          " --stack ", { "Ref" : "AWS::StackName" },
          " --resource Instance",
          " --region ", { "Ref" : "AWS::Region" }, "\n",
          "</script>"
        ]]}}
      },
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT30M"
        }
      }
    },

    "HostNameRecordSet" : {
      "Type" : "AWS::Route53::RecordSet",
      "Properties" : {
        "HostedZoneId" : { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-PublicHostedZone" }},
        "Comment" : { "Fn::Sub" : "Public DNS HostName for ${ApplicationName} Instance." },
        "Name" : { "Fn::Join" : [ "", [ { "Fn::GetAtt" : [ "GetHostName", "HostName" ]}, "01.", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCDomain" }}, "." ]]},
        "Type" : "A",
        "TTL" : "900",
        "ResourceRecords" : [{ "Fn::GetAtt" : [ "Instance", "PublicIp" ]}]
      }
    },

    "ServiceNameRecordSet" : {
      "Type" : "AWS::Route53::RecordSet",
      "Properties" : {
        "HostedZoneId" : { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-PublicHostedZone" }},
        "Comment" : { "Fn::Sub" : "Public DNS ServiceName for ${ApplicationName}." },
        "Name" : { "Fn::Join" : [ "", [ { "Ref" : "ApplicationDomain" }, ".", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCDomain" }}, "." ]]},
        "Type" : "CNAME",
        "TTL" : "900",
        "ResourceRecords" : [{ "Fn::Join" : [ "", [ { "Fn::GetAtt" : [ "GetHostName", "HostName" ]}, "01.", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCDomain" }} ]]}]
      },
      "Condition" : "ConfigureDomainName"
    }
  },

  "Outputs" : {
    "SecurityGroup" : {
      "Description" : "The SecurityGroup",
      "Value" : { "Ref" : "SecurityGroup" },
      "Export" : { "Name" : { "Fn::Sub" : "${AWS::StackName}-SecurityGroup" }}
    },

    "HostName" : {
      "Description" : "The HostName",
      "Value" : { "Fn::Join" : [ "", [ { "Fn::GetAtt" : [ "GetHostName", "HostName" ]}, "01.", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCDomain" }}]]}
    },

    "URL" : {
      "Description" : "The Sample Website URL",
      "Value" :  { "Fn::Join" : [ "", [ "http://", { "Ref" : "ApplicationDomain" }, ".", { "Fn::ImportValue" : { "Fn::Sub" : "${VPCStackName}-VPCDomain" }}, "/" ]]},
      "Condition" : "ConfigureDomainName"
    }
  }
}
