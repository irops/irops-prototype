#!/bin/bash
#
# This script deletes the Example-VPCPeeringConnection Example Stack.
#
# This script is written in a format suitable for interactive demos,
# but can be run non-Iteractively and more quickly with the "-I" flag.
#

#  1. Initalize Environment

bindir=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
templatesdir=${bindir%/*}/templates
keysdir=${bindir%/*/*}/keys
tmpdir=/var/tmp

if [ -z "$IROPS_HOME" ]; then
    echo "IROPS_HOME not set, please source the appropriate irops-define-<environment> script."
    exit 1
fi

step=0
speed_max=400
run_default=10
pause_default=2
next_default=5
delete_default=15
delete_attempts=20

interactive=1
speed=100
verbose=0
region=${AWS_DEFAULT_REGION#*@}
account=${AWS_ACCOUNT_NAME:-irops}
user=${AWS_USER_NAME:-administrator}


#  2. Define functions

usage () {
    echo "Usage: ${BASH_SOURCE##*/} [-I [-s | -f]] [-v]"
    echo "              [-r region ] [-a account] [-u user]"
    echo "  -I          non-interactive"
    echo "  -s          slower: increase pauses by 25%"
    echo "  -f          faster: reduce pauses by 25%"
    echo "  -v          verbose"
    echo "  -r region   Region (default: $region)"
    echo "  -a account  Account (default: $account)"
    echo "  -u user     User (default: $user)"
}

run() {
    if [ -z $1 ] || (($1 % 25 != 0)); then
        ((seconds=run_default * speed / 100))
    else
        ((seconds=run_default * $1 * speed / 10000))
    fi
    if [ $interactive = 1 ]; then
        echo
        echo -n "Run? [Y/n/q]"
        read choice
        case "$choice" in
            "" | "y" | "Y" | "yes" | "Yes") choice=y ;;
            "n" | "N" | "no" | "No") choice=n ;;
             *) echo "cancelled"
                exit 2;;
        esac
    else
        echo
        echo -n -e "Waiting $(printf '%2d' $seconds) seconds..."
        while ((seconds > 0)); do
            if ((seconds < 10 || seconds % 10 == 0)); then
                echo -n -e "\rWaiting $(printf '%2d' $seconds) seconds..."
            fi
            sleep 1
            ((seconds--))
        done
        echo " Done"
        choice=y
    fi
}

pause() {
    if [ -z $1 ] || (($1 % 25 != 0)); then
        ((seconds=pause_default * speed / 100))
    else
        ((seconds=pause_default * $1 * speed / 10000))
    fi
    if [ $interactive = 1 ]; then
        echo "#"
        read pause
        echo -en "\033[1A\033[2K"    # undo newline from read
    else
        echo "#"
        sleep $seconds
    fi
}

next() {
    if [ -z $1 ] || (($1 % 25 != 0)); then
        ((seconds=next_default * speed / 100))
    else
        ((seconds=next_default * $1 * speed / 10000))
    fi
    if [ $interactive = 1 ]; then
        echo
        echo -n "Next? [Y/q]"
        read choice
        case "$choice" in
            "" | "y" | "Y" | "yes" | "Yes") choice=y ;;
             *) echo "cancelled"
                exit 2;;
        esac
    else
        echo
        echo -n -e "Waiting $(printf '%2d' $seconds) seconds..."
        while ((seconds > 0)); do
            if ((seconds < 10 || seconds % 10 == 0)); then
                echo -n -e "\rWaiting $(printf '%2d' $seconds) seconds..."
            fi
            sleep 1
            ((seconds--))
        done
        echo " Done"
        choice=y
    fi
}


#  3. Parse command line options

while getopts SIsfvr:a:u:? arg; do
    case $arg in
    S)  setup=1;;
    I)  interactive=0;;
    s)  ((speed < speed_max)) && ((speed=speed+25));;
    f)  ((speed > 0)) && ((speed=speed-25));;
    v)  verbose=1;;
    r)  region="$OPTARG";;
    a)  account="$OPTARG";;
    u)  user="$OPTARG";;
    ?)  usage
        exit 1;;
    esac
done

shift $(($OPTIND - 1))


#  4. Validate environment

if [ -z $region ]; then
    echo "-r region missing!"
    echo "Could not automatically determine region, and it was not specified as a parameter"
    exit 20
else
    case $region in
      us-east-1)
        s3_domain=s3.amazonaws.com;;
      us-east-2|us-west-1|us-west-2|ca-central-1|sa-east-1|eu-west-1|eu-west-2|eu-central-1|ap-northeast-1|ap-northeast-2|ap-south-1|ap-southeast-1|ap-southeast-2)
        s3_domain=s3-$region.amazonaws.com;;
    *)
        echo "-r $region invalid: Please specify a valid region"
        exit 21;;
    esac
fi

if [ -z $account ]; then
    echo "-a account missing!"
    echo "Could not automatically determine account, and it was not specified as a parameter"
    exit 22
fi

if [ -z $user ]; then
    echo "-u user missing!"
    echo "Could not automatically determine user, and it was not specified as a parameter"
    exit 24
fi

profile=$account-$user

if ! grep -s -q "\[profile $profile]" ~/.aws/config; then
    echo "Could not find ($account) Account ($user) User AWSCLI profile!"
    echo "Expected to find: [profile $profile] in ~/.aws/config"
    exit 53
fi

if ! aws cloudformation describe-stacks --stack-name Example-VPCPeeringConnection \
                                        --profile $profile --region $region --output text &> /dev/null; then
    echo "Unable to delete - Example-VPCPeeringConnection Stack does not exist!"
    exit 2
fi

# Prevent certain environment variables from breaking commands
unset AWS_DEFAULT_PROFILE
unset AWS_CREDENTIAL_FILE
unset EC2_PRIVATE_KEY
unset EC2_CERT


#  5. Run

start=$(date +%s)

((++step))
if [ $verbose = 1 ]; then
    clear
    echo
    echo "============================================================"
    echo
    echo "$(printf '%2d' $step). List Existing Stacks"
    echo
    echo "============================================================"
    echo
    echo "Commands:"
    echo
    echo "aws cloudformation describe-stacks --query 'Stacks[].[StackName,StackStatus]' \\"
    echo "                                   --profile $profile --region $region --output table"


    run 50

    if [ $choice = y ]; then
        echo
        echo "# aws cloudformation describe-stacks --query 'Stacks[].[StackName,StackStatus]' \\"
        echo ">                                    --profile $aws_profile --region $aws_region --output table"
        aws cloudformation describe-stacks --query 'Stacks[].[StackName,StackStatus]' \
                                           --profile $profile --region $region --output table

        next
    fi
fi


((++step))
clear
echo
echo "============================================================"
echo
echo "$(printf '%2d' $step). Delete the Stack"
echo
echo "============================================================"
echo
echo "Commands:"
echo
echo "aws cloudformation delete-stack --stack-name Example-VPCPeeringConnection \\"
echo "                                --profile $profile --region $region --output table"

if ! aws cloudformation describe-stacks --stack-name Example-VPCPeeringConnection \
                                      --profile $profile --region $region --output text &> /dev/null; then
    echo
    tput rev
    echo "Already Deleted!"
    tput sgr0

    next 50

else
    run

    if [ $choice = y ]; then
        echo
        echo "# aws cloudformation delete-stack --stack-name Example-VPCPeeringConnection \\"
        echo ">                                 --profile $profile --region $region --output table"
        aws cloudformation delete-stack --stack-name Example-VPCPeeringConnection \
                                        --profile $profile --region $region --output table

        next
    fi
fi


((++step))
clear
echo
echo "============================================================"
echo
echo "$(printf '%2d' $step). Monitor Stack deletion"
echo
echo "============================================================"
echo
echo "Commands:"
echo
echo "aws cloudformation describe-stacks --stack-name Example-VPCPeeringConnection \\"
echo "                                   --query 'Stacks[].[StackName,StackStatus]' \\"
echo "                                   --profile $profile --region $region --output table"
echo
echo "aws cloudformation describe-stack-events --stack-name Example-VPCPeeringConnection --max-items 5 \\"
echo "                                         --query 'StackEvents[].[LogicalResourceId,ResourceStatus,Timestamp]' \\"
echo "                                         --profile $profile --region $region --output table"

if ! aws cloudformation describe-stacks --stack-name Example-VPCPeeringConnection \
                                        --profile $profile --region $region &> /dev/null; then
    echo
    tput rev
    echo "Already Deleted!"
    tput sgr0

    next 50

else
    run 50

    if [ $choice = y ]; then
        echo
        echo "# aws cloudformation describe-stacks --stack-name Example-VPCPeeringConnection \\"
        echo ">                                    --query 'Stacks[].[StackName,StackStatus]' \\"
        echo ">                                    --profile $profile --region $region --output table"
        aws cloudformation describe-stacks --stack-name Example-VPCPeeringConnection \
                                           --query 'Stacks[].[StackName,StackStatus]' \
                                           --profile $profile --region $region --output table
        pause

        attempt=0
        seconds=$delete_default
        while ((attempt++ <= delete_attempts)); do
            echo
            echo "# aws cloudformation describe-stack-events --stack-name Example-VPCPeeringConnection --max-items 5 \\"
            echo ">                                          --query 'StackEvents[].[LogicalResourceId,ResourceStatus,Timestamp]' \\"
            echo ">                                          --profile $profile --region $region --output table"
            aws cloudformation describe-stack-events --stack-name Example-VPCPeeringConnection --max-items 5 \
                                                     --query 'StackEvents[].[LogicalResourceId,ResourceStatus,Timestamp]' \
                                                     --profile $profile --region $region --output table

            status=$(aws cloudformation describe-stacks --stack-name Example-VPCPeeringConnection \
                                                        --query 'Stacks[].StackStatus' \
                                                        --profile $profile --region $region --output text 2> /dev/null)
            RC=$?
            if [ -z "$status" -o "$status" = "CREATE_COMPLETE" -o "$status" = "CREATE_FAILED" -o "$status" = "ROLLBACK_COMPLETE" ]; then
                break
            else
                echo
                echo -n "Not finished ($RC). Waiting $seconds seconds..."
                sleep $seconds
                echo " Done"
            fi
        done

        next
    fi
fi


((++step))
if [ $verbose = 1 ]; then
    clear
    echo
    echo "============================================================"
    echo
    echo "$(printf '%2d' $step). List Resulting Stacks"
    echo
    echo "============================================================"
    echo
    echo "Commands:"
    echo
    echo "aws cloudformation describe-stacks --query 'Stacks[].[StackName,StackStatus]' \\"
    echo "                                   --profile $profile --region $region --output table"
    echo


    run 50

    if [ $choice = y ]; then
        echo
        echo "# aws cloudformation describe-stacks --query 'Stacks[].[StackName,StackStatus]' \\"
        echo ">                                    --profile $profile --region $region --output table"
        aws cloudformation describe-stacks --query 'Stacks[].[StackName,StackStatus]' \
                                           --profile $profile --region $region --output table

        next
    fi
fi

end=$(date +%s)

echo
case $(uname) in
  Darwin)
    echo "(time: $(date -u -r $((end-start)) +"%T"))";;
  *)
    echo "(time: $(date -u -d @$((end-start)) +"%T"))";;
esac
